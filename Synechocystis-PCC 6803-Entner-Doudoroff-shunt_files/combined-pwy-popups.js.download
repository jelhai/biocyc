/*
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/
YAHOO.util.Chain=function(){this.q=[].slice.call(arguments);this.createEvent("end");};YAHOO.util.Chain.prototype={id:0,run:function(){var g=this.q[0],d;if(!g){this.fireEvent("end");return this;}else{if(this.id){return this;}}d=g.method||g;if(typeof d==="function"){var f=g.scope||{},b=g.argument||[],a=g.timeout||0,e=this;if(!(b instanceof Array)){b=[b];}if(a<0){this.id=a;if(g.until){for(;!g.until();){d.apply(f,b);}}else{if(g.iterations){for(;g.iterations-->0;){d.apply(f,b);}}else{d.apply(f,b);}}this.q.shift();this.id=0;return this.run();}else{if(g.until){if(g.until()){this.q.shift();return this.run();}}else{if(!g.iterations||!--g.iterations){this.q.shift();}}this.id=setTimeout(function(){d.apply(f,b);if(e.id){e.id=0;e.run();}},a);}}return this;},add:function(a){this.q.push(a);return this;},pause:function(){if(this.id>0){clearTimeout(this.id);}this.id=0;return this;},stop:function(){this.pause();this.q=[];return this;}};YAHOO.lang.augmentProto(YAHOO.util.Chain,YAHOO.util.EventProvider);(function(){var a=YAHOO.util.Event,c=YAHOO.lang,b=[],d=function(h,e,f){var g;if(!h||h===f){g=false;}else{g=YAHOO.util.Selector.test(h,e)?h:d(h.parentNode,e,f);}return g;};c.augmentObject(a,{_createDelegate:function(f,e,g,h){return function(i){var j=this,n=a.getTarget(i),l=e,p=(j.nodeType===9),q,k,o,m;if(c.isFunction(e)){q=e(n);}else{if(c.isString(e)){if(!p){o=j.id;if(!o){o=a.generateId(j);}m=("#"+o+" ");l=(m+e).replace(/,/gi,(","+m));}if(YAHOO.util.Selector.test(n,l)){q=n;}else{if(YAHOO.util.Selector.test(n,((l.replace(/,/gi," *,"))+" *"))){q=d(n,l,j);}}}}if(q){k=q;if(h){if(h===true){k=g;}else{k=h;}}return f.call(k,i,q,j,g);}};},delegate:function(f,j,l,g,h,i){var e=j,k,m;if(c.isString(g)&&!YAHOO.util.Selector){return false;}if(j=="mouseenter"||j=="mouseleave"){if(!a._createMouseDelegate){return false;}e=a._getType(j);k=a._createMouseDelegate(l,h,i);m=a._createDelegate(function(p,o,n){return k.call(o,p,n);},g,h,i);}else{m=a._createDelegate(l,g,h,i);}b.push([f,e,l,m]);return a.on(f,e,m);},removeDelegate:function(f,j,i){var k=j,h=false,g,e;if(j=="mouseenter"||j=="mouseleave"){k=a._getType(j);}g=a._getCacheIndex(b,f,k,i);if(g>=0){e=b[g];}if(f&&e){h=a.removeListener(e[0],e[1],e[3]);if(h){delete b[g][2];delete b[g][3];b.splice(g,1);}}return h;}});}());(function(){var b=YAHOO.util.Event,g=YAHOO.lang,e=b.addListener,f=b.removeListener,c=b.getListeners,d=[],h={mouseenter:"mouseover",mouseleave:"mouseout"},a=function(n,m,l){var j=b._getCacheIndex(d,n,m,l),i,k;if(j>=0){i=d[j];}if(n&&i){k=f.call(b,i[0],m,i[3]);if(k){delete d[j][2];delete d[j][3];d.splice(j,1);}}return k;};g.augmentObject(b._specialTypes,h);g.augmentObject(b,{_createMouseDelegate:function(i,j,k){return function(q,m){var p=this,l=b.getRelatedTarget(q),o,n;if(p!=l&&!YAHOO.util.Dom.isAncestor(p,l)){o=p;if(k){if(k===true){o=j;}else{o=k;}}n=[q,j];if(m){n.splice(1,0,p,m);}return i.apply(o,n);}};},addListener:function(m,l,k,n,o){var i,j;if(h[l]){i=b._createMouseDelegate(k,n,o);i.mouseDelegate=true;d.push([m,l,k,i]);j=e.call(b,m,l,i);}else{j=e.apply(b,arguments);}return j;},removeListener:function(l,k,j){var i;if(h[k]){i=a.apply(b,arguments);}else{i=f.apply(b,arguments);}return i;},getListeners:function(p,o){var n=[],r,m=(o==="mouseover"||o==="mouseout"),q,k,j;if(o&&(m||h[o])){r=c.call(b,p,this._getType(o));if(r){for(k=r.length-1;k>-1;k--){j=r[k];q=j.fn.mouseDelegate;if((h[o]&&q)||(m&&!q)){n.push(j);}}}}else{n=c.apply(b,arguments);}return(n&&n.length)?n:null;}},true);b.on=b.addListener;}());YAHOO.register("event-mouseenter",YAHOO.util.Event,{version:"2.9.0",build:"2800"});var Y=YAHOO,Y_DOM=YAHOO.util.Dom,EMPTY_ARRAY=[],Y_UA=Y.env.ua,Y_Lang=Y.lang,Y_DOC=document,Y_DOCUMENT_ELEMENT=Y_DOC.documentElement,Y_DOM_inDoc=Y_DOM.inDocument,Y_mix=Y_Lang.augmentObject,Y_guid=Y_DOM.generateId,Y_getDoc=function(a){var b=Y_DOC;if(a){b=(a.nodeType===9)?a:a.ownerDocument||a.document||Y_DOC;}return b;},Y_Array=function(g,d){var c,b,h=d||0;try{return Array.prototype.slice.call(g,h);}catch(f){b=[];c=g.length;for(;h<c;h++){b.push(g[h]);}return b;}},Y_DOM_allById=function(f,a){a=a||Y_DOC;var b=[],c=[],d,e;if(a.querySelectorAll){c=a.querySelectorAll('[id="'+f+'"]');}else{if(a.all){b=a.all(f);if(b){if(b.nodeName){if(b.id===f){c.push(b);b=EMPTY_ARRAY;}else{b=[b];}}if(b.length){for(d=0;e=b[d++];){if(e.id===f||(e.attributes&&e.attributes.id&&e.attributes.id.value===f)){c.push(e);}}}}}else{c=[Y_getDoc(a).getElementById(f)];}}return c;};var COMPARE_DOCUMENT_POSITION="compareDocumentPosition",OWNER_DOCUMENT="ownerDocument",Selector={_foundCache:[],useNative:true,_compare:("sourceIndex" in Y_DOCUMENT_ELEMENT)?function(f,e){var d=f.sourceIndex,c=e.sourceIndex;if(d===c){return 0;}else{if(d>c){return 1;}}return -1;}:(Y_DOCUMENT_ELEMENT[COMPARE_DOCUMENT_POSITION]?function(b,a){if(b[COMPARE_DOCUMENT_POSITION](a)&4){return -1;}else{return 1;}}:function(e,d){var c,a,b;if(e&&d){c=e[OWNER_DOCUMENT].createRange();c.setStart(e,0);a=d[OWNER_DOCUMENT].createRange();a.setStart(d,0);b=c.compareBoundaryPoints(1,a);}return b;}),_sort:function(a){if(a){a=Y_Array(a,0,true);if(a.sort){a.sort(Selector._compare);}}return a;},_deDupe:function(a){var b=[],c,d;for(c=0;(d=a[c++]);){if(!d._found){b[b.length]=d;d._found=true;}}for(c=0;(d=b[c++]);){d._found=null;d.removeAttribute("_found");}return b;},query:function(b,j,k,a){if(typeof j=="string"){j=Y_DOM.get(j);if(!j){return(k)?null:[];}}else{j=j||Y_DOC;}var f=[],c=(Selector.useNative&&Y_DOC.querySelector&&!a),e=[[b,j]],g,l,d,h=(c)?Selector._nativeQuery:Selector._bruteQuery;if(b&&h){if(!a&&(!c||j.tagName)){e=Selector._splitQueries(b,j);}for(d=0;(g=e[d++]);){l=h(g[0],g[1],k);if(!k){l=Y_Array(l,0,true);}if(l){f=f.concat(l);}}if(e.length>1){f=Selector._sort(Selector._deDupe(f));}}Y.log("query: "+b+" returning: "+f.length,"info","Selector");return(k)?(f[0]||null):f;},_splitQueries:function(c,f){var b=c.split(","),d=[],g="",e,a;if(f){if(f.tagName){f.id=f.id||Y_guid();g='[id="'+f.id+'"] ';}for(e=0,a=b.length;e<a;++e){c=g+b[e];d.push([c,f]);}}return d;},_nativeQuery:function(a,b,c){if(Y_UA.webkit&&a.indexOf(":checked")>-1&&(Selector.pseudos&&Selector.pseudos.checked)){return Selector.query(a,b,c,true);
}try{return b["querySelector"+(c?"":"All")](a);}catch(d){return Selector.query(a,b,c,true);}},filter:function(b,a){var c=[],d,e;if(b&&a){for(d=0;(e=b[d++]);){if(Selector.test(e,a)){c[c.length]=e;}}}else{Y.log("invalid filter input (nodes: "+b+", selector: "+a+")","warn","Selector");}return c;},test:function(c,d,k){var g=false,b=d.split(","),a=false,l,o,h,n,f,e,m;if(c&&c.tagName){if(!k&&!Y_DOM_inDoc(c)){l=c.parentNode;if(l){k=l;}else{n=c[OWNER_DOCUMENT].createDocumentFragment();n.appendChild(c);k=n;a=true;}}k=k||c[OWNER_DOCUMENT];if(!c.id){c.id=Y_guid();}for(f=0;(m=b[f++]);){m+='[id="'+c.id+'"]';h=Selector.query(m,k);for(e=0;o=h[e++];){if(o===c){g=true;break;}}if(g){break;}}if(a){n.removeChild(c);}}return g;}};YAHOO.util.Selector=Selector;var PARENT_NODE="parentNode",TAG_NAME="tagName",ATTRIBUTES="attributes",COMBINATOR="combinator",PSEUDOS="pseudos",SelectorCSS2={_reRegExpTokens:/([\^\$\?\[\]\*\+\-\.\(\)\|\\])/,SORT_RESULTS:true,_children:function(e,a){var b=e.children,d,c=[],f,g;if(e.children&&a&&e.children.tags){c=e.children.tags(a);}else{if((!b&&e[TAG_NAME])||(b&&a)){f=b||e.childNodes;b=[];for(d=0;(g=f[d++]);){if(g.tagName){if(!a||a===g.tagName){b.push(g);}}}}}return b||[];},_re:{attr:/(\[[^\]]*\])/g,esc:/\\[:\[\]\(\)#\.\'\>+~"]/gi,pseudos:/(\([^\)]*\))/g},shorthand:{"\\#(-?[_a-z]+[-\\w\\uE000]*)":"[id=$1]","\\.(-?[_a-z]+[-\\w\\uE000]*)":"[className~=$1]"},operators:{"":function(b,a){return !!b.getAttribute(a);},"~=":"(?:^|\\s+){val}(?:\\s+|$)","|=":"^{val}(?:-|$)"},pseudos:{"first-child":function(a){return Selector._children(a[PARENT_NODE])[0]===a;}},_bruteQuery:function(f,j,l){var g=[],a=[],i=Selector._tokenize(f),e=i[i.length-1],k=Y_getDoc(j),c,b,h,d;if(e){b=e.id;h=e.className;d=e.tagName||"*";if(j.getElementsByTagName){if(b&&(j.all||(j.nodeType===9||Y_DOM_inDoc(j)))){a=Y_DOM_allById(b,j);}else{if(h){a=j.getElementsByClassName(h);}else{a=j.getElementsByTagName(d);}}}else{c=j.firstChild;while(c){if(c.tagName){a.push(c);}c=c.nextSilbing||c.firstChild;}}if(a.length){g=Selector._filterNodes(a,i,l);}}return g;},_filterNodes:function(l,f,h){var r=0,q,s=f.length,k=s-1,e=[],o=l[0],v=o,t=Selector.getters,d,p,c,g,a,m,b,u;for(r=0;(v=o=l[r++]);){k=s-1;g=null;testLoop:while(v&&v.tagName){c=f[k];b=c.tests;q=b.length;if(q&&!a){while((u=b[--q])){d=u[1];if(t[u[0]]){m=t[u[0]](v,u[0]);}else{m=v[u[0]];if(m===undefined&&v.getAttribute){m=v.getAttribute(u[0]);}}if((d==="="&&m!==u[2])||(typeof d!=="string"&&d.test&&!d.test(m))||(!d.test&&typeof d==="function"&&!d(v,u[0],u[2]))){if((v=v[g])){while(v&&(!v.tagName||(c.tagName&&c.tagName!==v.tagName))){v=v[g];}}continue testLoop;}}}k--;if(!a&&(p=c.combinator)){g=p.axis;v=v[g];while(v&&!v.tagName){v=v[g];}if(p.direct){g=null;}}else{e.push(o);if(h){return e;}break;}}}o=v=null;return e;},combinators:{" ":{axis:"parentNode"},">":{axis:"parentNode",direct:true},"+":{axis:"previousSibling",direct:true}},_parsers:[{name:ATTRIBUTES,re:/^\uE003(-?[a-z]+[\w\-]*)+([~\|\^\$\*!=]=?)?['"]?([^\uE004'"]*)['"]?\uE004/i,fn:function(d,e){var c=d[2]||"",a=Selector.operators,b=(d[3])?d[3].replace(/\\/g,""):"",f;if((d[1]==="id"&&c==="=")||(d[1]==="className"&&Y_DOCUMENT_ELEMENT.getElementsByClassName&&(c==="~="||c==="="))){e.prefilter=d[1];d[3]=b;e[d[1]]=(d[1]==="id")?d[3]:b;}if(c in a){f=a[c];if(typeof f==="string"){d[3]=b.replace(Selector._reRegExpTokens,"\\$1");f=new RegExp(f.replace("{val}",d[3]));}d[2]=f;}if(!e.last||e.prefilter!==d[1]){return d.slice(1);}}},{name:TAG_NAME,re:/^((?:-?[_a-z]+[\w-]*)|\*)/i,fn:function(b,c){var a=b[1].toUpperCase();c.tagName=a;if(a!=="*"&&(!c.last||c.prefilter)){return[TAG_NAME,"=",a];}if(!c.prefilter){c.prefilter="tagName";}}},{name:COMBINATOR,re:/^\s*([>+~]|\s)\s*/,fn:function(a,b){}},{name:PSEUDOS,re:/^:([\-\w]+)(?:\uE005['"]?([^\uE005]*)['"]?\uE006)*/i,fn:function(a,b){var c=Selector[PSEUDOS][a[1]];if(c){if(a[2]){a[2]=a[2].replace(/\\/g,"");}return[a[2],c];}else{return false;}}}],_getToken:function(a){return{tagName:null,id:null,className:null,attributes:{},combinator:null,tests:[]};},_tokenize:function(c){c=c||"";c=Selector._replaceShorthand(Y_Lang.trim(c));var b=Selector._getToken(),h=c,g=[],j=false,e,f,d,a;outer:do{j=false;for(d=0;(a=Selector._parsers[d++]);){if((e=a.re.exec(c))){if(a.name!==COMBINATOR){b.selector=c;}c=c.replace(e[0],"");if(!c.length){b.last=true;}if(Selector._attrFilters[e[1]]){e[1]=Selector._attrFilters[e[1]];}f=a.fn(e,b);if(f===false){j=false;break outer;}else{if(f){b.tests.push(f);}}if(!c.length||a.name===COMBINATOR){g.push(b);b=Selector._getToken(b);if(a.name===COMBINATOR){b.combinator=Selector.combinators[e[1]];}}j=true;}}}while(j&&c.length);if(!j||c.length){Y.log("query: "+h+" contains unsupported token in: "+c,"warn","Selector");g=[];}return g;},_replaceShorthand:function(b){var d=Selector.shorthand,c=b.match(Selector._re.esc),e,h,g,f,a;if(c){b=b.replace(Selector._re.esc,"\uE000");}e=b.match(Selector._re.attr);h=b.match(Selector._re.pseudos);if(e){b=b.replace(Selector._re.attr,"\uE001");}if(h){b=b.replace(Selector._re.pseudos,"\uE002");}for(g in d){if(d.hasOwnProperty(g)){b=b.replace(new RegExp(g,"gi"),d[g]);}}if(e){for(f=0,a=e.length;f<a;++f){b=b.replace(/\uE001/,e[f]);}}if(h){for(f=0,a=h.length;f<a;++f){b=b.replace(/\uE002/,h[f]);}}b=b.replace(/\[/g,"\uE003");b=b.replace(/\]/g,"\uE004");b=b.replace(/\(/g,"\uE005");b=b.replace(/\)/g,"\uE006");if(c){for(f=0,a=c.length;f<a;++f){b=b.replace("\uE000",c[f]);}}return b;},_attrFilters:{"class":"className","for":"htmlFor"},getters:{href:function(b,a){return Y_DOM.getAttribute(b,a);}}};Y_mix(Selector,SelectorCSS2,true);Selector.getters.src=Selector.getters.rel=Selector.getters.href;if(Selector.useNative&&Y_DOC.querySelector){Selector.shorthand["\\.([^\\s\\\\(\\[:]*)"]="[class~=$1]";}Selector._reNth=/^(?:([\-]?\d*)(n){1}|(odd|even)$)*([\-+]?\d*)$/;Selector._getNth=function(d,o,q,h){Selector._reNth.test(o);var m=parseInt(RegExp.$1,10),c=RegExp.$2,j=RegExp.$3,k=parseInt(RegExp.$4,10)||0,p=[],l=Selector._children(d.parentNode,q),f;if(j){m=2;f="+";c="n";k=(j==="odd")?1:0;}else{if(isNaN(m)){m=(c)?1:0;
}}if(m===0){if(h){k=l.length-k+1;}if(l[k-1]===d){return true;}else{return false;}}else{if(m<0){h=!!h;m=Math.abs(m);}}if(!h){for(var e=k-1,g=l.length;e<g;e+=m){if(e>=0&&l[e]===d){return true;}}}else{for(var e=l.length-k,g=l.length;e>=0;e-=m){if(e<g&&l[e]===d){return true;}}}return false;};Y_mix(Selector.pseudos,{"root":function(a){return a===a.ownerDocument.documentElement;},"nth-child":function(a,b){return Selector._getNth(a,b);},"nth-last-child":function(a,b){return Selector._getNth(a,b,null,true);},"nth-of-type":function(a,b){return Selector._getNth(a,b,a.tagName);},"nth-last-of-type":function(a,b){return Selector._getNth(a,b,a.tagName,true);},"last-child":function(b){var a=Selector._children(b.parentNode);return a[a.length-1]===b;},"first-of-type":function(a){return Selector._children(a.parentNode,a.tagName)[0]===a;},"last-of-type":function(b){var a=Selector._children(b.parentNode,b.tagName);return a[a.length-1]===b;},"only-child":function(b){var a=Selector._children(b.parentNode);return a.length===1&&a[0]===b;},"only-of-type":function(b){var a=Selector._children(b.parentNode,b.tagName);return a.length===1&&a[0]===b;},"empty":function(a){return a.childNodes.length===0;},"not":function(a,b){return !Selector.test(a,b);},"contains":function(a,b){var c=a.innerText||a.textContent||"";return c.indexOf(b)>-1;},"checked":function(a){return(a.checked===true||a.selected===true);},enabled:function(a){return(a.disabled!==undefined&&!a.disabled);},disabled:function(a){return(a.disabled);}});Y_mix(Selector.operators,{"^=":"^{val}","!=":function(b,a,c){return b[a]!==c;},"$=":"{val}$","*=":"{val}"});Selector.combinators["~"]={axis:"previousSibling"};YAHOO.register("selector",YAHOO.util.Selector,{version:"2.9.0",build:"2800"});var Dom=YAHOO.util.Dom;YAHOO.widget.ColumnSet=function(a){this._sId=Dom.generateId(null,"yui-cs");a=YAHOO.widget.DataTable._cloneObject(a);this._init(a);YAHOO.widget.ColumnSet._nCount++;};YAHOO.widget.ColumnSet._nCount=0;YAHOO.widget.ColumnSet.prototype={_sId:null,_aDefinitions:null,tree:null,flat:null,keys:null,headers:null,_init:function(j){var k=[];var a=[];var g=[];var e=[];var c=-1;var b=function(m,s){c++;if(!k[c]){k[c]=[];}for(var o=0;o<m.length;o++){var i=m[o];var q=new YAHOO.widget.Column(i);i.yuiColumnId=q._sId;a.push(q);if(s){q._oParent=s;}if(YAHOO.lang.isArray(i.children)){q.children=i.children;var r=0;var p=function(v){var w=v.children;for(var u=0;u<w.length;u++){if(YAHOO.lang.isArray(w[u].children)){p(w[u]);}else{r++;}}};p(i);q._nColspan=r;var t=i.children;for(var n=0;n<t.length;n++){var l=t[n];if(q.className&&(l.className===undefined)){l.className=q.className;}if(q.editor&&(l.editor===undefined)){l.editor=q.editor;}if(q.editorOptions&&(l.editorOptions===undefined)){l.editorOptions=q.editorOptions;}if(q.formatter&&(l.formatter===undefined)){l.formatter=q.formatter;}if(q.resizeable&&(l.resizeable===undefined)){l.resizeable=q.resizeable;}if(q.sortable&&(l.sortable===undefined)){l.sortable=q.sortable;}if(q.hidden){l.hidden=true;}if(q.width&&(l.width===undefined)){l.width=q.width;}if(q.minWidth&&(l.minWidth===undefined)){l.minWidth=q.minWidth;}if(q.maxAutoWidth&&(l.maxAutoWidth===undefined)){l.maxAutoWidth=q.maxAutoWidth;}if(q.type&&(l.type===undefined)){l.type=q.type;}if(q.type&&!q.formatter){q.formatter=q.type;}if(q.text&&!YAHOO.lang.isValue(q.label)){q.label=q.text;}if(q.parser){}if(q.sortOptions&&((q.sortOptions.ascFunction)||(q.sortOptions.descFunction))){}}if(!k[c+1]){k[c+1]=[];}b(t,q);}else{q._nKeyIndex=g.length;q._nColspan=1;g.push(q);}k[c].push(q);}c--;};if(YAHOO.lang.isArray(j)){b(j);this._aDefinitions=j;}else{return null;}var f;var d=function(l){var n=1;var q;var o;var r=function(t,p){p=p||1;for(var u=0;u<t.length;u++){var m=t[u];if(YAHOO.lang.isArray(m.children)){p++;r(m.children,p);p--;}else{if(p>n){n=p;}}}};for(var i=0;i<l.length;i++){q=l[i];r(q);for(var s=0;s<q.length;s++){o=q[s];if(!YAHOO.lang.isArray(o.children)){o._nRowspan=n;}else{o._nRowspan=1;}}n=1;}};d(k);for(f=0;f<k[0].length;f++){k[0][f]._nTreeIndex=f;}var h=function(l,m){e[l].push(m.getSanitizedKey());if(m._oParent){h(l,m._oParent);}};for(f=0;f<g.length;f++){e[f]=[];h(f,g[f]);e[f]=e[f].reverse();}this.tree=k;this.flat=a;this.keys=g;this.headers=e;},getId:function(){return this._sId;},toString:function(){return"ColumnSet instance "+this._sId;},getDefinitions:function(){var a=this._aDefinitions;var b=function(e,g){for(var d=0;d<e.length;d++){var f=e[d];var i=g.getColumnById(f.yuiColumnId);if(i){var h=i.getDefinition();for(var c in h){if(YAHOO.lang.hasOwnProperty(h,c)){f[c]=h[c];}}}if(YAHOO.lang.isArray(f.children)){b(f.children,g);}}};b(a,this);this._aDefinitions=a;return a;},getColumnById:function(c){if(YAHOO.lang.isString(c)){var a=this.flat;for(var b=a.length-1;b>-1;b--){if(a[b]._sId===c){return a[b];}}}return null;},getColumn:function(c){if(YAHOO.lang.isNumber(c)&&this.keys[c]){return this.keys[c];}else{if(YAHOO.lang.isString(c)){var a=this.flat;var d=[];for(var b=0;b<a.length;b++){if(a[b].key===c){d.push(a[b]);}}if(d.length===1){return d[0];}else{if(d.length>1){return d;}}}}return null;},getDescendants:function(d){var b=this;var c=[];var a;var e=function(f){c.push(f);if(f.children){for(a=0;a<f.children.length;a++){e(b.getColumn(f.children[a].key));}}};e(d);return c;}};YAHOO.widget.Column=function(b){this._sId=Dom.generateId(null,"yui-col");if(b&&YAHOO.lang.isObject(b)){for(var a in b){if(a){this[a]=b[a];}}}if(!YAHOO.lang.isValue(this.key)){this.key=Dom.generateId(null,"yui-dt-col");}if(!YAHOO.lang.isValue(this.field)){this.field=this.key;}YAHOO.widget.Column._nCount++;if(this.width&&!YAHOO.lang.isNumber(this.width)){this.width=null;}if(this.editor&&YAHOO.lang.isString(this.editor)){this.editor=new YAHOO.widget.CellEditor(this.editor,this.editorOptions);}};YAHOO.lang.augmentObject(YAHOO.widget.Column,{_nCount:0,formatCheckbox:function(b,a,c,d){YAHOO.widget.DataTable.formatCheckbox(b,a,c,d);},formatCurrency:function(b,a,c,d){YAHOO.widget.DataTable.formatCurrency(b,a,c,d);},formatDate:function(b,a,c,d){YAHOO.widget.DataTable.formatDate(b,a,c,d);
},formatEmail:function(b,a,c,d){YAHOO.widget.DataTable.formatEmail(b,a,c,d);},formatLink:function(b,a,c,d){YAHOO.widget.DataTable.formatLink(b,a,c,d);},formatNumber:function(b,a,c,d){YAHOO.widget.DataTable.formatNumber(b,a,c,d);},formatSelect:function(b,a,c,d){YAHOO.widget.DataTable.formatDropdown(b,a,c,d);}});YAHOO.widget.Column.prototype={_sId:null,_nKeyIndex:null,_nTreeIndex:null,_nColspan:1,_nRowspan:1,_oParent:null,_elTh:null,_elThLiner:null,_elThLabel:null,_elResizer:null,_nWidth:null,_dd:null,_ddResizer:null,key:null,field:null,label:null,abbr:null,children:null,width:null,minWidth:null,maxAutoWidth:null,hidden:false,selected:false,className:null,formatter:null,currencyOptions:null,dateOptions:null,dropdownOptions:null,editor:null,resizeable:false,sortable:false,sortOptions:null,getId:function(){return this._sId;},toString:function(){return"Column instance "+this._sId;},getDefinition:function(){var a={};a.abbr=this.abbr;a.className=this.className;a.editor=this.editor;a.editorOptions=this.editorOptions;a.field=this.field;a.formatter=this.formatter;a.hidden=this.hidden;a.key=this.key;a.label=this.label;a.minWidth=this.minWidth;a.maxAutoWidth=this.maxAutoWidth;a.resizeable=this.resizeable;a.selected=this.selected;a.sortable=this.sortable;a.sortOptions=this.sortOptions;a.width=this.width;a._calculatedWidth=this._calculatedWidth;return a;},getKey:function(){return this.key;},getField:function(){return this.field;},getSanitizedKey:function(){return this.getKey().replace(/[^\w\-]/g,"");},getKeyIndex:function(){return this._nKeyIndex;},getTreeIndex:function(){return this._nTreeIndex;},getParent:function(){return this._oParent;},getColspan:function(){return this._nColspan;},getColSpan:function(){return this.getColspan();},getRowspan:function(){return this._nRowspan;},getThEl:function(){return this._elTh;},getThLinerEl:function(){return this._elThLiner;},getResizerEl:function(){return this._elResizer;},getColEl:function(){return this.getThEl();},getIndex:function(){return this.getKeyIndex();},format:function(){}};YAHOO.util.Sort={compare:function(d,c,e){if((d===null)||(typeof d=="undefined")){if((c===null)||(typeof c=="undefined")){return 0;}else{return 1;}}else{if((c===null)||(typeof c=="undefined")){return -1;}}if(d.constructor==String){d=d.toLowerCase();}if(c.constructor==String){c=c.toLowerCase();}if(d<c){return(e)?1:-1;}else{if(d>c){return(e)?-1:1;}else{return 0;}}}};YAHOO.widget.ColumnDD=function(d,a,c,b){if(d&&a&&c&&b){this.datatable=d;this.table=d.getTableEl();this.column=a;this.headCell=c;this.pointer=b;this.newIndex=null;this.init(c);this.initFrame();this.invalidHandleTypes={};this.setPadding(10,0,(this.datatable.getTheadEl().offsetHeight+10),0);YAHOO.util.Event.on(window,"resize",function(){this.initConstraints();},this,true);}else{}};if(YAHOO.util.DDProxy){YAHOO.extend(YAHOO.widget.ColumnDD,YAHOO.util.DDProxy,{initConstraints:function(){var g=YAHOO.util.Dom.getRegion(this.table),d=this.getEl(),f=YAHOO.util.Dom.getXY(d),c=parseInt(YAHOO.util.Dom.getStyle(d,"width"),10),a=parseInt(YAHOO.util.Dom.getStyle(d,"height"),10),e=((f[0]-g.left)+15),b=((g.right-f[0]-c)+15);this.setXConstraint(e,b);this.setYConstraint(10,10);},_resizeProxy:function(){YAHOO.widget.ColumnDD.superclass._resizeProxy.apply(this,arguments);var a=this.getDragEl(),b=this.getEl();YAHOO.util.Dom.setStyle(this.pointer,"height",(this.table.parentNode.offsetHeight+10)+"px");YAHOO.util.Dom.setStyle(this.pointer,"display","block");var c=YAHOO.util.Dom.getXY(b);YAHOO.util.Dom.setXY(this.pointer,[c[0],(c[1]-5)]);YAHOO.util.Dom.setStyle(a,"height",this.datatable.getContainerEl().offsetHeight+"px");YAHOO.util.Dom.setStyle(a,"width",(parseInt(YAHOO.util.Dom.getStyle(a,"width"),10)+4)+"px");YAHOO.util.Dom.setXY(this.dragEl,c);},onMouseDown:function(){this.initConstraints();this.resetConstraints();},clickValidator:function(b){if(!this.column.hidden){var a=YAHOO.util.Event.getTarget(b);return(this.isValidHandleChild(a)&&(this.id==this.handleElId||this.DDM.handleWasClicked(a,this.id)));}},onDragOver:function(h,a){var f=this.datatable.getColumn(a);if(f){var c=f.getTreeIndex();while((c===null)&&f.getParent()){f=f.getParent();c=f.getTreeIndex();}if(c!==null){var b=f.getThEl();var k=c;var d=YAHOO.util.Event.getPageX(h),i=YAHOO.util.Dom.getX(b),j=i+((YAHOO.util.Dom.get(b).offsetWidth)/2),e=this.column.getTreeIndex();if(d<j){YAHOO.util.Dom.setX(this.pointer,i);}else{var g=parseInt(b.offsetWidth,10);YAHOO.util.Dom.setX(this.pointer,(i+g));k++;}if(c>e){k--;}if(k<0){k=0;}else{if(k>this.datatable.getColumnSet().tree[0].length){k=this.datatable.getColumnSet().tree[0].length;}}this.newIndex=k;}}},onDragDrop:function(){this.datatable.reorderColumn(this.column,this.newIndex);},endDrag:function(){this.newIndex=null;YAHOO.util.Dom.setStyle(this.pointer,"display","none");}});}YAHOO.util.ColumnResizer=function(e,c,d,a,b){if(e&&c&&d&&a){this.datatable=e;this.column=c;this.headCell=d;this.headCellLiner=c.getThLinerEl();this.resizerLiner=d.firstChild;this.init(a,a,{dragOnly:true,dragElId:b.id});this.initFrame();this.resetResizerEl();this.setPadding(0,1,0,0);}else{}};if(YAHOO.util.DD){YAHOO.extend(YAHOO.util.ColumnResizer,YAHOO.util.DDProxy,{resetResizerEl:function(){var a=YAHOO.util.Dom.get(this.handleElId).style;a.left="auto";a.right=0;a.top="auto";a.bottom=0;a.height=this.headCell.offsetHeight+"px";},onMouseUp:function(h){var f=this.datatable.getColumnSet().keys,b;for(var c=0,a=f.length;c<a;c++){b=f[c];if(b._ddResizer){b._ddResizer.resetResizerEl();}}this.resetResizerEl();var d=this.headCellLiner;var g=d.offsetWidth-(parseInt(YAHOO.util.Dom.getStyle(d,"paddingLeft"),10)|0)-(parseInt(YAHOO.util.Dom.getStyle(d,"paddingRight"),10)|0);this.datatable.fireEvent("columnResizeEvent",{column:this.column,target:this.headCell,width:g});},onMouseDown:function(a){this.startWidth=this.headCellLiner.offsetWidth;this.startX=YAHOO.util.Event.getXY(a)[0];this.nLinerPadding=(parseInt(YAHOO.util.Dom.getStyle(this.headCellLiner,"paddingLeft"),10)|0)+(parseInt(YAHOO.util.Dom.getStyle(this.headCellLiner,"paddingRight"),10)|0);
},clickValidator:function(b){if(!this.column.hidden){var a=YAHOO.util.Event.getTarget(b);return(this.isValidHandleChild(a)&&(this.id==this.handleElId||this.DDM.handleWasClicked(a,this.id)));}},startDrag:function(){var e=this.datatable.getColumnSet().keys,d=this.column.getKeyIndex(),b;for(var c=0,a=e.length;c<a;c++){b=e[c];if(b._ddResizer){YAHOO.util.Dom.get(b._ddResizer.handleElId).style.height="1em";}}},onDrag:function(c){var d=YAHOO.util.Event.getXY(c)[0];if(d>YAHOO.util.Dom.getX(this.headCellLiner)){var a=d-this.startX;var b=this.startWidth+a-this.nLinerPadding;if(b>0){this.datatable.setColumnWidth(this.column,b);}}}});}(function(){var g=YAHOO.lang,a=YAHOO.util,e=YAHOO.widget,c=a.Dom,f=a.Event,d=e.DataTable;YAHOO.widget.RecordSet=function(h){this._init(h);};var b=e.RecordSet;b._nCount=0;b.prototype={_sId:null,_init:function(h){this._sId=c.generateId(null,"yui-rs");e.RecordSet._nCount++;this._records=[];this._initEvents();if(h){if(g.isArray(h)){this.addRecords(h);}else{if(g.isObject(h)){this.addRecord(h);}}}},_initEvents:function(){this.createEvent("recordAddEvent");this.createEvent("recordsAddEvent");this.createEvent("recordSetEvent");this.createEvent("recordsSetEvent");this.createEvent("recordUpdateEvent");this.createEvent("recordDeleteEvent");this.createEvent("recordsDeleteEvent");this.createEvent("resetEvent");this.createEvent("recordValueUpdateEvent");},_addRecord:function(j,h){var i=new YAHOO.widget.Record(j);if(YAHOO.lang.isNumber(h)&&(h>-1)){this._records.splice(h,0,i);}else{this._records[this._records.length]=i;}return i;},_setRecord:function(i,h){if(!g.isNumber(h)||h<0){h=this._records.length;}return(this._records[h]=new e.Record(i));},_deleteRecord:function(i,h){if(!g.isNumber(h)||(h<0)){h=1;}this._records.splice(i,h);},getId:function(){return this._sId;},toString:function(){return"RecordSet instance "+this._sId;},getLength:function(){return this._records.length;},getRecord:function(h){var j;if(h instanceof e.Record){for(j=0;j<this._records.length;j++){if(this._records[j]&&(this._records[j]._sId===h._sId)){return h;}}}else{if(g.isNumber(h)){if((h>-1)&&(h<this.getLength())){return this._records[h];}}else{if(g.isString(h)){for(j=0;j<this._records.length;j++){if(this._records[j]&&(this._records[j]._sId===h)){return this._records[j];}}}}}return null;},getRecords:function(i,h){if(!g.isNumber(i)){return this._records;}if(!g.isNumber(h)){return this._records.slice(i);}return this._records.slice(i,i+h);},hasRecords:function(j,h){var l=this.getRecords(j,h);for(var k=0;k<h;++k){if(typeof l[k]==="undefined"){return false;}}return true;},getRecordIndex:function(j){if(j){for(var h=this._records.length-1;h>-1;h--){if(this._records[h]&&j.getId()===this._records[h].getId()){return h;}}}return null;},addRecord:function(j,h){if(g.isObject(j)){var i=this._addRecord(j,h);this.fireEvent("recordAddEvent",{record:i,data:j});return i;}else{return null;}},addRecords:function(m,l){if(g.isArray(m)){var p=[],j,n,h;l=g.isNumber(l)?l:this._records.length;j=l;for(n=0,h=m.length;n<h;++n){if(g.isObject(m[n])){var k=this._addRecord(m[n],j++);p.push(k);}}this.fireEvent("recordsAddEvent",{records:p,data:m});return p;}else{if(g.isObject(m)){var o=this._addRecord(m);this.fireEvent("recordsAddEvent",{records:[o],data:m});return o;}else{return null;}}},setRecord:function(j,h){if(g.isObject(j)){var i=this._setRecord(j,h);this.fireEvent("recordSetEvent",{record:i,data:j});return i;}else{return null;}},setRecords:function(o,n){var r=e.Record,k=g.isArray(o)?o:[o],q=[],p=0,h=k.length,m=0;n=parseInt(n,10)|0;for(;p<h;++p){if(typeof k[p]==="object"&&k[p]){q[m++]=this._records[n+p]=new r(k[p]);}}this.fireEvent("recordsSetEvent",{records:q,data:o});this.fireEvent("recordsSet",{records:q,data:o});if(k.length&&!q.length){}return q;},updateRecord:function(h,l){var j=this.getRecord(h);if(j&&g.isObject(l)){var k={};for(var i in j._oData){if(g.hasOwnProperty(j._oData,i)){k[i]=j._oData[i];}}j._oData=l;this.fireEvent("recordUpdateEvent",{record:j,newData:l,oldData:k});return j;}else{return null;}},updateKey:function(h,i,j){this.updateRecordValue(h,i,j);},updateRecordValue:function(h,k,n){var j=this.getRecord(h);if(j){var m=null;var l=j._oData[k];if(l&&g.isObject(l)){m={};for(var i in l){if(g.hasOwnProperty(l,i)){m[i]=l[i];}}}else{m=l;}j._oData[k]=n;this.fireEvent("keyUpdateEvent",{record:j,key:k,newData:n,oldData:m});this.fireEvent("recordValueUpdateEvent",{record:j,key:k,newData:n,oldData:m});}else{}},replaceRecords:function(h){this.reset();return this.addRecords(h);},sortRecords:function(h,j,i){return this._records.sort(function(l,k){return h(l,k,j,i);});},reverseRecords:function(){return this._records.reverse();},deleteRecord:function(h){if(g.isNumber(h)&&(h>-1)&&(h<this.getLength())){var i=this.getRecord(h).getData();this._deleteRecord(h);this.fireEvent("recordDeleteEvent",{data:i,index:h});return i;}else{return null;}},deleteRecords:function(k,h){if(!g.isNumber(h)){h=1;}if(g.isNumber(k)&&(k>-1)&&(k<this.getLength())){var m=this.getRecords(k,h);var j=[],n=[];for(var l=0;l<m.length;l++){j[j.length]=m[l];n[n.length]=m[l].getData();}this._deleteRecord(k,h);this.fireEvent("recordsDeleteEvent",{data:j,deletedData:n,index:k});return j;}else{return null;}},reset:function(){this._records=[];this.fireEvent("resetEvent");}};g.augmentProto(b,a.EventProvider);YAHOO.widget.Record=function(h){this._nCount=e.Record._nCount;this._sId=c.generateId(null,"yui-rec");e.Record._nCount++;this._oData={};if(g.isObject(h)){for(var i in h){if(g.hasOwnProperty(h,i)){this._oData[i]=h[i];}}}};YAHOO.widget.Record._nCount=0;YAHOO.widget.Record.prototype={_nCount:null,_sId:null,_oData:null,getCount:function(){return this._nCount;},getId:function(){return this._sId;},getData:function(h){if(g.isString(h)){return this._oData[h];}else{return this._oData;}},setData:function(h,i){this._oData[h]=i;}};})();(function(){var h=YAHOO.lang,a=YAHOO.util,e=YAHOO.widget,b=YAHOO.env.ua,c=a.Dom,g=a.Event,f=a.DataSourceBase;YAHOO.widget.DataTable=function(i,m,o,k){var l=e.DataTable;
if(k&&k.scrollable){return new YAHOO.widget.ScrollingDataTable(i,m,o,k);}this._nIndex=l._nCount;this._sId=c.generateId(null,"yui-dt");this._oChainRender=new YAHOO.util.Chain();this._oChainRender.subscribe("end",this._onRenderChainEnd,this,true);this._initConfigs(k);this._initDataSource(o);if(!this._oDataSource){return;}this._initColumnSet(m);if(!this._oColumnSet){return;}this._initRecordSet();if(!this._oRecordSet){}l.superclass.constructor.call(this,i,this.configs);var q=this._initDomElements(i);if(!q){return;}this.showTableMessage(this.get("MSG_LOADING"),l.CLASS_LOADING);this._initEvents();l._nCount++;l._nCurrentCount++;var n={success:this.onDataReturnSetRows,failure:this.onDataReturnSetRows,scope:this,argument:this.getState()};var p=this.get("initialLoad");if(p===true){this._oDataSource.sendRequest(this.get("initialRequest"),n);}else{if(p===false){this.showTableMessage(this.get("MSG_EMPTY"),l.CLASS_EMPTY);}else{var j=p||{};n.argument=j.argument||{};this._oDataSource.sendRequest(j.request,n);}}};var d=e.DataTable;h.augmentObject(d,{CLASS_DATATABLE:"yui-dt",CLASS_LINER:"yui-dt-liner",CLASS_LABEL:"yui-dt-label",CLASS_MESSAGE:"yui-dt-message",CLASS_MASK:"yui-dt-mask",CLASS_DATA:"yui-dt-data",CLASS_COLTARGET:"yui-dt-coltarget",CLASS_RESIZER:"yui-dt-resizer",CLASS_RESIZERLINER:"yui-dt-resizerliner",CLASS_RESIZERPROXY:"yui-dt-resizerproxy",CLASS_EDITOR:"yui-dt-editor",CLASS_EDITOR_SHIM:"yui-dt-editor-shim",CLASS_PAGINATOR:"yui-dt-paginator",CLASS_PAGE:"yui-dt-page",CLASS_DEFAULT:"yui-dt-default",CLASS_PREVIOUS:"yui-dt-previous",CLASS_NEXT:"yui-dt-next",CLASS_FIRST:"yui-dt-first",CLASS_LAST:"yui-dt-last",CLASS_REC:"yui-dt-rec",CLASS_EVEN:"yui-dt-even",CLASS_ODD:"yui-dt-odd",CLASS_SELECTED:"yui-dt-selected",CLASS_HIGHLIGHTED:"yui-dt-highlighted",CLASS_HIDDEN:"yui-dt-hidden",CLASS_DISABLED:"yui-dt-disabled",CLASS_EMPTY:"yui-dt-empty",CLASS_LOADING:"yui-dt-loading",CLASS_ERROR:"yui-dt-error",CLASS_EDITABLE:"yui-dt-editable",CLASS_DRAGGABLE:"yui-dt-draggable",CLASS_RESIZEABLE:"yui-dt-resizeable",CLASS_SCROLLABLE:"yui-dt-scrollable",CLASS_SORTABLE:"yui-dt-sortable",CLASS_ASC:"yui-dt-asc",CLASS_DESC:"yui-dt-desc",CLASS_BUTTON:"yui-dt-button",CLASS_CHECKBOX:"yui-dt-checkbox",CLASS_DROPDOWN:"yui-dt-dropdown",CLASS_RADIO:"yui-dt-radio",_nCount:0,_nCurrentCount:0,_elDynStyleNode:null,_bDynStylesFallback:(b.ie)?true:false,_oDynStyles:{},_cloneObject:function(m){if(!h.isValue(m)){return m;}var p={};if(m instanceof YAHOO.widget.BaseCellEditor){p=m;}else{if(Object.prototype.toString.apply(m)==="[object RegExp]"){p=m;}else{if(h.isFunction(m)){p=m;}else{if(h.isArray(m)){var n=[];for(var l=0,k=m.length;l<k;l++){n[l]=d._cloneObject(m[l]);}p=n;}else{if(h.isObject(m)){for(var j in m){if(h.hasOwnProperty(m,j)){if(h.isValue(m[j])&&h.isObject(m[j])||h.isArray(m[j])){p[j]=d._cloneObject(m[j]);}else{p[j]=m[j];}}}}else{p=m;}}}}}return p;},formatButton:function(i,j,k,n,m){var l=h.isValue(n)?n:"Click";i.innerHTML='<button type="button" class="'+d.CLASS_BUTTON+'">'+l+"</button>";},formatCheckbox:function(i,j,k,n,m){var l=n;l=(l)?' checked="checked"':"";i.innerHTML='<input type="checkbox"'+l+' class="'+d.CLASS_CHECKBOX+'" />';},formatCurrency:function(j,k,l,n,m){var i=m||this;j.innerHTML=a.Number.format(n,l.currencyOptions||i.get("currencyOptions"));},formatDate:function(j,l,m,o,n){var i=n||this,k=m.dateOptions||i.get("dateOptions");j.innerHTML=a.Date.format(o,k,k.locale);},formatDropdown:function(l,u,q,j,t){var s=t||this,r=(h.isValue(j))?j:u.getData(q.field),v=(h.isArray(q.dropdownOptions))?q.dropdownOptions:null,k,p=l.getElementsByTagName("select");if(p.length===0){k=document.createElement("select");k.className=d.CLASS_DROPDOWN;k=l.appendChild(k);g.addListener(k,"change",s._onDropdownChange,s);}k=p[0];if(k){k.innerHTML="";if(v){for(var n=0;n<v.length;n++){var o=v[n];var m=document.createElement("option");m.value=(h.isValue(o.value))?o.value:o;m.innerHTML=(h.isValue(o.text))?o.text:(h.isValue(o.label))?o.label:o;m=k.appendChild(m);if(m.value==r){m.selected=true;}}}else{k.innerHTML='<option selected value="'+r+'">'+r+"</option>";}}else{l.innerHTML=h.isValue(j)?j:"";}},formatEmail:function(i,j,k,m,l){if(h.isString(m)){m=h.escapeHTML(m);i.innerHTML='<a href="mailto:'+m+'">'+m+"</a>";}else{i.innerHTML=h.isValue(m)?h.escapeHTML(m.toString()):"";}},formatLink:function(i,j,k,m,l){if(h.isString(m)){m=h.escapeHTML(m);i.innerHTML='<a href="'+m+'">'+m+"</a>";}else{i.innerHTML=h.isValue(m)?h.escapeHTML(m.toString()):"";}},formatNumber:function(j,k,l,n,m){var i=m||this;j.innerHTML=a.Number.format(n,l.numberOptions||i.get("numberOptions"));},formatRadio:function(j,k,l,o,n){var i=n||this,m=o;m=(m)?' checked="checked"':"";j.innerHTML='<input type="radio"'+m+' name="'+i.getId()+"-col-"+l.getSanitizedKey()+'"'+' class="'+d.CLASS_RADIO+'" />';},formatText:function(i,j,l,n,m){var k=(h.isValue(n))?n:"";i.innerHTML=h.escapeHTML(k.toString());},formatTextarea:function(j,k,m,o,n){var l=(h.isValue(o))?h.escapeHTML(o.toString()):"",i="<textarea>"+l+"</textarea>";j.innerHTML=i;},formatTextbox:function(j,k,m,o,n){var l=(h.isValue(o))?h.escapeHTML(o.toString()):"",i='<input type="text" value="'+l+'" />';j.innerHTML=i;},formatDefault:function(i,j,k,m,l){i.innerHTML=(h.isValue(m)&&m!=="")?m.toString():"&#160;";},validateNumber:function(j){var i=j*1;if(h.isNumber(i)){return i;}else{return undefined;}}});d.Formatter={button:d.formatButton,checkbox:d.formatCheckbox,currency:d.formatCurrency,"date":d.formatDate,dropdown:d.formatDropdown,email:d.formatEmail,link:d.formatLink,"number":d.formatNumber,radio:d.formatRadio,text:d.formatText,textarea:d.formatTextarea,textbox:d.formatTextbox,defaultFormatter:d.formatDefault};h.extend(d,a.Element,{initAttributes:function(i){i=i||{};d.superclass.initAttributes.call(this,i);this.setAttributeConfig("summary",{value:"",validator:h.isString,method:function(j){if(this._elTable){this._elTable.summary=j;}}});this.setAttributeConfig("selectionMode",{value:"standard",validator:h.isString});this.setAttributeConfig("sortedBy",{value:null,validator:function(j){if(j){return(h.isObject(j)&&j.key);
}else{return(j===null);}},method:function(k){var r=this.get("sortedBy");this._configs.sortedBy.value=k;var j,o,m,q;if(this._elThead){if(r&&r.key&&r.dir){j=this._oColumnSet.getColumn(r.key);o=j.getKeyIndex();var u=j.getThEl();c.removeClass(u,r.dir);this.formatTheadCell(j.getThLinerEl().firstChild,j,k);}if(k){m=(k.column)?k.column:this._oColumnSet.getColumn(k.key);q=m.getKeyIndex();var v=m.getThEl();if(k.dir&&((k.dir=="asc")||(k.dir=="desc"))){var p=(k.dir=="desc")?d.CLASS_DESC:d.CLASS_ASC;c.addClass(v,p);}else{var l=k.dir||d.CLASS_ASC;c.addClass(v,l);}this.formatTheadCell(m.getThLinerEl().firstChild,m,k);}}if(this._elTbody){this._elTbody.style.display="none";var s=this._elTbody.rows,t;for(var n=s.length-1;n>-1;n--){t=s[n].childNodes;if(t[o]){c.removeClass(t[o],r.dir);}if(t[q]){c.addClass(t[q],k.dir);}}this._elTbody.style.display="";}this._clearTrTemplateEl();}});this.setAttributeConfig("paginator",{value:null,validator:function(j){return j===null||j instanceof e.Paginator;},method:function(){this._updatePaginator.apply(this,arguments);}});this.setAttributeConfig("caption",{value:null,validator:h.isString,method:function(j){this._initCaptionEl(j);}});this.setAttributeConfig("draggableColumns",{value:false,validator:h.isBoolean,method:function(j){if(this._elThead){if(j){this._initDraggableColumns();}else{this._destroyDraggableColumns();}}}});this.setAttributeConfig("renderLoopSize",{value:0,validator:h.isNumber});this.setAttributeConfig("sortFunction",{value:function(k,j,o,n){var m=YAHOO.util.Sort.compare,l=m(k.getData(n),j.getData(n),o);if(l===0){return m(k.getCount(),j.getCount(),o);}else{return l;}}});this.setAttributeConfig("formatRow",{value:null,validator:h.isFunction});this.setAttributeConfig("generateRequest",{value:function(k,n){k=k||{pagination:null,sortedBy:null};var m=encodeURIComponent((k.sortedBy)?k.sortedBy.key:n.getColumnSet().keys[0].getKey());var j=(k.sortedBy&&k.sortedBy.dir===YAHOO.widget.DataTable.CLASS_DESC)?"desc":"asc";var o=(k.pagination)?k.pagination.recordOffset:0;var l=(k.pagination)?k.pagination.rowsPerPage:null;return"sort="+m+"&dir="+j+"&startIndex="+o+((l!==null)?"&results="+l:"");},validator:h.isFunction});this.setAttributeConfig("initialRequest",{value:null});this.setAttributeConfig("initialLoad",{value:true});this.setAttributeConfig("dynamicData",{value:false,validator:h.isBoolean});this.setAttributeConfig("MSG_EMPTY",{value:"No records found.",validator:h.isString});this.setAttributeConfig("MSG_LOADING",{value:"Loading...",validator:h.isString});this.setAttributeConfig("MSG_ERROR",{value:"Data error.",validator:h.isString});this.setAttributeConfig("MSG_SORTASC",{value:"Click to sort ascending",validator:h.isString,method:function(k){if(this._elThead){for(var l=0,m=this.getColumnSet().keys,j=m.length;l<j;l++){if(m[l].sortable&&this.getColumnSortDir(m[l])===d.CLASS_ASC){m[l]._elThLabel.firstChild.title=k;}}}}});this.setAttributeConfig("MSG_SORTDESC",{value:"Click to sort descending",validator:h.isString,method:function(k){if(this._elThead){for(var l=0,m=this.getColumnSet().keys,j=m.length;l<j;l++){if(m[l].sortable&&this.getColumnSortDir(m[l])===d.CLASS_DESC){m[l]._elThLabel.firstChild.title=k;}}}}});this.setAttributeConfig("currencySymbol",{value:"$",validator:h.isString});this.setAttributeConfig("currencyOptions",{value:{prefix:this.get("currencySymbol"),decimalPlaces:2,decimalSeparator:".",thousandsSeparator:","}});this.setAttributeConfig("dateOptions",{value:{format:"%m/%d/%Y",locale:"en"}});this.setAttributeConfig("numberOptions",{value:{decimalPlaces:0,thousandsSeparator:","}});},_bInit:true,_nIndex:null,_nTrCount:0,_nTdCount:0,_sId:null,_oChainRender:null,_elContainer:null,_elMask:null,_elTable:null,_elCaption:null,_elColgroup:null,_elThead:null,_elTbody:null,_elMsgTbody:null,_elMsgTr:null,_elMsgTd:null,_elColumnDragTarget:null,_elColumnResizerProxy:null,_oDataSource:null,_oColumnSet:null,_oRecordSet:null,_oCellEditor:null,_sFirstTrId:null,_sLastTrId:null,_elTrTemplate:null,_aDynFunctions:[],_disabled:false,clearTextSelection:function(){var i;if(window.getSelection){i=window.getSelection();}else{if(document.getSelection){i=document.getSelection();}else{if(document.selection){i=document.selection;}}}if(i){if(i.empty){i.empty();}else{if(i.removeAllRanges){i.removeAllRanges();}else{if(i.collapse){i.collapse();}}}}},_focusEl:function(i){i=i||this._elTbody;setTimeout(function(){try{i.focus();}catch(j){}},0);},_repaintGecko:(b.gecko)?function(j){j=j||this._elContainer;var i=j.parentNode;var k=j.nextSibling;i.insertBefore(i.removeChild(j),k);}:function(){},_repaintOpera:(b.opera)?function(){if(b.opera){document.documentElement.className+=" ";document.documentElement.className=YAHOO.lang.trim(document.documentElement.className);}}:function(){},_repaintWebkit:(b.webkit)?function(j){j=j||this._elContainer;var i=j.parentNode;var k=j.nextSibling;i.insertBefore(i.removeChild(j),k);}:function(){},_initConfigs:function(i){if(!i||!h.isObject(i)){i={};}this.configs=i;},_initColumnSet:function(n){var m,k,j;if(this._oColumnSet){for(k=0,j=this._oColumnSet.keys.length;k<j;k++){m=this._oColumnSet.keys[k];d._oDynStyles["."+this.getId()+"-col-"+m.getSanitizedKey()+" ."+d.CLASS_LINER]=undefined;if(m.editor&&m.editor.unsubscribeAll){m.editor.unsubscribeAll();}}this._oColumnSet=null;this._clearTrTemplateEl();}if(h.isArray(n)){this._oColumnSet=new YAHOO.widget.ColumnSet(n);}else{if(n instanceof YAHOO.widget.ColumnSet){this._oColumnSet=n;}}var l=this._oColumnSet.keys;for(k=0,j=l.length;k<j;k++){m=l[k];if(m.editor&&m.editor.subscribe){m.editor.subscribe("showEvent",this._onEditorShowEvent,this,true);m.editor.subscribe("keydownEvent",this._onEditorKeydownEvent,this,true);m.editor.subscribe("revertEvent",this._onEditorRevertEvent,this,true);m.editor.subscribe("saveEvent",this._onEditorSaveEvent,this,true);m.editor.subscribe("cancelEvent",this._onEditorCancelEvent,this,true);m.editor.subscribe("blurEvent",this._onEditorBlurEvent,this,true);m.editor.subscribe("blockEvent",this._onEditorBlockEvent,this,true);
m.editor.subscribe("unblockEvent",this._onEditorUnblockEvent,this,true);}}},_initDataSource:function(j){this._oDataSource=null;if(j&&(h.isFunction(j.sendRequest))){this._oDataSource=j;}else{var k=null;var o=this._elContainer;var l=0;if(o.hasChildNodes()){var n=o.childNodes;for(l=0;l<n.length;l++){if(n[l].nodeName&&n[l].nodeName.toLowerCase()=="table"){k=n[l];break;}}if(k){var m=[];for(;l<this._oColumnSet.keys.length;l++){m.push({key:this._oColumnSet.keys[l].key});}this._oDataSource=new f(k);this._oDataSource.responseType=f.TYPE_HTMLTABLE;this._oDataSource.responseSchema={fields:m};}}}},_initRecordSet:function(){if(this._oRecordSet){this._oRecordSet.reset();}else{this._oRecordSet=new YAHOO.widget.RecordSet();}},_initDomElements:function(i){this._initContainerEl(i);this._initTableEl(this._elContainer);this._initColgroupEl(this._elTable);this._initTheadEl(this._elTable);this._initMsgTbodyEl(this._elTable);this._initTbodyEl(this._elTable);if(!this._elContainer||!this._elTable||!this._elColgroup||!this._elThead||!this._elTbody||!this._elMsgTbody){return false;}else{return true;}},_destroyContainerEl:function(m){var k=this._oColumnSet.keys,l,j;c.removeClass(m,d.CLASS_DATATABLE);g.purgeElement(m);g.purgeElement(this._elThead,true);g.purgeElement(this._elTbody);g.purgeElement(this._elMsgTbody);l=m.getElementsByTagName("select");if(l.length){g.detachListener(l,"change");}for(j=k.length-1;j>=0;--j){if(k[j].editor){g.purgeElement(k[j].editor._elContainer);}}m.innerHTML="";this._elContainer=null;this._elColgroup=null;this._elThead=null;this._elTbody=null;},_initContainerEl:function(j){j=c.get(j);if(j&&j.nodeName&&(j.nodeName.toLowerCase()=="div")){this._destroyContainerEl(j);c.addClass(j,d.CLASS_DATATABLE);g.addListener(j,"focus",this._onTableFocus,this);g.addListener(j,"dblclick",this._onTableDblclick,this);this._elContainer=j;var i=document.createElement("div");i.className=d.CLASS_MASK;i.style.display="none";this._elMask=j.appendChild(i);}},_destroyTableEl:function(){var i=this._elTable;if(i){g.purgeElement(i,true);i.parentNode.removeChild(i);this._elCaption=null;this._elColgroup=null;this._elThead=null;this._elTbody=null;}},_initCaptionEl:function(i){if(this._elTable&&i){if(!this._elCaption){this._elCaption=this._elTable.createCaption();}this._elCaption.innerHTML=i;}else{if(this._elCaption){this._elCaption.parentNode.removeChild(this._elCaption);}}},_initTableEl:function(i){if(i){this._destroyTableEl();this._elTable=i.appendChild(document.createElement("table"));this._elTable.summary=this.get("summary");if(this.get("caption")){this._initCaptionEl(this.get("caption"));}g.delegate(this._elTable,"mouseenter",this._onTableMouseover,"thead ."+d.CLASS_LABEL,this);g.delegate(this._elTable,"mouseleave",this._onTableMouseout,"thead ."+d.CLASS_LABEL,this);g.delegate(this._elTable,"mouseenter",this._onTableMouseover,"tbody.yui-dt-data>tr>td",this);g.delegate(this._elTable,"mouseleave",this._onTableMouseout,"tbody.yui-dt-data>tr>td",this);g.delegate(this._elTable,"mouseenter",this._onTableMouseover,"tbody.yui-dt-message>tr>td",this);g.delegate(this._elTable,"mouseleave",this._onTableMouseout,"tbody.yui-dt-message>tr>td",this);}},_destroyColgroupEl:function(){var i=this._elColgroup;if(i){var j=i.parentNode;g.purgeElement(i,true);j.removeChild(i);this._elColgroup=null;}},_initColgroupEl:function(s){if(s){this._destroyColgroupEl();var l=this._aColIds||[],r=this._oColumnSet.keys,m=0,p=l.length,j,o,q=document.createDocumentFragment(),n=document.createElement("col");for(m=0,p=r.length;m<p;m++){o=r[m];j=q.appendChild(n.cloneNode(false));}var k=s.insertBefore(document.createElement("colgroup"),s.firstChild);k.appendChild(q);this._elColgroup=k;}},_insertColgroupColEl:function(i){if(h.isNumber(i)&&this._elColgroup){var j=this._elColgroup.childNodes[i]||null;this._elColgroup.insertBefore(document.createElement("col"),j);}},_removeColgroupColEl:function(i){if(h.isNumber(i)&&this._elColgroup&&this._elColgroup.childNodes[i]){this._elColgroup.removeChild(this._elColgroup.childNodes[i]);}},_reorderColgroupColEl:function(l,k){if(h.isArray(l)&&h.isNumber(k)&&this._elColgroup&&(this._elColgroup.childNodes.length>l[l.length-1])){var j,n=[];for(j=l.length-1;j>-1;j--){n.push(this._elColgroup.removeChild(this._elColgroup.childNodes[l[j]]));}var m=this._elColgroup.childNodes[k]||null;for(j=n.length-1;j>-1;j--){this._elColgroup.insertBefore(n[j],m);}}},_destroyTheadEl:function(){var j=this._elThead;if(j){var i=j.parentNode;g.purgeElement(j,true);this._destroyColumnHelpers();i.removeChild(j);this._elThead=null;}},_initTheadEl:function(v){v=v||this._elTable;if(v){this._destroyTheadEl();var q=(this._elColgroup)?v.insertBefore(document.createElement("thead"),this._elColgroup.nextSibling):v.appendChild(document.createElement("thead"));g.addListener(q,"focus",this._onTheadFocus,this);g.addListener(q,"keydown",this._onTheadKeydown,this);g.addListener(q,"mousedown",this._onTableMousedown,this);g.addListener(q,"mouseup",this._onTableMouseup,this);g.addListener(q,"click",this._onTheadClick,this);var x=this._oColumnSet,t,r,p,n;var w=x.tree;var o;for(r=0;r<w.length;r++){var m=q.appendChild(document.createElement("tr"));for(p=0;p<w[r].length;p++){t=w[r][p];o=m.appendChild(document.createElement("th"));this._initThEl(o,t);}if(r===0){c.addClass(m,d.CLASS_FIRST);}if(r===(w.length-1)){c.addClass(m,d.CLASS_LAST);}}var k=x.headers[0]||[];for(r=0;r<k.length;r++){c.addClass(c.get(this.getId()+"-th-"+k[r]),d.CLASS_FIRST);}var s=x.headers[x.headers.length-1]||[];for(r=0;r<s.length;r++){c.addClass(c.get(this.getId()+"-th-"+s[r]),d.CLASS_LAST);}if(b.webkit&&b.webkit<420){var u=this;setTimeout(function(){q.style.display="";},0);q.style.display="none";}this._elThead=q;this._initColumnHelpers();}},_initThEl:function(m,l){m.id=this.getId()+"-th-"+l.getSanitizedKey();m.innerHTML="";m.rowSpan=l.getRowspan();m.colSpan=l.getColspan();l._elTh=m;var i=m.appendChild(document.createElement("div"));i.id=m.id+"-liner";i.className=d.CLASS_LINER;l._elThLiner=i;var j=i.appendChild(document.createElement("span"));
j.className=d.CLASS_LABEL;if(l.abbr){m.abbr=l.abbr;}if(l.hidden){this._clearMinWidth(l);}m.className=this._getColumnClassNames(l);if(l.width){var k=(l.minWidth&&(l.width<l.minWidth))?l.minWidth:l.width;if(d._bDynStylesFallback){m.firstChild.style.overflow="hidden";m.firstChild.style.width=k+"px";}else{this._setColumnWidthDynStyles(l,k+"px","hidden");}}this.formatTheadCell(j,l,this.get("sortedBy"));l._elThLabel=j;},formatTheadCell:function(i,m,k){var q=m.getKey();var p=h.isValue(m.label)?m.label:q;if(m.sortable){var n=this.getColumnSortDir(m,k);var j=(n===d.CLASS_DESC);if(k&&(m.key===k.key)){j=!(k.dir===d.CLASS_DESC);}var l=this.getId()+"-href-"+m.getSanitizedKey();var o=(j)?this.get("MSG_SORTDESC"):this.get("MSG_SORTASC");i.innerHTML='<a href="'+l+'" title="'+o+'" class="'+d.CLASS_SORTABLE+'">'+p+"</a>";}else{i.innerHTML=p;}},_destroyDraggableColumns:function(){var l,m;for(var k=0,j=this._oColumnSet.tree[0].length;k<j;k++){l=this._oColumnSet.tree[0][k];if(l._dd){l._dd=l._dd.unreg();c.removeClass(l.getThEl(),d.CLASS_DRAGGABLE);}}this._destroyColumnDragTargetEl();},_initDraggableColumns:function(){this._destroyDraggableColumns();if(a.DD){var m,n,k;for(var l=0,j=this._oColumnSet.tree[0].length;l<j;l++){m=this._oColumnSet.tree[0][l];n=m.getThEl();c.addClass(n,d.CLASS_DRAGGABLE);k=this._initColumnDragTargetEl();m._dd=new YAHOO.widget.ColumnDD(this,m,n,k);}}else{}},_destroyColumnDragTargetEl:function(){if(this._elColumnDragTarget){var i=this._elColumnDragTarget;YAHOO.util.Event.purgeElement(i);i.parentNode.removeChild(i);this._elColumnDragTarget=null;}},_initColumnDragTargetEl:function(){if(!this._elColumnDragTarget){var i=document.createElement("div");i.id=this.getId()+"-coltarget";i.className=d.CLASS_COLTARGET;i.style.display="none";document.body.insertBefore(i,document.body.firstChild);this._elColumnDragTarget=i;}return this._elColumnDragTarget;},_destroyResizeableColumns:function(){var k=this._oColumnSet.keys;for(var l=0,j=k.length;l<j;l++){if(k[l]._ddResizer){k[l]._ddResizer=k[l]._ddResizer.unreg();c.removeClass(k[l].getThEl(),d.CLASS_RESIZEABLE);}}this._destroyColumnResizerProxyEl();},_initResizeableColumns:function(){this._destroyResizeableColumns();if(a.DD){var p,k,n,q,j,r,m;for(var l=0,o=this._oColumnSet.keys.length;l<o;l++){p=this._oColumnSet.keys[l];if(p.resizeable){k=p.getThEl();c.addClass(k,d.CLASS_RESIZEABLE);n=p.getThLinerEl();q=k.appendChild(document.createElement("div"));q.className=d.CLASS_RESIZERLINER;q.appendChild(n);j=q.appendChild(document.createElement("div"));j.id=k.id+"-resizer";j.className=d.CLASS_RESIZER;p._elResizer=j;r=this._initColumnResizerProxyEl();p._ddResizer=new YAHOO.util.ColumnResizer(this,p,k,j,r);m=function(i){g.stopPropagation(i);};g.addListener(j,"click",m);}}}else{}},_destroyColumnResizerProxyEl:function(){if(this._elColumnResizerProxy){var i=this._elColumnResizerProxy;YAHOO.util.Event.purgeElement(i);i.parentNode.removeChild(i);this._elColumnResizerProxy=null;}},_initColumnResizerProxyEl:function(){if(!this._elColumnResizerProxy){var i=document.createElement("div");i.id=this.getId()+"-colresizerproxy";i.className=d.CLASS_RESIZERPROXY;document.body.insertBefore(i,document.body.firstChild);this._elColumnResizerProxy=i;}return this._elColumnResizerProxy;},_destroyColumnHelpers:function(){this._destroyDraggableColumns();this._destroyResizeableColumns();},_initColumnHelpers:function(){if(this.get("draggableColumns")){this._initDraggableColumns();}this._initResizeableColumns();},_destroyTbodyEl:function(){var i=this._elTbody;if(i){var j=i.parentNode;g.purgeElement(i,true);j.removeChild(i);this._elTbody=null;}},_initTbodyEl:function(j){if(j){this._destroyTbodyEl();var i=j.appendChild(document.createElement("tbody"));i.tabIndex=0;i.className=d.CLASS_DATA;g.addListener(i,"focus",this._onTbodyFocus,this);g.addListener(i,"mousedown",this._onTableMousedown,this);g.addListener(i,"mouseup",this._onTableMouseup,this);g.addListener(i,"keydown",this._onTbodyKeydown,this);g.addListener(i,"click",this._onTbodyClick,this);if(b.ie){i.hideFocus=true;}this._elTbody=i;}},_destroyMsgTbodyEl:function(){var i=this._elMsgTbody;if(i){var j=i.parentNode;g.purgeElement(i,true);j.removeChild(i);this._elTbody=null;}},_initMsgTbodyEl:function(l){if(l){var k=document.createElement("tbody");k.className=d.CLASS_MESSAGE;var j=k.appendChild(document.createElement("tr"));j.className=d.CLASS_FIRST+" "+d.CLASS_LAST;this._elMsgTr=j;var m=j.appendChild(document.createElement("td"));m.colSpan=this._oColumnSet.keys.length||1;m.className=d.CLASS_FIRST+" "+d.CLASS_LAST;this._elMsgTd=m;k=l.insertBefore(k,this._elTbody);var i=m.appendChild(document.createElement("div"));i.className=d.CLASS_LINER;this._elMsgTbody=k;g.addListener(k,"focus",this._onTbodyFocus,this);g.addListener(k,"mousedown",this._onTableMousedown,this);g.addListener(k,"mouseup",this._onTableMouseup,this);g.addListener(k,"keydown",this._onTbodyKeydown,this);g.addListener(k,"click",this._onTbodyClick,this);}},_initEvents:function(){this._initColumnSort();YAHOO.util.Event.addListener(document,"click",this._onDocumentClick,this);this.subscribe("paginatorChange",function(){this._handlePaginatorChange.apply(this,arguments);});this.subscribe("initEvent",function(){this.renderPaginator();});this._initCellEditing();},_initColumnSort:function(){this.subscribe("theadCellClickEvent",this.onEventSortColumn);var i=this.get("sortedBy");if(i){if(i.dir=="desc"){this._configs.sortedBy.value.dir=d.CLASS_DESC;}else{if(i.dir=="asc"){this._configs.sortedBy.value.dir=d.CLASS_ASC;}}}},_initCellEditing:function(){this.subscribe("editorBlurEvent",function(){this.onEditorBlurEvent.apply(this,arguments);});this.subscribe("editorBlockEvent",function(){this.onEditorBlockEvent.apply(this,arguments);});this.subscribe("editorUnblockEvent",function(){this.onEditorUnblockEvent.apply(this,arguments);});},_getColumnClassNames:function(l,k){var i;if(h.isString(l.className)){i=[l.className];}else{if(h.isArray(l.className)){i=l.className;}else{i=[];}}i[i.length]=this.getId()+"-col-"+l.getSanitizedKey();
i[i.length]="yui-dt-col-"+l.getSanitizedKey();var j=this.get("sortedBy")||{};if(l.key===j.key){i[i.length]=j.dir||"";}if(l.hidden){i[i.length]=d.CLASS_HIDDEN;}if(l.selected){i[i.length]=d.CLASS_SELECTED;}if(l.sortable){i[i.length]=d.CLASS_SORTABLE;}if(l.resizeable){i[i.length]=d.CLASS_RESIZEABLE;}if(l.editor){i[i.length]=d.CLASS_EDITABLE;}if(k){i=i.concat(k);}return i.join(" ");},_clearTrTemplateEl:function(){this._elTrTemplate=null;},_getTrTemplateEl:function(u,o){if(this._elTrTemplate){return this._elTrTemplate;}else{var q=document,s=q.createElement("tr"),l=q.createElement("td"),k=q.createElement("div");l.appendChild(k);var t=document.createDocumentFragment(),r=this._oColumnSet.keys,n;var p;for(var m=0,j=r.length;m<j;m++){n=l.cloneNode(true);n=this._formatTdEl(r[m],n,m,(m===j-1));t.appendChild(n);}s.appendChild(t);s.className=d.CLASS_REC;this._elTrTemplate=s;return s;}},_formatTdEl:function(n,p,q,m){var t=this._oColumnSet;var i=t.headers,k=i[q],o="",v;for(var l=0,u=k.length;l<u;l++){v=this._sId+"-th-"+k[l]+" ";o+=v;}p.headers=o;var s=[];if(q===0){s[s.length]=d.CLASS_FIRST;}if(m){s[s.length]=d.CLASS_LAST;}p.className=this._getColumnClassNames(n,s);p.firstChild.className=d.CLASS_LINER;if(n.width&&d._bDynStylesFallback){var r=(n.minWidth&&(n.width<n.minWidth))?n.minWidth:n.width;p.firstChild.style.overflow="hidden";p.firstChild.style.width=r+"px";}return p;},_addTrEl:function(k){var j=this._getTrTemplateEl();var i=j.cloneNode(true);return this._updateTrEl(i,k);},_updateTrEl:function(q,r){var p=this.get("formatRow")?this.get("formatRow").call(this,q,r):true;if(p){q.style.display="none";var o=q.childNodes,m;for(var l=0,n=o.length;l<n;++l){m=o[l];this.formatCell(o[l].firstChild,r,this._oColumnSet.keys[l]);}q.style.display="";}var j=q.id,k=r.getId();if(this._sFirstTrId===j){this._sFirstTrId=k;}if(this._sLastTrId===j){this._sLastTrId=k;}q.id=k;return q;},_deleteTrEl:function(i){var j;if(!h.isNumber(i)){j=c.get(i).sectionRowIndex;}else{j=i;}if(h.isNumber(j)&&(j>-2)&&(j<this._elTbody.rows.length)){return this._elTbody.removeChild(this._elTbody.rows[i]);}else{return null;}},_unsetFirstRow:function(){if(this._sFirstTrId){c.removeClass(this._sFirstTrId,d.CLASS_FIRST);this._sFirstTrId=null;}},_setFirstRow:function(){this._unsetFirstRow();var i=this.getFirstTrEl();if(i){c.addClass(i,d.CLASS_FIRST);this._sFirstTrId=i.id;}},_unsetLastRow:function(){if(this._sLastTrId){c.removeClass(this._sLastTrId,d.CLASS_LAST);this._sLastTrId=null;}},_setLastRow:function(){this._unsetLastRow();var i=this.getLastTrEl();if(i){c.addClass(i,d.CLASS_LAST);this._sLastTrId=i.id;}},_setRowStripes:function(t,l){var m=this._elTbody.rows,q=0,s=m.length,p=[],r=0,n=[],j=0;if((t!==null)&&(t!==undefined)){var o=this.getTrEl(t);if(o){q=o.sectionRowIndex;if(h.isNumber(l)&&(l>1)){s=q+l;}}}for(var k=q;k<s;k++){if(k%2){p[r++]=m[k];}else{n[j++]=m[k];}}if(p.length){c.replaceClass(p,d.CLASS_EVEN,d.CLASS_ODD);}if(n.length){c.replaceClass(n,d.CLASS_ODD,d.CLASS_EVEN);}},_setSelections:function(){var l=this.getSelectedRows();var n=this.getSelectedCells();if((l.length>0)||(n.length>0)){var m=this._oColumnSet,k;for(var j=0;j<l.length;j++){k=c.get(l[j]);if(k){c.addClass(k,d.CLASS_SELECTED);}}for(j=0;j<n.length;j++){k=c.get(n[j].recordId);if(k){c.addClass(k.childNodes[m.getColumn(n[j].columnKey).getKeyIndex()],d.CLASS_SELECTED);}}}},_onRenderChainEnd:function(){this.hideTableMessage();if(this._elTbody.rows.length===0){this.showTableMessage(this.get("MSG_EMPTY"),d.CLASS_EMPTY);}var i=this;setTimeout(function(){if((i instanceof d)&&i._sId){if(i._bInit){i._bInit=false;i.fireEvent("initEvent");}i.fireEvent("renderEvent");i.fireEvent("refreshEvent");i.validateColumnWidths();i.fireEvent("postRenderEvent");}},0);},_onDocumentClick:function(l,j){var m=g.getTarget(l);var i=m.nodeName.toLowerCase();if(!c.isAncestor(j._elContainer,m)){j.fireEvent("tableBlurEvent");if(j._oCellEditor){if(j._oCellEditor.getContainerEl){var k=j._oCellEditor.getContainerEl();if(!c.isAncestor(k,m)&&(k.id!==m.id)){j._oCellEditor.fireEvent("blurEvent",{editor:j._oCellEditor});}}else{if(j._oCellEditor.isActive){if(!c.isAncestor(j._oCellEditor.container,m)&&(j._oCellEditor.container.id!==m.id)){j.fireEvent("editorBlurEvent",{editor:j._oCellEditor});}}}}}},_onTableFocus:function(j,i){i.fireEvent("tableFocusEvent");},_onTheadFocus:function(j,i){i.fireEvent("theadFocusEvent");i.fireEvent("tableFocusEvent");},_onTbodyFocus:function(j,i){i.fireEvent("tbodyFocusEvent");i.fireEvent("tableFocusEvent");},_onTableMouseover:function(n,m,i,k){var o=m;var j=o.nodeName&&o.nodeName.toLowerCase();var l=true;while(o&&(j!="table")){switch(j){case"body":return;case"a":break;case"td":l=k.fireEvent("cellMouseoverEvent",{target:o,event:n});break;case"span":if(c.hasClass(o,d.CLASS_LABEL)){l=k.fireEvent("theadLabelMouseoverEvent",{target:o,event:n});l=k.fireEvent("headerLabelMouseoverEvent",{target:o,event:n});}break;case"th":l=k.fireEvent("theadCellMouseoverEvent",{target:o,event:n});l=k.fireEvent("headerCellMouseoverEvent",{target:o,event:n});break;case"tr":if(o.parentNode.nodeName.toLowerCase()=="thead"){l=k.fireEvent("theadRowMouseoverEvent",{target:o,event:n});l=k.fireEvent("headerRowMouseoverEvent",{target:o,event:n});}else{l=k.fireEvent("rowMouseoverEvent",{target:o,event:n});}break;default:break;}if(l===false){return;}else{o=o.parentNode;if(o){j=o.nodeName.toLowerCase();}}}k.fireEvent("tableMouseoverEvent",{target:(o||k._elContainer),event:n});},_onTableMouseout:function(n,m,i,k){var o=m;var j=o.nodeName&&o.nodeName.toLowerCase();var l=true;while(o&&(j!="table")){switch(j){case"body":return;case"a":break;case"td":l=k.fireEvent("cellMouseoutEvent",{target:o,event:n});break;case"span":if(c.hasClass(o,d.CLASS_LABEL)){l=k.fireEvent("theadLabelMouseoutEvent",{target:o,event:n});l=k.fireEvent("headerLabelMouseoutEvent",{target:o,event:n});}break;case"th":l=k.fireEvent("theadCellMouseoutEvent",{target:o,event:n});l=k.fireEvent("headerCellMouseoutEvent",{target:o,event:n});break;case"tr":if(o.parentNode.nodeName.toLowerCase()=="thead"){l=k.fireEvent("theadRowMouseoutEvent",{target:o,event:n});
l=k.fireEvent("headerRowMouseoutEvent",{target:o,event:n});}else{l=k.fireEvent("rowMouseoutEvent",{target:o,event:n});}break;default:break;}if(l===false){return;}else{o=o.parentNode;if(o){j=o.nodeName.toLowerCase();}}}k.fireEvent("tableMouseoutEvent",{target:(o||k._elContainer),event:n});},_onTableMousedown:function(l,j){var m=g.getTarget(l);var i=m.nodeName&&m.nodeName.toLowerCase();var k=true;while(m&&(i!="table")){switch(i){case"body":return;case"a":break;case"td":k=j.fireEvent("cellMousedownEvent",{target:m,event:l});break;case"span":if(c.hasClass(m,d.CLASS_LABEL)){k=j.fireEvent("theadLabelMousedownEvent",{target:m,event:l});k=j.fireEvent("headerLabelMousedownEvent",{target:m,event:l});}break;case"th":k=j.fireEvent("theadCellMousedownEvent",{target:m,event:l});k=j.fireEvent("headerCellMousedownEvent",{target:m,event:l});break;case"tr":if(m.parentNode.nodeName.toLowerCase()=="thead"){k=j.fireEvent("theadRowMousedownEvent",{target:m,event:l});k=j.fireEvent("headerRowMousedownEvent",{target:m,event:l});}else{k=j.fireEvent("rowMousedownEvent",{target:m,event:l});}break;default:break;}if(k===false){return;}else{m=m.parentNode;if(m){i=m.nodeName.toLowerCase();}}}j.fireEvent("tableMousedownEvent",{target:(m||j._elContainer),event:l});},_onTableMouseup:function(l,j){var m=g.getTarget(l);var i=m.nodeName&&m.nodeName.toLowerCase();var k=true;while(m&&(i!="table")){switch(i){case"body":return;case"a":break;case"td":k=j.fireEvent("cellMouseupEvent",{target:m,event:l});break;case"span":if(c.hasClass(m,d.CLASS_LABEL)){k=j.fireEvent("theadLabelMouseupEvent",{target:m,event:l});k=j.fireEvent("headerLabelMouseupEvent",{target:m,event:l});}break;case"th":k=j.fireEvent("theadCellMouseupEvent",{target:m,event:l});k=j.fireEvent("headerCellMouseupEvent",{target:m,event:l});break;case"tr":if(m.parentNode.nodeName.toLowerCase()=="thead"){k=j.fireEvent("theadRowMouseupEvent",{target:m,event:l});k=j.fireEvent("headerRowMouseupEvent",{target:m,event:l});}else{k=j.fireEvent("rowMouseupEvent",{target:m,event:l});}break;default:break;}if(k===false){return;}else{m=m.parentNode;if(m){i=m.nodeName.toLowerCase();}}}j.fireEvent("tableMouseupEvent",{target:(m||j._elContainer),event:l});},_onTableDblclick:function(l,j){var m=g.getTarget(l);var i=m.nodeName&&m.nodeName.toLowerCase();var k=true;while(m&&(i!="table")){switch(i){case"body":return;case"td":k=j.fireEvent("cellDblclickEvent",{target:m,event:l});break;case"span":if(c.hasClass(m,d.CLASS_LABEL)){k=j.fireEvent("theadLabelDblclickEvent",{target:m,event:l});k=j.fireEvent("headerLabelDblclickEvent",{target:m,event:l});}break;case"th":k=j.fireEvent("theadCellDblclickEvent",{target:m,event:l});k=j.fireEvent("headerCellDblclickEvent",{target:m,event:l});break;case"tr":if(m.parentNode.nodeName.toLowerCase()=="thead"){k=j.fireEvent("theadRowDblclickEvent",{target:m,event:l});k=j.fireEvent("headerRowDblclickEvent",{target:m,event:l});}else{k=j.fireEvent("rowDblclickEvent",{target:m,event:l});}break;default:break;}if(k===false){return;}else{m=m.parentNode;if(m){i=m.nodeName.toLowerCase();}}}j.fireEvent("tableDblclickEvent",{target:(m||j._elContainer),event:l});},_onTheadKeydown:function(l,j){var m=g.getTarget(l);var i=m.nodeName&&m.nodeName.toLowerCase();var k=true;while(m&&(i!="table")){switch(i){case"body":return;case"input":case"textarea":break;case"thead":k=j.fireEvent("theadKeyEvent",{target:m,event:l});break;default:break;}if(k===false){return;}else{m=m.parentNode;if(m){i=m.nodeName.toLowerCase();}}}j.fireEvent("tableKeyEvent",{target:(m||j._elContainer),event:l});},_onTbodyKeydown:function(m,k){var j=k.get("selectionMode");if(j=="standard"){k._handleStandardSelectionByKey(m);}else{if(j=="single"){k._handleSingleSelectionByKey(m);}else{if(j=="cellblock"){k._handleCellBlockSelectionByKey(m);}else{if(j=="cellrange"){k._handleCellRangeSelectionByKey(m);}else{if(j=="singlecell"){k._handleSingleCellSelectionByKey(m);}}}}}if(k._oCellEditor){if(k._oCellEditor.fireEvent){k._oCellEditor.fireEvent("blurEvent",{editor:k._oCellEditor});}else{if(k._oCellEditor.isActive){k.fireEvent("editorBlurEvent",{editor:k._oCellEditor});}}}var n=g.getTarget(m);var i=n.nodeName&&n.nodeName.toLowerCase();var l=true;while(n&&(i!="table")){switch(i){case"body":return;case"tbody":l=k.fireEvent("tbodyKeyEvent",{target:n,event:m});break;default:break;}if(l===false){return;}else{n=n.parentNode;if(n){i=n.nodeName.toLowerCase();}}}k.fireEvent("tableKeyEvent",{target:(n||k._elContainer),event:m});},_onTheadClick:function(l,j){if(j._oCellEditor){if(j._oCellEditor.fireEvent){j._oCellEditor.fireEvent("blurEvent",{editor:j._oCellEditor});}else{if(j._oCellEditor.isActive){j.fireEvent("editorBlurEvent",{editor:j._oCellEditor});}}}var m=g.getTarget(l),i=m.nodeName&&m.nodeName.toLowerCase(),k=true;while(m&&(i!="table")){switch(i){case"body":return;case"input":var n=m.type.toLowerCase();if(n=="checkbox"){k=j.fireEvent("theadCheckboxClickEvent",{target:m,event:l});}else{if(n=="radio"){k=j.fireEvent("theadRadioClickEvent",{target:m,event:l});}else{if((n=="button")||(n=="image")||(n=="submit")||(n=="reset")){if(!m.disabled){k=j.fireEvent("theadButtonClickEvent",{target:m,event:l});}else{k=false;}}else{if(m.disabled){k=false;}}}}break;case"a":k=j.fireEvent("theadLinkClickEvent",{target:m,event:l});break;case"button":if(!m.disabled){k=j.fireEvent("theadButtonClickEvent",{target:m,event:l});}else{k=false;}break;case"span":if(c.hasClass(m,d.CLASS_LABEL)){k=j.fireEvent("theadLabelClickEvent",{target:m,event:l});k=j.fireEvent("headerLabelClickEvent",{target:m,event:l});}break;case"th":k=j.fireEvent("theadCellClickEvent",{target:m,event:l});k=j.fireEvent("headerCellClickEvent",{target:m,event:l});break;case"tr":k=j.fireEvent("theadRowClickEvent",{target:m,event:l});k=j.fireEvent("headerRowClickEvent",{target:m,event:l});break;default:break;}if(k===false){return;}else{m=m.parentNode;if(m){i=m.nodeName.toLowerCase();}}}j.fireEvent("tableClickEvent",{target:(m||j._elContainer),event:l});},_onTbodyClick:function(l,j){if(j._oCellEditor){if(j._oCellEditor.fireEvent){j._oCellEditor.fireEvent("blurEvent",{editor:j._oCellEditor});
}else{if(j._oCellEditor.isActive){j.fireEvent("editorBlurEvent",{editor:j._oCellEditor});}}}var m=g.getTarget(l),i=m.nodeName&&m.nodeName.toLowerCase(),k=true;while(m&&(i!="table")){switch(i){case"body":return;case"input":var n=m.type.toLowerCase();if(n=="checkbox"){k=j.fireEvent("checkboxClickEvent",{target:m,event:l});}else{if(n=="radio"){k=j.fireEvent("radioClickEvent",{target:m,event:l});}else{if((n=="button")||(n=="image")||(n=="submit")||(n=="reset")){if(!m.disabled){k=j.fireEvent("buttonClickEvent",{target:m,event:l});}else{k=false;}}else{if(m.disabled){k=false;}}}}break;case"a":k=j.fireEvent("linkClickEvent",{target:m,event:l});break;case"button":if(!m.disabled){k=j.fireEvent("buttonClickEvent",{target:m,event:l});}else{k=false;}break;case"td":k=j.fireEvent("cellClickEvent",{target:m,event:l});break;case"tr":k=j.fireEvent("rowClickEvent",{target:m,event:l});break;default:break;}if(k===false){return;}else{m=m.parentNode;if(m){i=m.nodeName.toLowerCase();}}}j.fireEvent("tableClickEvent",{target:(m||j._elContainer),event:l});},_onDropdownChange:function(j,i){var k=g.getTarget(j);i.fireEvent("dropdownChangeEvent",{event:j,target:k});},configs:null,getId:function(){return this._sId;},toString:function(){return"DataTable instance "+this._sId;},getDataSource:function(){return this._oDataSource;},getColumnSet:function(){return this._oColumnSet;},getRecordSet:function(){return this._oRecordSet;},getState:function(){return{totalRecords:this.get("paginator")?this.get("paginator").get("totalRecords"):this._oRecordSet.getLength(),pagination:this.get("paginator")?this.get("paginator").getState():null,sortedBy:this.get("sortedBy"),selectedRows:this.getSelectedRows(),selectedCells:this.getSelectedCells()};},getContainerEl:function(){return this._elContainer;},getTableEl:function(){return this._elTable;},getTheadEl:function(){return this._elThead;},getTbodyEl:function(){return this._elTbody;},getMsgTbodyEl:function(){return this._elMsgTbody;},getMsgTdEl:function(){return this._elMsgTd;},getTrEl:function(k){if(k instanceof YAHOO.widget.Record){return document.getElementById(k.getId());}else{if(h.isNumber(k)){var j=c.getElementsByClassName(d.CLASS_REC,"tr",this._elTbody);return j&&j[k]?j[k]:null;}else{if(k){var i=(h.isString(k))?document.getElementById(k):k;if(i&&i.ownerDocument==document){if(i.nodeName.toLowerCase()!="tr"){i=c.getAncestorByTagName(i,"tr");}return i;}}}}return null;},getFirstTrEl:function(){var k=this._elTbody.rows,j=0;while(k[j]){if(this.getRecord(k[j])){return k[j];}j++;}return null;},getLastTrEl:function(){var k=this._elTbody.rows,j=k.length-1;while(j>-1){if(this.getRecord(k[j])){return k[j];}j--;}return null;},getNextTrEl:function(l,i){var j=this.getTrIndex(l);if(j!==null){var k=this._elTbody.rows;if(i){while(j<k.length-1){l=k[j+1];if(this.getRecord(l)){return l;}j++;}}else{if(j<k.length-1){return k[j+1];}}}return null;},getPreviousTrEl:function(l,i){var j=this.getTrIndex(l);if(j!==null){var k=this._elTbody.rows;if(i){while(j>0){l=k[j-1];if(this.getRecord(l)){return l;}j--;}}else{if(j>0){return k[j-1];}}}return null;},getCellIndex:function(k){k=this.getTdEl(k);if(k){if(b.ie>0){var l=0,n=k.parentNode,m=n.childNodes,j=m.length;for(;l<j;l++){if(m[l]==k){return l;}}}else{return k.cellIndex;}}},getTdLinerEl:function(i){var j=this.getTdEl(i);return j.firstChild||null;},getTdEl:function(i){var n;var l=c.get(i);if(l&&(l.ownerDocument==document)){if(l.nodeName.toLowerCase()!="td"){n=c.getAncestorByTagName(l,"td");}else{n=l;}if(n&&((n.parentNode.parentNode==this._elTbody)||(n.parentNode.parentNode===null)||(n.parentNode.parentNode.nodeType===11))){return n;}}else{if(i){var m,k;if(h.isString(i.columnKey)&&h.isString(i.recordId)){m=this.getRecord(i.recordId);var o=this.getColumn(i.columnKey);if(o){k=o.getKeyIndex();}}if(i.record&&i.column&&i.column.getKeyIndex){m=i.record;k=i.column.getKeyIndex();}var j=this.getTrEl(m);if((k!==null)&&j&&j.cells&&j.cells.length>0){return j.cells[k]||null;}}}return null;},getFirstTdEl:function(j){var i=h.isValue(j)?this.getTrEl(j):this.getFirstTrEl();if(i){if(i.cells&&i.cells.length>0){return i.cells[0];}else{if(i.childNodes&&i.childNodes.length>0){return i.childNodes[0];}}}return null;},getLastTdEl:function(j){var i=h.isValue(j)?this.getTrEl(j):this.getLastTrEl();if(i){if(i.cells&&i.cells.length>0){return i.cells[i.cells.length-1];}else{if(i.childNodes&&i.childNodes.length>0){return i.childNodes[i.childNodes.length-1];}}}return null;},getNextTdEl:function(i){var m=this.getTdEl(i);if(m){var k=this.getCellIndex(m);var j=this.getTrEl(m);if(j.cells&&(j.cells.length)>0&&(k<j.cells.length-1)){return j.cells[k+1];}else{if(j.childNodes&&(j.childNodes.length)>0&&(k<j.childNodes.length-1)){return j.childNodes[k+1];}else{var l=this.getNextTrEl(j);if(l){return l.cells[0];}}}}return null;},getPreviousTdEl:function(i){var m=this.getTdEl(i);if(m){var k=this.getCellIndex(m);var j=this.getTrEl(m);if(k>0){if(j.cells&&j.cells.length>0){return j.cells[k-1];}else{if(j.childNodes&&j.childNodes.length>0){return j.childNodes[k-1];}}}else{var l=this.getPreviousTrEl(j);if(l){return this.getLastTdEl(l);}}}return null;},getAboveTdEl:function(j,i){var m=this.getTdEl(j);if(m){var l=this.getPreviousTrEl(m,i);if(l){var k=this.getCellIndex(m);if(l.cells&&l.cells.length>0){return l.cells[k]?l.cells[k]:null;}else{if(l.childNodes&&l.childNodes.length>0){return l.childNodes[k]?l.childNodes[k]:null;}}}}return null;},getBelowTdEl:function(j,i){var m=this.getTdEl(j);if(m){var l=this.getNextTrEl(m,i);if(l){var k=this.getCellIndex(m);if(l.cells&&l.cells.length>0){return l.cells[k]?l.cells[k]:null;}else{if(l.childNodes&&l.childNodes.length>0){return l.childNodes[k]?l.childNodes[k]:null;}}}}return null;},getThLinerEl:function(j){var i=this.getColumn(j);return(i)?i.getThLinerEl():null;},getThEl:function(k){var l;if(k instanceof YAHOO.widget.Column){var j=k;l=j.getThEl();if(l){return l;}}else{var i=c.get(k);if(i&&(i.ownerDocument==document)){if(i.nodeName.toLowerCase()!="th"){l=c.getAncestorByTagName(i,"th");
}else{l=i;}return l;}}return null;},getTrIndex:function(m){var i=this.getRecord(m),k=this.getRecordIndex(i),l;if(i){l=this.getTrEl(i);if(l){return l.sectionRowIndex;}else{var j=this.get("paginator");if(j){return j.get("recordOffset")+k;}else{return k;}}}return null;},load:function(i){i=i||{};(i.datasource||this._oDataSource).sendRequest(i.request||this.get("initialRequest"),i.callback||{success:this.onDataReturnInitializeTable,failure:this.onDataReturnInitializeTable,scope:this,argument:this.getState()});},initializeTable:function(){this._bInit=true;this._oRecordSet.reset();var i=this.get("paginator");if(i){i.set("totalRecords",0);}this._unselectAllTrEls();this._unselectAllTdEls();this._aSelections=null;this._oAnchorRecord=null;this._oAnchorCell=null;this.set("sortedBy",null);},_runRenderChain:function(){this._oChainRender.run();},_getViewRecords:function(){var i=this.get("paginator");if(i){return this._oRecordSet.getRecords(i.getStartIndex(),i.getRowsPerPage());}else{return this._oRecordSet.getRecords();}},render:function(){this._oChainRender.stop();this.fireEvent("beforeRenderEvent");var r,p,o,s,l=this._getViewRecords();var m=this._elTbody,q=this.get("renderLoopSize"),t=l.length;if(t>0){m.style.display="none";while(m.lastChild){m.removeChild(m.lastChild);}m.style.display="";this._oChainRender.add({method:function(u){if((this instanceof d)&&this._sId){var k=u.nCurrentRecord,w=((u.nCurrentRecord+u.nLoopLength)>t)?t:(u.nCurrentRecord+u.nLoopLength),j,v;m.style.display="none";for(;k<w;k++){j=c.get(l[k].getId());j=j||this._addTrEl(l[k]);v=m.childNodes[k]||null;m.insertBefore(j,v);}m.style.display="";u.nCurrentRecord=k;}},scope:this,iterations:(q>0)?Math.ceil(t/q):1,argument:{nCurrentRecord:0,nLoopLength:(q>0)?q:t},timeout:(q>0)?0:-1});this._oChainRender.add({method:function(i){if((this instanceof d)&&this._sId){while(m.rows.length>t){m.removeChild(m.lastChild);}this._setFirstRow();this._setLastRow();this._setRowStripes();this._setSelections();}},scope:this,timeout:(q>0)?0:-1});}else{var n=m.rows.length;if(n>0){this._oChainRender.add({method:function(k){if((this instanceof d)&&this._sId){var j=k.nCurrent,v=k.nLoopLength,u=(j-v<0)?0:j-v;m.style.display="none";for(;j>u;j--){m.deleteRow(-1);}m.style.display="";k.nCurrent=j;}},scope:this,iterations:(q>0)?Math.ceil(n/q):1,argument:{nCurrent:n,nLoopLength:(q>0)?q:n},timeout:(q>0)?0:-1});}}this._runRenderChain();},disable:function(){this._disabled=true;var i=this._elTable;var j=this._elMask;j.style.width=i.offsetWidth+"px";j.style.height=i.offsetHeight+"px";j.style.left=i.offsetLeft+"px";j.style.display="";this.fireEvent("disableEvent");},undisable:function(){this._disabled=false;this._elMask.style.display="none";this.fireEvent("undisableEvent");},isDisabled:function(){return this._disabled;},destroy:function(){var k=this.toString();this._oChainRender.stop();this._destroyColumnHelpers();var m;for(var l=0,j=this._oColumnSet.flat.length;l<j;l++){m=this._oColumnSet.flat[l].editor;if(m&&m.destroy){m.destroy();this._oColumnSet.flat[l].editor=null;}}this._destroyPaginator();this._oRecordSet.unsubscribeAll();this.unsubscribeAll();g.removeListener(document,"click",this._onDocumentClick);this._destroyContainerEl(this._elContainer);for(var n in this){if(h.hasOwnProperty(this,n)){this[n]=null;}}d._nCurrentCount--;if(d._nCurrentCount<1){if(d._elDynStyleNode){document.getElementsByTagName("head")[0].removeChild(d._elDynStyleNode);d._elDynStyleNode=null;}}},showTableMessage:function(j,i){var k=this._elMsgTd;if(h.isString(j)){k.firstChild.innerHTML=j;}if(h.isString(i)){k.className=i;}this._elMsgTbody.style.display="";this.fireEvent("tableMsgShowEvent",{html:j,className:i});},hideTableMessage:function(){if(this._elMsgTbody.style.display!="none"){this._elMsgTbody.style.display="none";this._elMsgTbody.parentNode.style.width="";this.fireEvent("tableMsgHideEvent");}},focus:function(){this.focusTbodyEl();},focusTheadEl:function(){this._focusEl(this._elThead);},focusTbodyEl:function(){this._focusEl(this._elTbody);},onShow:function(){this.validateColumnWidths();for(var m=this._oColumnSet.keys,l=0,j=m.length,k;l<j;l++){k=m[l];if(k._ddResizer){k._ddResizer.resetResizerEl();}}},getRecordIndex:function(l){var k;if(!h.isNumber(l)){if(l instanceof YAHOO.widget.Record){return this._oRecordSet.getRecordIndex(l);}else{var j=this.getTrEl(l);if(j){k=j.sectionRowIndex;}}}else{k=l;}if(h.isNumber(k)){var i=this.get("paginator");if(i){return i.get("recordOffset")+k;}else{return k;}}return null;},getRecord:function(k){var j=this._oRecordSet.getRecord(k);if(!j){var i=this.getTrEl(k);if(i){j=this._oRecordSet.getRecord(i.id);}}if(j instanceof YAHOO.widget.Record){return this._oRecordSet.getRecord(j);}else{return null;}},getColumn:function(m){var o=this._oColumnSet.getColumn(m);if(!o){var n=this.getTdEl(m);if(n){o=this._oColumnSet.getColumn(this.getCellIndex(n));}else{n=this.getThEl(m);if(n){var k=this._oColumnSet.flat;for(var l=0,j=k.length;l<j;l++){if(k[l].getThEl().id===n.id){o=k[l];}}}}}if(!o){}return o;},getColumnById:function(i){return this._oColumnSet.getColumnById(i);},getColumnSortDir:function(k,l){if(k.sortOptions&&k.sortOptions.defaultDir){if(k.sortOptions.defaultDir=="asc"){k.sortOptions.defaultDir=d.CLASS_ASC;}else{if(k.sortOptions.defaultDir=="desc"){k.sortOptions.defaultDir=d.CLASS_DESC;}}}var j=(k.sortOptions&&k.sortOptions.defaultDir)?k.sortOptions.defaultDir:d.CLASS_ASC;var i=false;l=l||this.get("sortedBy");if(l&&(l.key===k.key)){i=true;if(l.dir){j=(l.dir===d.CLASS_ASC)?d.CLASS_DESC:d.CLASS_ASC;}else{j=(j===d.CLASS_ASC)?d.CLASS_DESC:d.CLASS_ASC;}}return j;},doBeforeSortColumn:function(j,i){this.showTableMessage(this.get("MSG_LOADING"),d.CLASS_LOADING);return true;},sortColumn:function(m,j){if(m&&(m instanceof YAHOO.widget.Column)){if(!m.sortable){c.addClass(this.getThEl(m),d.CLASS_SORTABLE);}if(j&&(j!==d.CLASS_ASC)&&(j!==d.CLASS_DESC)){j=null;}var n=j||this.getColumnSortDir(m);var l=this.get("sortedBy")||{};var t=(l.key===m.key)?true:false;var p=this.doBeforeSortColumn(m,n);
if(p){if(this.get("dynamicData")){var s=this.getState();if(s.pagination){s.pagination.recordOffset=0;}s.sortedBy={key:m.key,dir:n};var k=this.get("generateRequest")(s,this);this.unselectAllRows();this.unselectAllCells();var r={success:this.onDataReturnSetRows,failure:this.onDataReturnSetRows,argument:s,scope:this};this._oDataSource.sendRequest(k,r);}else{var i=(m.sortOptions&&h.isFunction(m.sortOptions.sortFunction))?m.sortOptions.sortFunction:null;if(!t||j||i){i=i||this.get("sortFunction");var q=(m.sortOptions&&m.sortOptions.field)?m.sortOptions.field:m.field;this._oRecordSet.sortRecords(i,((n==d.CLASS_DESC)?true:false),q);}else{this._oRecordSet.reverseRecords();}var o=this.get("paginator");if(o){o.setPage(1,true);}this.render();this.set("sortedBy",{key:m.key,dir:n,column:m});}this.fireEvent("columnSortEvent",{column:m,dir:n});return;}}},setColumnWidth:function(j,i){if(!(j instanceof YAHOO.widget.Column)){j=this.getColumn(j);}if(j){if(h.isNumber(i)){i=(i>j.minWidth)?i:j.minWidth;j.width=i;this._setColumnWidth(j,i+"px");this.fireEvent("columnSetWidthEvent",{column:j,width:i});}else{if(i===null){j.width=i;this._setColumnWidth(j,"auto");this.validateColumnWidths(j);this.fireEvent("columnUnsetWidthEvent",{column:j});}}this._clearTrTemplateEl();}else{}},_setColumnWidth:function(j,i,k){if(j&&(j.getKeyIndex()!==null)){k=k||(((i==="")||(i==="auto"))?"visible":"hidden");if(!d._bDynStylesFallback){this._setColumnWidthDynStyles(j,i,k);}else{this._setColumnWidthDynFunction(j,i,k);}}else{}},_setColumnWidthDynStyles:function(m,l,n){var j=d._elDynStyleNode,k;if(!j){j=document.createElement("style");j.type="text/css";j=document.getElementsByTagName("head").item(0).appendChild(j);d._elDynStyleNode=j;}if(j){var i="."+this.getId()+"-col-"+m.getSanitizedKey()+" ."+d.CLASS_LINER;if(this._elTbody){this._elTbody.style.display="none";}k=d._oDynStyles[i];if(!k){if(j.styleSheet&&j.styleSheet.addRule){j.styleSheet.addRule(i,"overflow:"+n);j.styleSheet.addRule(i,"width:"+l);k=j.styleSheet.rules[j.styleSheet.rules.length-1];d._oDynStyles[i]=k;}else{if(j.sheet&&j.sheet.insertRule){j.sheet.insertRule(i+" {overflow:"+n+";width:"+l+";}",j.sheet.cssRules.length);k=j.sheet.cssRules[j.sheet.cssRules.length-1];d._oDynStyles[i]=k;}}}else{k.style.overflow=n;k.style.width=l;}if(this._elTbody){this._elTbody.style.display="";}}if(!k){d._bDynStylesFallback=true;this._setColumnWidthDynFunction(m,l);}},_setColumnWidthDynFunction:function(r,m,s){if(m=="auto"){m="";}var l=this._elTbody?this._elTbody.rows.length:0;if(!this._aDynFunctions[l]){var q,p,o;var t=["var colIdx=oColumn.getKeyIndex();","oColumn.getThLinerEl().style.overflow="];for(q=l-1,p=2;q>=0;--q){t[p++]="this._elTbody.rows[";t[p++]=q;t[p++]="].cells[colIdx].firstChild.style.overflow=";}t[p]="sOverflow;";t[p+1]="oColumn.getThLinerEl().style.width=";for(q=l-1,o=p+2;q>=0;--q){t[o++]="this._elTbody.rows[";t[o++]=q;t[o++]="].cells[colIdx].firstChild.style.width=";}t[o]="sWidth;";this._aDynFunctions[l]=new Function("oColumn","sWidth","sOverflow",t.join(""));}var n=this._aDynFunctions[l];if(n){n.call(this,r,m,s);}},validateColumnWidths:function(o){var l=this._elColgroup;var q=l.cloneNode(true);var p=false;var n=this._oColumnSet.keys;var k;if(o&&!o.hidden&&!o.width&&(o.getKeyIndex()!==null)){k=o.getThLinerEl();if((o.minWidth>0)&&(k.offsetWidth<o.minWidth)){q.childNodes[o.getKeyIndex()].style.width=o.minWidth+(parseInt(c.getStyle(k,"paddingLeft"),10)|0)+(parseInt(c.getStyle(k,"paddingRight"),10)|0)+"px";p=true;}else{if((o.maxAutoWidth>0)&&(k.offsetWidth>o.maxAutoWidth)){this._setColumnWidth(o,o.maxAutoWidth+"px","hidden");}}}else{for(var m=0,j=n.length;m<j;m++){o=n[m];if(!o.hidden&&!o.width){k=o.getThLinerEl();if((o.minWidth>0)&&(k.offsetWidth<o.minWidth)){q.childNodes[m].style.width=o.minWidth+(parseInt(c.getStyle(k,"paddingLeft"),10)|0)+(parseInt(c.getStyle(k,"paddingRight"),10)|0)+"px";p=true;}else{if((o.maxAutoWidth>0)&&(k.offsetWidth>o.maxAutoWidth)){this._setColumnWidth(o,o.maxAutoWidth+"px","hidden");}}}}}if(p){l.parentNode.replaceChild(q,l);this._elColgroup=q;}},_clearMinWidth:function(i){if(i.getKeyIndex()!==null){this._elColgroup.childNodes[i.getKeyIndex()].style.width="";}},_restoreMinWidth:function(i){if(i.minWidth&&(i.getKeyIndex()!==null)){this._elColgroup.childNodes[i.getKeyIndex()].style.width=i.minWidth+"px";}},hideColumn:function(r){if(!(r instanceof YAHOO.widget.Column)){r=this.getColumn(r);}if(r&&!r.hidden&&r.getTreeIndex()!==null){var o=this.getTbodyEl().rows;var n=o.length;var m=this._oColumnSet.getDescendants(r);for(var q=0,s=m.length;q<s;q++){var t=m[q];t.hidden=true;c.addClass(t.getThEl(),d.CLASS_HIDDEN);var k=t.getKeyIndex();if(k!==null){this._clearMinWidth(r);for(var p=0;p<n;p++){c.addClass(o[p].cells[k],d.CLASS_HIDDEN);}}this.fireEvent("columnHideEvent",{column:t});}this._repaintOpera();this._clearTrTemplateEl();}else{}},showColumn:function(r){if(!(r instanceof YAHOO.widget.Column)){r=this.getColumn(r);}if(r&&r.hidden&&(r.getTreeIndex()!==null)){var o=this.getTbodyEl().rows;var n=o.length;var m=this._oColumnSet.getDescendants(r);for(var q=0,s=m.length;q<s;q++){var t=m[q];t.hidden=false;c.removeClass(t.getThEl(),d.CLASS_HIDDEN);var k=t.getKeyIndex();if(k!==null){this._restoreMinWidth(r);for(var p=0;p<n;p++){c.removeClass(o[p].cells[k],d.CLASS_HIDDEN);}}this.fireEvent("columnShowEvent",{column:t});}this._clearTrTemplateEl();}else{}},removeColumn:function(p){if(!(p instanceof YAHOO.widget.Column)){p=this.getColumn(p);}if(p){var m=p.getTreeIndex();if(m!==null){var o,r,q=p.getKeyIndex();if(q===null){var u=[];var j=this._oColumnSet.getDescendants(p);for(o=0,r=j.length;o<r;o++){var s=j[o].getKeyIndex();if(s!==null){u[u.length]=s;}}if(u.length>0){q=u;}}else{q=[q];}if(q!==null){q.sort(function(v,i){return YAHOO.util.Sort.compare(v,i);});this._destroyTheadEl();var k=this._oColumnSet.getDefinitions();p=k.splice(m,1)[0];this._initColumnSet(k);this._initTheadEl();for(o=q.length-1;o>-1;o--){this._removeColgroupColEl(q[o]);}var t=this._elTbody.rows;if(t.length>0){var n=this.get("renderLoopSize"),l=t.length;
this._oChainRender.add({method:function(y){if((this instanceof d)&&this._sId){var x=y.nCurrentRow,v=n>0?Math.min(x+n,t.length):t.length,z=y.aIndexes,w;for(;x<v;++x){for(w=z.length-1;w>-1;w--){t[x].removeChild(t[x].childNodes[z[w]]);}}y.nCurrentRow=x;}},iterations:(n>0)?Math.ceil(l/n):1,argument:{nCurrentRow:0,aIndexes:q},scope:this,timeout:(n>0)?0:-1});this._runRenderChain();}this.fireEvent("columnRemoveEvent",{column:p});return p;}}}},insertColumn:function(r,s){if(r instanceof YAHOO.widget.Column){r=r.getDefinition();}else{if(r.constructor!==Object){return;}}var x=this._oColumnSet;if(!h.isValue(s)||!h.isNumber(s)){s=x.tree[0].length;}this._destroyTheadEl();var z=this._oColumnSet.getDefinitions();z.splice(s,0,r);this._initColumnSet(z);this._initTheadEl();x=this._oColumnSet;var n=x.tree[0][s];var p,t,w=[];var l=x.getDescendants(n);for(p=0,t=l.length;p<t;p++){var u=l[p].getKeyIndex();if(u!==null){w[w.length]=u;}}if(w.length>0){var y=w.sort(function(A,i){return YAHOO.util.Sort.compare(A,i);})[0];for(p=w.length-1;p>-1;p--){this._insertColgroupColEl(w[p]);}var v=this._elTbody.rows;if(v.length>0){var o=this.get("renderLoopSize"),m=v.length;var k=[],q;for(p=0,t=w.length;p<t;p++){var j=w[p];q=this._getTrTemplateEl().childNodes[p].cloneNode(true);q=this._formatTdEl(this._oColumnSet.keys[j],q,j,(j===this._oColumnSet.keys.length-1));k[j]=q;}this._oChainRender.add({method:function(D){if((this instanceof d)&&this._sId){var C=D.nCurrentRow,B,F=D.descKeyIndexes,A=o>0?Math.min(C+o,v.length):v.length,E;for(;C<A;++C){E=v[C].childNodes[y]||null;for(B=F.length-1;B>-1;B--){v[C].insertBefore(D.aTdTemplates[F[B]].cloneNode(true),E);}}D.nCurrentRow=C;}},iterations:(o>0)?Math.ceil(m/o):1,argument:{nCurrentRow:0,aTdTemplates:k,descKeyIndexes:w},scope:this,timeout:(o>0)?0:-1});this._runRenderChain();}this.fireEvent("columnInsertEvent",{column:r,index:s});return n;}},reorderColumn:function(q,r){if(!(q instanceof YAHOO.widget.Column)){q=this.getColumn(q);}if(q&&YAHOO.lang.isNumber(r)){var z=q.getTreeIndex();if((z!==null)&&(z!==r)){var p,s,l=q.getKeyIndex(),k,v=[],t;if(l===null){k=this._oColumnSet.getDescendants(q);for(p=0,s=k.length;p<s;p++){t=k[p].getKeyIndex();if(t!==null){v[v.length]=t;}}if(v.length>0){l=v;}}else{l=[l];}if(l!==null){l.sort(function(A,i){return YAHOO.util.Sort.compare(A,i);});this._destroyTheadEl();var w=this._oColumnSet.getDefinitions();var j=w.splice(z,1)[0];w.splice(r,0,j);this._initColumnSet(w);this._initTheadEl();var n=this._oColumnSet.tree[0][r];var y=n.getKeyIndex();if(y===null){v=[];k=this._oColumnSet.getDescendants(n);for(p=0,s=k.length;p<s;p++){t=k[p].getKeyIndex();if(t!==null){v[v.length]=t;}}if(v.length>0){y=v;}}else{y=[y];}var x=y.sort(function(A,i){return YAHOO.util.Sort.compare(A,i);})[0];this._reorderColgroupColEl(l,x);var u=this._elTbody.rows;if(u.length>0){var o=this.get("renderLoopSize"),m=u.length;this._oChainRender.add({method:function(D){if((this instanceof d)&&this._sId){var C=D.nCurrentRow,B,F,E,A=o>0?Math.min(C+o,u.length):u.length,H=D.aIndexes,G;for(;C<A;++C){F=[];G=u[C];for(B=H.length-1;B>-1;B--){F.push(G.removeChild(G.childNodes[H[B]]));}E=G.childNodes[x]||null;for(B=F.length-1;B>-1;B--){G.insertBefore(F[B],E);}}D.nCurrentRow=C;}},iterations:(o>0)?Math.ceil(m/o):1,argument:{nCurrentRow:0,aIndexes:l},scope:this,timeout:(o>0)?0:-1});this._runRenderChain();}this.fireEvent("columnReorderEvent",{column:n,oldIndex:z});return n;}}}},selectColumn:function(k){k=this.getColumn(k);if(k&&!k.selected){if(k.getKeyIndex()!==null){k.selected=true;var l=k.getThEl();c.addClass(l,d.CLASS_SELECTED);var j=this.getTbodyEl().rows;var i=this._oChainRender;i.add({method:function(m){if((this instanceof d)&&this._sId&&j[m.rowIndex]&&j[m.rowIndex].cells[m.cellIndex]){c.addClass(j[m.rowIndex].cells[m.cellIndex],d.CLASS_SELECTED);}m.rowIndex++;},scope:this,iterations:j.length,argument:{rowIndex:0,cellIndex:k.getKeyIndex()}});this._clearTrTemplateEl();this._elTbody.style.display="none";this._runRenderChain();this._elTbody.style.display="";this.fireEvent("columnSelectEvent",{column:k});}else{}}},unselectColumn:function(k){k=this.getColumn(k);if(k&&k.selected){if(k.getKeyIndex()!==null){k.selected=false;var l=k.getThEl();c.removeClass(l,d.CLASS_SELECTED);var j=this.getTbodyEl().rows;var i=this._oChainRender;i.add({method:function(m){if((this instanceof d)&&this._sId&&j[m.rowIndex]&&j[m.rowIndex].cells[m.cellIndex]){c.removeClass(j[m.rowIndex].cells[m.cellIndex],d.CLASS_SELECTED);}m.rowIndex++;},scope:this,iterations:j.length,argument:{rowIndex:0,cellIndex:k.getKeyIndex()}});this._clearTrTemplateEl();this._elTbody.style.display="none";this._runRenderChain();this._elTbody.style.display="";this.fireEvent("columnUnselectEvent",{column:k});}else{}}},getSelectedColumns:function(n){var k=[];var l=this._oColumnSet.keys;for(var m=0,j=l.length;m<j;m++){if(l[m].selected){k[k.length]=l[m];}}return k;},highlightColumn:function(i){var l=this.getColumn(i);if(l&&(l.getKeyIndex()!==null)){var m=l.getThEl();c.addClass(m,d.CLASS_HIGHLIGHTED);var k=this.getTbodyEl().rows;var j=this._oChainRender;j.add({method:function(n){if((this instanceof d)&&this._sId&&k[n.rowIndex]&&k[n.rowIndex].cells[n.cellIndex]){c.addClass(k[n.rowIndex].cells[n.cellIndex],d.CLASS_HIGHLIGHTED);}n.rowIndex++;},scope:this,iterations:k.length,argument:{rowIndex:0,cellIndex:l.getKeyIndex()},timeout:-1});this._elTbody.style.display="none";this._runRenderChain();this._elTbody.style.display="";this.fireEvent("columnHighlightEvent",{column:l});}else{}},unhighlightColumn:function(i){var l=this.getColumn(i);if(l&&(l.getKeyIndex()!==null)){var m=l.getThEl();c.removeClass(m,d.CLASS_HIGHLIGHTED);var k=this.getTbodyEl().rows;var j=this._oChainRender;j.add({method:function(n){if((this instanceof d)&&this._sId&&k[n.rowIndex]&&k[n.rowIndex].cells[n.cellIndex]){c.removeClass(k[n.rowIndex].cells[n.cellIndex],d.CLASS_HIGHLIGHTED);}n.rowIndex++;},scope:this,iterations:k.length,argument:{rowIndex:0,cellIndex:l.getKeyIndex()},timeout:-1});this._elTbody.style.display="none";
this._runRenderChain();this._elTbody.style.display="";this.fireEvent("columnUnhighlightEvent",{column:l});}else{}},addRow:function(o,k){if(h.isNumber(k)&&(k<0||k>this._oRecordSet.getLength())){return;}if(o&&h.isObject(o)){var m=this._oRecordSet.addRecord(o,k);if(m){var i;var j=this.get("paginator");if(j){var n=j.get("totalRecords");if(n!==e.Paginator.VALUE_UNLIMITED){j.set("totalRecords",n+1);}i=this.getRecordIndex(m);var l=(j.getPageRecords())[1];if(i<=l){this.render();}this.fireEvent("rowAddEvent",{record:m});return;}else{i=this.getRecordIndex(m);if(h.isNumber(i)){this._oChainRender.add({method:function(r){if((this instanceof d)&&this._sId){var s=r.record;var p=r.recIndex;var t=this._addTrEl(s);if(t){var q=(this._elTbody.rows[p])?this._elTbody.rows[p]:null;this._elTbody.insertBefore(t,q);if(p===0){this._setFirstRow();}if(q===null){this._setLastRow();}this._setRowStripes();this.hideTableMessage();this.fireEvent("rowAddEvent",{record:s});}}},argument:{record:m,recIndex:i},scope:this,timeout:(this.get("renderLoopSize")>0)?0:-1});this._runRenderChain();return;}}}}},addRows:function(k,n){if(h.isNumber(n)&&(n<0||n>this._oRecordSet.getLength())){return;}if(h.isArray(k)){var o=this._oRecordSet.addRecords(k,n);if(o){var s=this.getRecordIndex(o[0]);var r=this.get("paginator");if(r){var p=r.get("totalRecords");if(p!==e.Paginator.VALUE_UNLIMITED){r.set("totalRecords",p+o.length);}var q=(r.getPageRecords())[1];if(s<=q){this.render();}this.fireEvent("rowsAddEvent",{records:o});return;}else{var m=this.get("renderLoopSize");var j=s+k.length;var i=(j-s);var l=(s>=this._elTbody.rows.length);this._oChainRender.add({method:function(x){if((this instanceof d)&&this._sId){var y=x.aRecords,w=x.nCurrentRow,v=x.nCurrentRecord,t=m>0?Math.min(w+m,j):j,z=document.createDocumentFragment(),u=(this._elTbody.rows[w])?this._elTbody.rows[w]:null;for(;w<t;w++,v++){z.appendChild(this._addTrEl(y[v]));}this._elTbody.insertBefore(z,u);x.nCurrentRow=w;x.nCurrentRecord=v;}},iterations:(m>0)?Math.ceil(j/m):1,argument:{nCurrentRow:s,nCurrentRecord:0,aRecords:o},scope:this,timeout:(m>0)?0:-1});this._oChainRender.add({method:function(u){var t=u.recIndex;if(t===0){this._setFirstRow();}if(u.isLast){this._setLastRow();}this._setRowStripes();this.fireEvent("rowsAddEvent",{records:o});},argument:{recIndex:s,isLast:l},scope:this,timeout:-1});this._runRenderChain();this.hideTableMessage();return;}}}},updateRow:function(u,k){var r=u;if(!h.isNumber(r)){r=this.getRecordIndex(u);}if(h.isNumber(r)&&(r>=0)){var s=this._oRecordSet,q=s.getRecord(r);if(q){var o=this._oRecordSet.setRecord(k,r),j=this.getTrEl(q),p=q?q.getData():null;if(o){var t=this._aSelections||[],n=0,l=q.getId(),m=o.getId();for(;n<t.length;n++){if((t[n]===l)){t[n]=m;}else{if(t[n].recordId===l){t[n].recordId=m;}}}if(this._oAnchorRecord&&this._oAnchorRecord.getId()===l){this._oAnchorRecord=o;}if(this._oAnchorCell&&this._oAnchorCell.record.getId()===l){this._oAnchorCell.record=o;}this._oChainRender.add({method:function(){if((this instanceof d)&&this._sId){var v=this.get("paginator");if(v){var i=(v.getPageRecords())[0],w=(v.getPageRecords())[1];if((r>=i)||(r<=w)){this.render();}}else{if(j){this._updateTrEl(j,o);}else{this.getTbodyEl().appendChild(this._addTrEl(o));}}this.fireEvent("rowUpdateEvent",{record:o,oldData:p});}},scope:this,timeout:(this.get("renderLoopSize")>0)?0:-1});this._runRenderChain();return;}}}return;},updateRows:function(A,m){if(h.isArray(m)){var s=A,l=this._oRecordSet,o=l.getLength();if(!h.isNumber(A)){s=this.getRecordIndex(A);}if(h.isNumber(s)&&(s>=0)&&(s<l.getLength())){var E=s+m.length,B=l.getRecords(s,m.length),G=l.setRecords(m,s);if(G){var t=this._aSelections||[],D=0,C,u,x,z,y=this._oAnchorRecord?this._oAnchorRecord.getId():null,n=this._oAnchorCell?this._oAnchorCell.record.getId():null;for(;D<B.length;D++){z=B[D].getId();u=G[D];x=u.getId();for(C=0;C<t.length;C++){if((t[C]===z)){t[C]=x;}else{if(t[C].recordId===z){t[C].recordId=x;}}}if(y&&y===z){this._oAnchorRecord=u;}if(n&&n===z){this._oAnchorCell.record=u;}}var F=this.get("paginator");if(F){var r=(F.getPageRecords())[0],p=(F.getPageRecords())[1];if((s>=r)||(E<=p)){this.render();}this.fireEvent("rowsAddEvent",{newRecords:G,oldRecords:B});return;}else{var k=this.get("renderLoopSize"),v=m.length,w=(E>=o),q=(E>o);this._oChainRender.add({method:function(K){if((this instanceof d)&&this._sId){var L=K.aRecords,J=K.nCurrentRow,I=K.nDataPointer,H=k>0?Math.min(J+k,s+L.length):s+L.length;for(;J<H;J++,I++){if(q&&(J>=o)){this._elTbody.appendChild(this._addTrEl(L[I]));}else{this._updateTrEl(this._elTbody.rows[J],L[I]);}}K.nCurrentRow=J;K.nDataPointer=I;}},iterations:(k>0)?Math.ceil(v/k):1,argument:{nCurrentRow:s,aRecords:G,nDataPointer:0,isAdding:q},scope:this,timeout:(k>0)?0:-1});this._oChainRender.add({method:function(j){var i=j.recIndex;if(i===0){this._setFirstRow();}if(j.isLast){this._setLastRow();}this._setRowStripes();this.fireEvent("rowsAddEvent",{newRecords:G,oldRecords:B});},argument:{recIndex:s,isLast:w},scope:this,timeout:-1});this._runRenderChain();this.hideTableMessage();return;}}}}},deleteRow:function(s){var k=(h.isNumber(s))?s:this.getRecordIndex(s);if(h.isNumber(k)){var t=this.getRecord(k);if(t){var m=this.getTrIndex(k);var p=t.getId();var r=this._aSelections||[];for(var n=r.length-1;n>-1;n--){if((h.isString(r[n])&&(r[n]===p))||(h.isObject(r[n])&&(r[n].recordId===p))){r.splice(n,1);}}var l=this._oRecordSet.deleteRecord(k);if(l){var q=this.get("paginator");if(q){var o=q.get("totalRecords"),i=q.getPageRecords();if(o!==e.Paginator.VALUE_UNLIMITED){q.set("totalRecords",o-1);}if(!i||k<=i[1]){this.render();}this._oChainRender.add({method:function(){if((this instanceof d)&&this._sId){this.fireEvent("rowDeleteEvent",{recordIndex:k,oldData:l,trElIndex:m});}},scope:this,timeout:(this.get("renderLoopSize")>0)?0:-1});this._runRenderChain();}else{if(h.isNumber(m)){this._oChainRender.add({method:function(){if((this instanceof d)&&this._sId){var j=(k===this._oRecordSet.getLength());this._deleteTrEl(m);if(this._elTbody.rows.length>0){if(m===0){this._setFirstRow();
}if(j){this._setLastRow();}if(m!=this._elTbody.rows.length){this._setRowStripes(m);}}this.fireEvent("rowDeleteEvent",{recordIndex:k,oldData:l,trElIndex:m});}},scope:this,timeout:(this.get("renderLoopSize")>0)?0:-1});this._runRenderChain();return;}}}}}return null;},deleteRows:function(y,s){var l=(h.isNumber(y))?y:this.getRecordIndex(y);if(h.isNumber(l)){var z=this.getRecord(l);if(z){var m=this.getTrIndex(l);var u=z.getId();var x=this._aSelections||[];for(var q=x.length-1;q>-1;q--){if((h.isString(x[q])&&(x[q]===u))||(h.isObject(x[q])&&(x[q].recordId===u))){x.splice(q,1);}}var n=l;var w=l;if(s&&h.isNumber(s)){n=(s>0)?l+s-1:l;w=(s>0)?l:l+s+1;s=(s>0)?s:s*-1;if(w<0){w=0;s=n-w+1;}}else{s=1;}var p=this._oRecordSet.deleteRecords(w,s);if(p){var v=this.get("paginator"),r=this.get("renderLoopSize");if(v){var t=v.get("totalRecords"),k=v.getPageRecords();if(t!==e.Paginator.VALUE_UNLIMITED){v.set("totalRecords",t-p.length);}if(!k||w<=k[1]){this.render();}this._oChainRender.add({method:function(j){if((this instanceof d)&&this._sId){this.fireEvent("rowsDeleteEvent",{recordIndex:w,oldData:p,count:s});}},scope:this,timeout:(r>0)?0:-1});this._runRenderChain();return;}else{if(h.isNumber(m)){var o=w;var i=s;this._oChainRender.add({method:function(B){if((this instanceof d)&&this._sId){var A=B.nCurrentRow,j=(r>0)?(Math.max(A-r,o)-1):o-1;for(;A>j;--A){this._deleteTrEl(A);}B.nCurrentRow=A;}},iterations:(r>0)?Math.ceil(s/r):1,argument:{nCurrentRow:n},scope:this,timeout:(r>0)?0:-1});this._oChainRender.add({method:function(){if(this._elTbody.rows.length>0){this._setFirstRow();this._setLastRow();this._setRowStripes();}this.fireEvent("rowsDeleteEvent",{recordIndex:w,oldData:p,count:s});},scope:this,timeout:-1});this._runRenderChain();return;}}}}}return null;},formatCell:function(j,l,m){if(!l){l=this.getRecord(j);}if(!m){m=this.getColumn(this.getCellIndex(j.parentNode));}if(l&&m){var i=m.field;var n=l.getData(i);var k=typeof m.formatter==="function"?m.formatter:d.Formatter[m.formatter+""]||d.Formatter.defaultFormatter;if(k){k.call(this,j,l,m,n);}else{j.innerHTML=n;}this.fireEvent("cellFormatEvent",{record:l,column:m,key:m.key,el:j});}else{}},updateCell:function(k,m,o,j){m=(m instanceof YAHOO.widget.Column)?m:this.getColumn(m);if(m&&m.getField()&&(k instanceof YAHOO.widget.Record)){var l=m.getField(),n=k.getData(l);this._oRecordSet.updateRecordValue(k,l,o);var i=this.getTdEl({record:k,column:m});if(i){this._oChainRender.add({method:function(){if((this instanceof d)&&this._sId){this.formatCell(i.firstChild,k,m);this.fireEvent("cellUpdateEvent",{record:k,column:m,oldData:n});}},scope:this,timeout:(this.get("renderLoopSize")>0)?0:-1});if(!j){this._runRenderChain();}}else{this.fireEvent("cellUpdateEvent",{record:k,column:m,oldData:n});}}},_updatePaginator:function(j){var i=this.get("paginator");if(i&&j!==i){i.unsubscribe("changeRequest",this.onPaginatorChangeRequest,this,true);}if(j){j.subscribe("changeRequest",this.onPaginatorChangeRequest,this,true);}},_handlePaginatorChange:function(l){if(l.prevValue===l.newValue){return;}var n=l.newValue,m=l.prevValue,k=this._defaultPaginatorContainers();if(m){if(m.getContainerNodes()[0]==k[0]){m.set("containers",[]);}m.destroy();if(k[0]){if(n&&!n.getContainerNodes().length){n.set("containers",k);}else{for(var j=k.length-1;j>=0;--j){if(k[j]){k[j].parentNode.removeChild(k[j]);}}}}}if(!this._bInit){this.render();}if(n){this.renderPaginator();}},_defaultPaginatorContainers:function(l){var j=this._sId+"-paginator0",k=this._sId+"-paginator1",i=c.get(j),m=c.get(k);if(l&&(!i||!m)){if(!i){i=document.createElement("div");i.id=j;c.addClass(i,d.CLASS_PAGINATOR);this._elContainer.insertBefore(i,this._elContainer.firstChild);}if(!m){m=document.createElement("div");m.id=k;c.addClass(m,d.CLASS_PAGINATOR);this._elContainer.appendChild(m);}}return[i,m];},_destroyPaginator:function(){var i=this.get("paginator");if(i){i.destroy();}},renderPaginator:function(){var i=this.get("paginator");if(!i){return;}if(!i.getContainerNodes().length){i.set("containers",this._defaultPaginatorContainers(true));}i.render();},doBeforePaginatorChange:function(i){this.showTableMessage(this.get("MSG_LOADING"),d.CLASS_LOADING);return true;},onPaginatorChangeRequest:function(l){var j=this.doBeforePaginatorChange(l);if(j){if(this.get("dynamicData")){var i=this.getState();i.pagination=l;var k=this.get("generateRequest")(i,this);this.unselectAllRows();this.unselectAllCells();var m={success:this.onDataReturnSetRows,failure:this.onDataReturnSetRows,argument:i,scope:this};this._oDataSource.sendRequest(k,m);}else{l.paginator.setStartIndex(l.recordOffset,true);l.paginator.setRowsPerPage(l.rowsPerPage,true);this.render();}}else{}},_elLastHighlightedTd:null,_aSelections:null,_oAnchorRecord:null,_oAnchorCell:null,_unselectAllTrEls:function(){var i=c.getElementsByClassName(d.CLASS_SELECTED,"tr",this._elTbody);c.removeClass(i,d.CLASS_SELECTED);},_getSelectionTrigger:function(){var l=this.get("selectionMode");var k={};var o,i,j,n,m;if((l=="cellblock")||(l=="cellrange")||(l=="singlecell")){o=this.getLastSelectedCell();if(!o){return null;}else{i=this.getRecord(o.recordId);j=this.getRecordIndex(i);n=this.getTrEl(i);m=this.getTrIndex(n);if(m===null){return null;}else{k.record=i;k.recordIndex=j;k.el=this.getTdEl(o);k.trIndex=m;k.column=this.getColumn(o.columnKey);k.colKeyIndex=k.column.getKeyIndex();k.cell=o;return k;}}}else{i=this.getLastSelectedRecord();if(!i){return null;}else{i=this.getRecord(i);j=this.getRecordIndex(i);n=this.getTrEl(i);m=this.getTrIndex(n);if(m===null){return null;}else{k.record=i;k.recordIndex=j;k.el=n;k.trIndex=m;return k;}}}},_getSelectionAnchor:function(k){var j=this.get("selectionMode");var l={};var m,o,i;if((j=="cellblock")||(j=="cellrange")||(j=="singlecell")){var n=this._oAnchorCell;if(!n){if(k){n=this._oAnchorCell=k.cell;}else{return null;}}m=this._oAnchorCell.record;o=this._oRecordSet.getRecordIndex(m);i=this.getTrIndex(m);if(i===null){if(o<this.getRecordIndex(this.getFirstTrEl())){i=0;}else{i=this.getRecordIndex(this.getLastTrEl());
}}l.record=m;l.recordIndex=o;l.trIndex=i;l.column=this._oAnchorCell.column;l.colKeyIndex=l.column.getKeyIndex();l.cell=n;return l;}else{m=this._oAnchorRecord;if(!m){if(k){m=this._oAnchorRecord=k.record;}else{return null;}}o=this.getRecordIndex(m);i=this.getTrIndex(m);if(i===null){if(o<this.getRecordIndex(this.getFirstTrEl())){i=0;}else{i=this.getRecordIndex(this.getLastTrEl());}}l.record=m;l.recordIndex=o;l.trIndex=i;return l;}},_handleStandardSelectionByMouse:function(k){var j=k.target;var m=this.getTrEl(j);if(m){var p=k.event;var s=p.shiftKey;var o=p.ctrlKey||((navigator.userAgent.toLowerCase().indexOf("mac")!=-1)&&p.metaKey);var r=this.getRecord(m);var l=this._oRecordSet.getRecordIndex(r);var q=this._getSelectionAnchor();var n;if(s&&o){if(q){if(this.isSelected(q.record)){if(q.recordIndex<l){for(n=q.recordIndex+1;n<=l;n++){if(!this.isSelected(n)){this.selectRow(n);}}}else{for(n=q.recordIndex-1;n>=l;n--){if(!this.isSelected(n)){this.selectRow(n);}}}}else{if(q.recordIndex<l){for(n=q.recordIndex+1;n<=l-1;n++){if(this.isSelected(n)){this.unselectRow(n);}}}else{for(n=l+1;n<=q.recordIndex-1;n++){if(this.isSelected(n)){this.unselectRow(n);}}}this.selectRow(r);}}else{this._oAnchorRecord=r;if(this.isSelected(r)){this.unselectRow(r);}else{this.selectRow(r);}}}else{if(s){this.unselectAllRows();if(q){if(q.recordIndex<l){for(n=q.recordIndex;n<=l;n++){this.selectRow(n);}}else{for(n=q.recordIndex;n>=l;n--){this.selectRow(n);}}}else{this._oAnchorRecord=r;this.selectRow(r);}}else{if(o){this._oAnchorRecord=r;if(this.isSelected(r)){this.unselectRow(r);}else{this.selectRow(r);}}else{this._handleSingleSelectionByMouse(k);return;}}}}},_handleStandardSelectionByKey:function(m){var i=g.getCharCode(m);if((i==38)||(i==40)){var k=m.shiftKey;var j=this._getSelectionTrigger();if(!j){return null;}g.stopEvent(m);var l=this._getSelectionAnchor(j);if(k){if((i==40)&&(l.recordIndex<=j.trIndex)){this.selectRow(this.getNextTrEl(j.el));}else{if((i==38)&&(l.recordIndex>=j.trIndex)){this.selectRow(this.getPreviousTrEl(j.el));}else{this.unselectRow(j.el);}}}else{this._handleSingleSelectionByKey(m);}}},_handleSingleSelectionByMouse:function(k){var l=k.target;var j=this.getTrEl(l);if(j){var i=this.getRecord(j);this._oAnchorRecord=i;this.unselectAllRows();this.selectRow(i);}},_handleSingleSelectionByKey:function(l){var i=g.getCharCode(l);if((i==38)||(i==40)){var j=this._getSelectionTrigger();if(!j){return null;}g.stopEvent(l);var k;if(i==38){k=this.getPreviousTrEl(j.el);if(k===null){k=this.getFirstTrEl();}}else{if(i==40){k=this.getNextTrEl(j.el);if(k===null){k=this.getLastTrEl();}}}this.unselectAllRows();this.selectRow(k);this._oAnchorRecord=this.getRecord(k);}},_handleCellBlockSelectionByMouse:function(A){var B=A.target;var l=this.getTdEl(B);if(l){var z=A.event;var q=z.shiftKey;var m=z.ctrlKey||((navigator.userAgent.toLowerCase().indexOf("mac")!=-1)&&z.metaKey);var s=this.getTrEl(l);var r=this.getTrIndex(s);var v=this.getColumn(l);var w=v.getKeyIndex();var u=this.getRecord(s);var D=this._oRecordSet.getRecordIndex(u);var p={record:u,column:v};var t=this._getSelectionAnchor();var o=this.getTbodyEl().rows;var n,k,C,y,x;if(q&&m){if(t){if(this.isSelected(t.cell)){if(t.recordIndex===D){if(t.colKeyIndex<w){for(y=t.colKeyIndex+1;y<=w;y++){this.selectCell(s.cells[y]);}}else{if(w<t.colKeyIndex){for(y=w;y<t.colKeyIndex;y++){this.selectCell(s.cells[y]);}}}}else{if(t.recordIndex<D){n=Math.min(t.colKeyIndex,w);k=Math.max(t.colKeyIndex,w);for(y=t.trIndex;y<=r;y++){for(x=n;x<=k;x++){this.selectCell(o[y].cells[x]);}}}else{n=Math.min(t.trIndex,w);k=Math.max(t.trIndex,w);for(y=t.trIndex;y>=r;y--){for(x=k;x>=n;x--){this.selectCell(o[y].cells[x]);}}}}}else{if(t.recordIndex===D){if(t.colKeyIndex<w){for(y=t.colKeyIndex+1;y<w;y++){this.unselectCell(s.cells[y]);}}else{if(w<t.colKeyIndex){for(y=w+1;y<t.colKeyIndex;y++){this.unselectCell(s.cells[y]);}}}}if(t.recordIndex<D){for(y=t.trIndex;y<=r;y++){C=o[y];for(x=0;x<C.cells.length;x++){if(C.sectionRowIndex===t.trIndex){if(x>t.colKeyIndex){this.unselectCell(C.cells[x]);}}else{if(C.sectionRowIndex===r){if(x<w){this.unselectCell(C.cells[x]);}}else{this.unselectCell(C.cells[x]);}}}}}else{for(y=r;y<=t.trIndex;y++){C=o[y];for(x=0;x<C.cells.length;x++){if(C.sectionRowIndex==r){if(x>w){this.unselectCell(C.cells[x]);}}else{if(C.sectionRowIndex==t.trIndex){if(x<t.colKeyIndex){this.unselectCell(C.cells[x]);}}else{this.unselectCell(C.cells[x]);}}}}}this.selectCell(l);}}else{this._oAnchorCell=p;if(this.isSelected(p)){this.unselectCell(p);}else{this.selectCell(p);}}}else{if(q){this.unselectAllCells();if(t){if(t.recordIndex===D){if(t.colKeyIndex<w){for(y=t.colKeyIndex;y<=w;y++){this.selectCell(s.cells[y]);}}else{if(w<t.colKeyIndex){for(y=w;y<=t.colKeyIndex;y++){this.selectCell(s.cells[y]);}}}}else{if(t.recordIndex<D){n=Math.min(t.colKeyIndex,w);k=Math.max(t.colKeyIndex,w);for(y=t.trIndex;y<=r;y++){for(x=n;x<=k;x++){this.selectCell(o[y].cells[x]);}}}else{n=Math.min(t.colKeyIndex,w);k=Math.max(t.colKeyIndex,w);for(y=r;y<=t.trIndex;y++){for(x=n;x<=k;x++){this.selectCell(o[y].cells[x]);}}}}}else{this._oAnchorCell=p;this.selectCell(p);}}else{if(m){this._oAnchorCell=p;if(this.isSelected(p)){this.unselectCell(p);}else{this.selectCell(p);}}else{this._handleSingleCellSelectionByMouse(A);}}}}},_handleCellBlockSelectionByKey:function(o){var j=g.getCharCode(o);var t=o.shiftKey;if((j==9)||!t){this._handleSingleCellSelectionByKey(o);return;}if((j>36)&&(j<41)){var u=this._getSelectionTrigger();if(!u){return null;}g.stopEvent(o);var r=this._getSelectionAnchor(u);var k,s,l,q,m;var p=this.getTbodyEl().rows;var n=u.el.parentNode;if(j==40){if(r.recordIndex<=u.recordIndex){m=this.getNextTrEl(u.el);if(m){s=r.colKeyIndex;l=u.colKeyIndex;if(s>l){for(k=s;k>=l;k--){q=m.cells[k];this.selectCell(q);}}else{for(k=s;k<=l;k++){q=m.cells[k];this.selectCell(q);}}}}else{s=Math.min(r.colKeyIndex,u.colKeyIndex);l=Math.max(r.colKeyIndex,u.colKeyIndex);for(k=s;k<=l;k++){this.unselectCell(n.cells[k]);}}}else{if(j==38){if(r.recordIndex>=u.recordIndex){m=this.getPreviousTrEl(u.el);
if(m){s=r.colKeyIndex;l=u.colKeyIndex;if(s>l){for(k=s;k>=l;k--){q=m.cells[k];this.selectCell(q);}}else{for(k=s;k<=l;k++){q=m.cells[k];this.selectCell(q);}}}}else{s=Math.min(r.colKeyIndex,u.colKeyIndex);l=Math.max(r.colKeyIndex,u.colKeyIndex);for(k=s;k<=l;k++){this.unselectCell(n.cells[k]);}}}else{if(j==39){if(r.colKeyIndex<=u.colKeyIndex){if(u.colKeyIndex<n.cells.length-1){s=r.trIndex;l=u.trIndex;if(s>l){for(k=s;k>=l;k--){q=p[k].cells[u.colKeyIndex+1];this.selectCell(q);}}else{for(k=s;k<=l;k++){q=p[k].cells[u.colKeyIndex+1];this.selectCell(q);}}}}else{s=Math.min(r.trIndex,u.trIndex);l=Math.max(r.trIndex,u.trIndex);for(k=s;k<=l;k++){this.unselectCell(p[k].cells[u.colKeyIndex]);}}}else{if(j==37){if(r.colKeyIndex>=u.colKeyIndex){if(u.colKeyIndex>0){s=r.trIndex;l=u.trIndex;if(s>l){for(k=s;k>=l;k--){q=p[k].cells[u.colKeyIndex-1];this.selectCell(q);}}else{for(k=s;k<=l;k++){q=p[k].cells[u.colKeyIndex-1];this.selectCell(q);}}}}else{s=Math.min(r.trIndex,u.trIndex);l=Math.max(r.trIndex,u.trIndex);for(k=s;k<=l;k++){this.unselectCell(p[k].cells[u.colKeyIndex]);}}}}}}}},_handleCellRangeSelectionByMouse:function(y){var z=y.target;var k=this.getTdEl(z);if(k){var x=y.event;var o=x.shiftKey;var l=x.ctrlKey||((navigator.userAgent.toLowerCase().indexOf("mac")!=-1)&&x.metaKey);var q=this.getTrEl(k);var p=this.getTrIndex(q);var t=this.getColumn(k);var u=t.getKeyIndex();var s=this.getRecord(q);var B=this._oRecordSet.getRecordIndex(s);var n={record:s,column:t};var r=this._getSelectionAnchor();var m=this.getTbodyEl().rows;var A,w,v;if(o&&l){if(r){if(this.isSelected(r.cell)){if(r.recordIndex===B){if(r.colKeyIndex<u){for(w=r.colKeyIndex+1;w<=u;w++){this.selectCell(q.cells[w]);}}else{if(u<r.colKeyIndex){for(w=u;w<r.colKeyIndex;w++){this.selectCell(q.cells[w]);}}}}else{if(r.recordIndex<B){for(w=r.colKeyIndex+1;w<q.cells.length;w++){this.selectCell(q.cells[w]);}for(w=r.trIndex+1;w<p;w++){for(v=0;v<m[w].cells.length;v++){this.selectCell(m[w].cells[v]);}}for(w=0;w<=u;w++){this.selectCell(q.cells[w]);}}else{for(w=u;w<q.cells.length;w++){this.selectCell(q.cells[w]);}for(w=p+1;w<r.trIndex;w++){for(v=0;v<m[w].cells.length;v++){this.selectCell(m[w].cells[v]);}}for(w=0;w<r.colKeyIndex;w++){this.selectCell(q.cells[w]);}}}}else{if(r.recordIndex===B){if(r.colKeyIndex<u){for(w=r.colKeyIndex+1;w<u;w++){this.unselectCell(q.cells[w]);}}else{if(u<r.colKeyIndex){for(w=u+1;w<r.colKeyIndex;w++){this.unselectCell(q.cells[w]);}}}}if(r.recordIndex<B){for(w=r.trIndex;w<=p;w++){A=m[w];for(v=0;v<A.cells.length;v++){if(A.sectionRowIndex===r.trIndex){if(v>r.colKeyIndex){this.unselectCell(A.cells[v]);}}else{if(A.sectionRowIndex===p){if(v<u){this.unselectCell(A.cells[v]);}}else{this.unselectCell(A.cells[v]);}}}}}else{for(w=p;w<=r.trIndex;w++){A=m[w];for(v=0;v<A.cells.length;v++){if(A.sectionRowIndex==p){if(v>u){this.unselectCell(A.cells[v]);}}else{if(A.sectionRowIndex==r.trIndex){if(v<r.colKeyIndex){this.unselectCell(A.cells[v]);}}else{this.unselectCell(A.cells[v]);}}}}}this.selectCell(k);}}else{this._oAnchorCell=n;if(this.isSelected(n)){this.unselectCell(n);}else{this.selectCell(n);}}}else{if(o){this.unselectAllCells();if(r){if(r.recordIndex===B){if(r.colKeyIndex<u){for(w=r.colKeyIndex;w<=u;w++){this.selectCell(q.cells[w]);}}else{if(u<r.colKeyIndex){for(w=u;w<=r.colKeyIndex;w++){this.selectCell(q.cells[w]);}}}}else{if(r.recordIndex<B){for(w=r.trIndex;w<=p;w++){A=m[w];for(v=0;v<A.cells.length;v++){if(A.sectionRowIndex==r.trIndex){if(v>=r.colKeyIndex){this.selectCell(A.cells[v]);}}else{if(A.sectionRowIndex==p){if(v<=u){this.selectCell(A.cells[v]);}}else{this.selectCell(A.cells[v]);}}}}}else{for(w=p;w<=r.trIndex;w++){A=m[w];for(v=0;v<A.cells.length;v++){if(A.sectionRowIndex==p){if(v>=u){this.selectCell(A.cells[v]);}}else{if(A.sectionRowIndex==r.trIndex){if(v<=r.colKeyIndex){this.selectCell(A.cells[v]);}}else{this.selectCell(A.cells[v]);}}}}}}}else{this._oAnchorCell=n;this.selectCell(n);}}else{if(l){this._oAnchorCell=n;if(this.isSelected(n)){this.unselectCell(n);}else{this.selectCell(n);}}else{this._handleSingleCellSelectionByMouse(y);}}}}},_handleCellRangeSelectionByKey:function(n){var j=g.getCharCode(n);var r=n.shiftKey;if((j==9)||!r){this._handleSingleCellSelectionByKey(n);return;}if((j>36)&&(j<41)){var s=this._getSelectionTrigger();if(!s){return null;}g.stopEvent(n);var q=this._getSelectionAnchor(s);var k,l,p;var o=this.getTbodyEl().rows;var m=s.el.parentNode;if(j==40){l=this.getNextTrEl(s.el);if(q.recordIndex<=s.recordIndex){for(k=s.colKeyIndex+1;k<m.cells.length;k++){p=m.cells[k];this.selectCell(p);}if(l){for(k=0;k<=s.colKeyIndex;k++){p=l.cells[k];this.selectCell(p);}}}else{for(k=s.colKeyIndex;k<m.cells.length;k++){this.unselectCell(m.cells[k]);}if(l){for(k=0;k<s.colKeyIndex;k++){this.unselectCell(l.cells[k]);}}}}else{if(j==38){l=this.getPreviousTrEl(s.el);if(q.recordIndex>=s.recordIndex){for(k=s.colKeyIndex-1;k>-1;k--){p=m.cells[k];this.selectCell(p);}if(l){for(k=m.cells.length-1;k>=s.colKeyIndex;k--){p=l.cells[k];this.selectCell(p);}}}else{for(k=s.colKeyIndex;k>-1;k--){this.unselectCell(m.cells[k]);}if(l){for(k=m.cells.length-1;k>s.colKeyIndex;k--){this.unselectCell(l.cells[k]);}}}}else{if(j==39){l=this.getNextTrEl(s.el);if(q.recordIndex<s.recordIndex){if(s.colKeyIndex<m.cells.length-1){p=m.cells[s.colKeyIndex+1];this.selectCell(p);}else{if(l){p=l.cells[0];this.selectCell(p);}}}else{if(q.recordIndex>s.recordIndex){this.unselectCell(m.cells[s.colKeyIndex]);if(s.colKeyIndex<m.cells.length-1){}else{}}else{if(q.colKeyIndex<=s.colKeyIndex){if(s.colKeyIndex<m.cells.length-1){p=m.cells[s.colKeyIndex+1];this.selectCell(p);}else{if(s.trIndex<o.length-1){p=l.cells[0];this.selectCell(p);}}}else{this.unselectCell(m.cells[s.colKeyIndex]);}}}}else{if(j==37){l=this.getPreviousTrEl(s.el);if(q.recordIndex<s.recordIndex){this.unselectCell(m.cells[s.colKeyIndex]);if(s.colKeyIndex>0){}else{}}else{if(q.recordIndex>s.recordIndex){if(s.colKeyIndex>0){p=m.cells[s.colKeyIndex-1];this.selectCell(p);}else{if(s.trIndex>0){p=l.cells[l.cells.length-1];this.selectCell(p);
}}}else{if(q.colKeyIndex>=s.colKeyIndex){if(s.colKeyIndex>0){p=m.cells[s.colKeyIndex-1];this.selectCell(p);}else{if(s.trIndex>0){p=l.cells[l.cells.length-1];this.selectCell(p);}}}else{this.unselectCell(m.cells[s.colKeyIndex]);if(s.colKeyIndex>0){}else{}}}}}}}}}},_handleSingleCellSelectionByMouse:function(n){var o=n.target;var k=this.getTdEl(o);if(k){var j=this.getTrEl(k);var i=this.getRecord(j);var m=this.getColumn(k);var l={record:i,column:m};this._oAnchorCell=l;this.unselectAllCells();this.selectCell(l);}},_handleSingleCellSelectionByKey:function(m){var i=g.getCharCode(m);if((i==9)||((i>36)&&(i<41))){var k=m.shiftKey;var j=this._getSelectionTrigger();if(!j){return null;}var l;if(i==40){l=this.getBelowTdEl(j.el);if(l===null){l=j.el;}}else{if(i==38){l=this.getAboveTdEl(j.el);if(l===null){l=j.el;}}else{if((i==39)||(!k&&(i==9))){l=this.getNextTdEl(j.el);if(l===null){return;}}else{if((i==37)||(k&&(i==9))){l=this.getPreviousTdEl(j.el);if(l===null){return;}}}}}g.stopEvent(m);this.unselectAllCells();this.selectCell(l);this._oAnchorCell={record:this.getRecord(l),column:this.getColumn(l)};}},getSelectedTrEls:function(){return c.getElementsByClassName(d.CLASS_SELECTED,"tr",this._elTbody);},selectRow:function(p){var o,i;if(p instanceof YAHOO.widget.Record){o=this._oRecordSet.getRecord(p);i=this.getTrEl(o);}else{if(h.isNumber(p)){o=this.getRecord(p);i=this.getTrEl(o);}else{i=this.getTrEl(p);o=this.getRecord(i);}}if(o){var n=this._aSelections||[];var m=o.getId();var l=-1;if(n.indexOf){l=n.indexOf(m);}else{for(var k=n.length-1;k>-1;k--){if(n[k]===m){l=k;break;}}}if(l>-1){n.splice(l,1);}n.push(m);this._aSelections=n;if(!this._oAnchorRecord){this._oAnchorRecord=o;}if(i){c.addClass(i,d.CLASS_SELECTED);}this.fireEvent("rowSelectEvent",{record:o,el:i});}else{}},unselectRow:function(p){var i=this.getTrEl(p);var o;if(p instanceof YAHOO.widget.Record){o=this._oRecordSet.getRecord(p);}else{if(h.isNumber(p)){o=this.getRecord(p);}else{o=this.getRecord(i);}}if(o){var n=this._aSelections||[];var m=o.getId();var l=-1;if(n.indexOf){l=n.indexOf(m);}else{for(var k=n.length-1;k>-1;k--){if(n[k]===m){l=k;break;}}}if(l>-1){n.splice(l,1);this._aSelections=n;c.removeClass(i,d.CLASS_SELECTED);this.fireEvent("rowUnselectEvent",{record:o,el:i});return;}}},unselectAllRows:function(){var k=this._aSelections||[],m,l=[];for(var i=k.length-1;i>-1;i--){if(h.isString(k[i])){m=k.splice(i,1);l[l.length]=this.getRecord(h.isArray(m)?m[0]:m);}}this._aSelections=k;this._unselectAllTrEls();this.fireEvent("unselectAllRowsEvent",{records:l});},_unselectAllTdEls:function(){var i=c.getElementsByClassName(d.CLASS_SELECTED,"td",this._elTbody);c.removeClass(i,d.CLASS_SELECTED);},getSelectedTdEls:function(){return c.getElementsByClassName(d.CLASS_SELECTED,"td",this._elTbody);},selectCell:function(i){var p=this.getTdEl(i);if(p){var o=this.getRecord(p);var q=this.getColumn(this.getCellIndex(p));var m=q.getKey();if(o&&m){var n=this._aSelections||[];var l=o.getId();for(var k=n.length-1;k>-1;k--){if((n[k].recordId===l)&&(n[k].columnKey===m)){n.splice(k,1);break;}}n.push({recordId:l,columnKey:m});this._aSelections=n;if(!this._oAnchorCell){this._oAnchorCell={record:o,column:q};}c.addClass(p,d.CLASS_SELECTED);this.fireEvent("cellSelectEvent",{record:o,column:q,key:m,el:p});return;}}},unselectCell:function(i){var o=this.getTdEl(i);if(o){var n=this.getRecord(o);var p=this.getColumn(this.getCellIndex(o));var l=p.getKey();if(n&&l){var m=this._aSelections||[];var q=n.getId();for(var k=m.length-1;k>-1;k--){if((m[k].recordId===q)&&(m[k].columnKey===l)){m.splice(k,1);this._aSelections=m;c.removeClass(o,d.CLASS_SELECTED);this.fireEvent("cellUnselectEvent",{record:n,column:p,key:l,el:o});return;}}}}},unselectAllCells:function(){var k=this._aSelections||[];for(var i=k.length-1;i>-1;i--){if(h.isObject(k[i])){k.splice(i,1);}}this._aSelections=k;this._unselectAllTdEls();this.fireEvent("unselectAllCellsEvent");},isSelected:function(p){if(p&&(p.ownerDocument==document)){return(c.hasClass(this.getTdEl(p),d.CLASS_SELECTED)||c.hasClass(this.getTrEl(p),d.CLASS_SELECTED));}else{var n,k,i;var m=this._aSelections;if(m&&m.length>0){if(p instanceof YAHOO.widget.Record){n=p;}else{if(h.isNumber(p)){n=this.getRecord(p);}}if(n){k=n.getId();if(m.indexOf){if(m.indexOf(k)>-1){return true;}}else{for(i=m.length-1;i>-1;i--){if(m[i]===k){return true;}}}}else{if(p.record&&p.column){k=p.record.getId();var l=p.column.getKey();for(i=m.length-1;i>-1;i--){if((m[i].recordId===k)&&(m[i].columnKey===l)){return true;}}}}}}return false;},getSelectedRows:function(){var i=[];var l=this._aSelections||[];for(var k=0;k<l.length;k++){if(h.isString(l[k])){i.push(l[k]);}}return i;},getSelectedCells:function(){var k=[];var l=this._aSelections||[];for(var i=0;i<l.length;i++){if(l[i]&&h.isObject(l[i])){k.push(l[i]);}}return k;},getLastSelectedRecord:function(){var k=this._aSelections;if(k&&k.length>0){for(var j=k.length-1;j>-1;j--){if(h.isString(k[j])){return k[j];}}}},getLastSelectedCell:function(){var k=this._aSelections;if(k&&k.length>0){for(var j=k.length-1;j>-1;j--){if(k[j].recordId&&k[j].columnKey){return k[j];}}}},highlightRow:function(k){var i=this.getTrEl(k);if(i){var j=this.getRecord(i);c.addClass(i,d.CLASS_HIGHLIGHTED);this.fireEvent("rowHighlightEvent",{record:j,el:i});return;}},unhighlightRow:function(k){var i=this.getTrEl(k);if(i){var j=this.getRecord(i);c.removeClass(i,d.CLASS_HIGHLIGHTED);this.fireEvent("rowUnhighlightEvent",{record:j,el:i});return;}},highlightCell:function(i){var l=this.getTdEl(i);if(l){if(this._elLastHighlightedTd){this.unhighlightCell(this._elLastHighlightedTd);}var k=this.getRecord(l);var m=this.getColumn(this.getCellIndex(l));var j=m.getKey();c.addClass(l,d.CLASS_HIGHLIGHTED);this._elLastHighlightedTd=l;this.fireEvent("cellHighlightEvent",{record:k,column:m,key:j,el:l});return;}},unhighlightCell:function(i){var k=this.getTdEl(i);if(k){var j=this.getRecord(k);c.removeClass(k,d.CLASS_HIGHLIGHTED);this._elLastHighlightedTd=null;this.fireEvent("cellUnhighlightEvent",{record:j,column:this.getColumn(this.getCellIndex(k)),key:this.getColumn(this.getCellIndex(k)).getKey(),el:k});
return;}},addCellEditor:function(j,i){j.editor=i;j.editor.subscribe("showEvent",this._onEditorShowEvent,this,true);j.editor.subscribe("keydownEvent",this._onEditorKeydownEvent,this,true);j.editor.subscribe("revertEvent",this._onEditorRevertEvent,this,true);j.editor.subscribe("saveEvent",this._onEditorSaveEvent,this,true);j.editor.subscribe("cancelEvent",this._onEditorCancelEvent,this,true);j.editor.subscribe("blurEvent",this._onEditorBlurEvent,this,true);j.editor.subscribe("blockEvent",this._onEditorBlockEvent,this,true);j.editor.subscribe("unblockEvent",this._onEditorUnblockEvent,this,true);},getCellEditor:function(){return this._oCellEditor;},showCellEditor:function(p,q,l){p=this.getTdEl(p);if(p){l=this.getColumn(p);if(l&&l.editor){var j=this._oCellEditor;if(j){if(this._oCellEditor.cancel){this._oCellEditor.cancel();}else{if(j.isActive){this.cancelCellEditor();}}}if(l.editor instanceof YAHOO.widget.BaseCellEditor){j=l.editor;var n=j.attach(this,p);if(n){j.render();j.move();n=this.doBeforeShowCellEditor(j);if(n){j.show();this._oCellEditor=j;}}}else{if(!q||!(q instanceof YAHOO.widget.Record)){q=this.getRecord(p);}if(!l||!(l instanceof YAHOO.widget.Column)){l=this.getColumn(p);}if(q&&l){if(!this._oCellEditor||this._oCellEditor.container){this._initCellEditorEl();}j=this._oCellEditor;j.cell=p;j.record=q;j.column=l;j.validator=(l.editorOptions&&h.isFunction(l.editorOptions.validator))?l.editorOptions.validator:null;j.value=q.getData(l.key);j.defaultValue=null;var k=j.container;var o=c.getX(p);var m=c.getY(p);if(isNaN(o)||isNaN(m)){o=p.offsetLeft+c.getX(this._elTbody.parentNode)-this._elTbody.scrollLeft;m=p.offsetTop+c.getY(this._elTbody.parentNode)-this._elTbody.scrollTop+this._elThead.offsetHeight;}k.style.left=o+"px";k.style.top=m+"px";this.doBeforeShowCellEditor(this._oCellEditor);k.style.display="";g.addListener(k,"keydown",function(s,r){if((s.keyCode==27)){r.cancelCellEditor();r.focusTbodyEl();}else{r.fireEvent("editorKeydownEvent",{editor:r._oCellEditor,event:s});}},this);var i;if(h.isString(l.editor)){switch(l.editor){case"checkbox":i=d.editCheckbox;break;case"date":i=d.editDate;break;case"dropdown":i=d.editDropdown;break;case"radio":i=d.editRadio;break;case"textarea":i=d.editTextarea;break;case"textbox":i=d.editTextbox;break;default:i=null;}}else{if(h.isFunction(l.editor)){i=l.editor;}}if(i){i(this._oCellEditor,this);if(!l.editorOptions||!l.editorOptions.disableBtns){this.showCellEditorBtns(k);}j.isActive=true;this.fireEvent("editorShowEvent",{editor:j});return;}}}}}},_initCellEditorEl:function(){var i=document.createElement("div");i.id=this._sId+"-celleditor";i.style.display="none";i.tabIndex=0;c.addClass(i,d.CLASS_EDITOR);var k=c.getFirstChild(document.body);if(k){i=c.insertBefore(i,k);}else{i=document.body.appendChild(i);}var j={};j.container=i;j.value=null;j.isActive=false;this._oCellEditor=j;},doBeforeShowCellEditor:function(i){return true;},saveCellEditor:function(){if(this._oCellEditor){if(this._oCellEditor.save){this._oCellEditor.save();}else{if(this._oCellEditor.isActive){var i=this._oCellEditor.value;var j=this._oCellEditor.record.getData(this._oCellEditor.column.key);if(this._oCellEditor.validator){i=this._oCellEditor.value=this._oCellEditor.validator.call(this,i,j,this._oCellEditor);if(i===null){this.resetCellEditor();this.fireEvent("editorRevertEvent",{editor:this._oCellEditor,oldData:j,newData:i});return;}}this._oRecordSet.updateRecordValue(this._oCellEditor.record,this._oCellEditor.column.key,this._oCellEditor.value);this.formatCell(this._oCellEditor.cell.firstChild,this._oCellEditor.record,this._oCellEditor.column);this._oChainRender.add({method:function(){this.validateColumnWidths();},scope:this});this._oChainRender.run();this.resetCellEditor();this.fireEvent("editorSaveEvent",{editor:this._oCellEditor,oldData:j,newData:i});}}}},cancelCellEditor:function(){if(this._oCellEditor){if(this._oCellEditor.cancel){this._oCellEditor.cancel();}else{if(this._oCellEditor.isActive){this.resetCellEditor();this.fireEvent("editorCancelEvent",{editor:this._oCellEditor});}}}},destroyCellEditor:function(){if(this._oCellEditor){this._oCellEditor.destroy();this._oCellEditor=null;}},_onEditorShowEvent:function(i){this.fireEvent("editorShowEvent",i);},_onEditorKeydownEvent:function(i){this.fireEvent("editorKeydownEvent",i);},_onEditorRevertEvent:function(i){this.fireEvent("editorRevertEvent",i);},_onEditorSaveEvent:function(i){this.fireEvent("editorSaveEvent",i);},_onEditorCancelEvent:function(i){this.fireEvent("editorCancelEvent",i);},_onEditorBlurEvent:function(i){this.fireEvent("editorBlurEvent",i);},_onEditorBlockEvent:function(i){this.fireEvent("editorBlockEvent",i);},_onEditorUnblockEvent:function(i){this.fireEvent("editorUnblockEvent",i);},onEditorBlurEvent:function(i){if(i.editor.disableBtns){if(i.editor.save){i.editor.save();}}else{if(i.editor.cancel){i.editor.cancel();}}},onEditorBlockEvent:function(i){this.disable();},onEditorUnblockEvent:function(i){this.undisable();},doBeforeLoadData:function(i,j,k){return true;},onEventSortColumn:function(k){var i=k.event;var m=k.target;var j=this.getThEl(m)||this.getTdEl(m);if(j){var l=this.getColumn(j);if(l.sortable){g.stopEvent(i);this.sortColumn(l);}}else{}},onEventSelectColumn:function(i){this.selectColumn(i.target);},onEventHighlightColumn:function(i){this.highlightColumn(i.target);},onEventUnhighlightColumn:function(i){this.unhighlightColumn(i.target);},onEventSelectRow:function(j){var i=this.get("selectionMode");if(i=="single"){this._handleSingleSelectionByMouse(j);}else{this._handleStandardSelectionByMouse(j);}},onEventSelectCell:function(j){var i=this.get("selectionMode");if(i=="cellblock"){this._handleCellBlockSelectionByMouse(j);}else{if(i=="cellrange"){this._handleCellRangeSelectionByMouse(j);}else{this._handleSingleCellSelectionByMouse(j);}}},onEventHighlightRow:function(i){this.highlightRow(i.target);},onEventUnhighlightRow:function(i){this.unhighlightRow(i.target);},onEventHighlightCell:function(i){this.highlightCell(i.target);
},onEventUnhighlightCell:function(i){this.unhighlightCell(i.target);},onEventFormatCell:function(i){var l=i.target;var j=this.getTdEl(l);if(j){var k=this.getColumn(this.getCellIndex(j));this.formatCell(j.firstChild,this.getRecord(j),k);}else{}},onEventShowCellEditor:function(i){if(!this.isDisabled()){this.showCellEditor(i.target);}},onEventSaveCellEditor:function(i){if(this._oCellEditor){if(this._oCellEditor.save){this._oCellEditor.save();}else{this.saveCellEditor();}}},onEventCancelCellEditor:function(i){if(this._oCellEditor){if(this._oCellEditor.cancel){this._oCellEditor.cancel();}else{this.cancelCellEditor();}}},onDataReturnInitializeTable:function(i,j,k){if((this instanceof d)&&this._sId){this.initializeTable();this.onDataReturnSetRows(i,j,k);}},onDataReturnReplaceRows:function(m,l,n){if((this instanceof d)&&this._sId){this.fireEvent("dataReturnEvent",{request:m,response:l,payload:n});var j=this.doBeforeLoadData(m,l,n),k=this.get("paginator"),i=0;if(j&&l&&!l.error&&h.isArray(l.results)){this._oRecordSet.reset();if(this.get("dynamicData")){if(n&&n.pagination&&h.isNumber(n.pagination.recordOffset)){i=n.pagination.recordOffset;}else{if(k){i=k.getStartIndex();}}}this._oRecordSet.setRecords(l.results,i|0);this._handleDataReturnPayload(m,l,n);this.render();}else{if(j&&l.error){this.showTableMessage(this.get("MSG_ERROR"),d.CLASS_ERROR);}}}},onDataReturnAppendRows:function(j,k,l){if((this instanceof d)&&this._sId){this.fireEvent("dataReturnEvent",{request:j,response:k,payload:l});var i=this.doBeforeLoadData(j,k,l);if(i&&k&&!k.error&&h.isArray(k.results)){this.addRows(k.results);this._handleDataReturnPayload(j,k,l);}else{if(i&&k.error){this.showTableMessage(this.get("MSG_ERROR"),d.CLASS_ERROR);}}}},onDataReturnInsertRows:function(j,k,l){if((this instanceof d)&&this._sId){this.fireEvent("dataReturnEvent",{request:j,response:k,payload:l});var i=this.doBeforeLoadData(j,k,l);if(i&&k&&!k.error&&h.isArray(k.results)){this.addRows(k.results,(l?l.insertIndex:0));this._handleDataReturnPayload(j,k,l);}else{if(i&&k.error){this.showTableMessage(this.get("MSG_ERROR"),d.CLASS_ERROR);}}}},onDataReturnUpdateRows:function(j,k,l){if((this instanceof d)&&this._sId){this.fireEvent("dataReturnEvent",{request:j,response:k,payload:l});var i=this.doBeforeLoadData(j,k,l);if(i&&k&&!k.error&&h.isArray(k.results)){this.updateRows((l?l.updateIndex:0),k.results);this._handleDataReturnPayload(j,k,l);}else{if(i&&k.error){this.showTableMessage(this.get("MSG_ERROR"),d.CLASS_ERROR);}}}},onDataReturnSetRows:function(m,l,n){if((this instanceof d)&&this._sId){this.fireEvent("dataReturnEvent",{request:m,response:l,payload:n});var j=this.doBeforeLoadData(m,l,n),k=this.get("paginator"),i=0;if(j&&l&&!l.error&&h.isArray(l.results)){if(this.get("dynamicData")){if(n&&n.pagination&&h.isNumber(n.pagination.recordOffset)){i=n.pagination.recordOffset;}else{if(k){i=k.getStartIndex();}}this._oRecordSet.reset();}this._oRecordSet.setRecords(l.results,i|0);this._handleDataReturnPayload(m,l,n);this.render();}else{if(j&&l.error){this.showTableMessage(this.get("MSG_ERROR"),d.CLASS_ERROR);}}}else{}},handleDataReturnPayload:function(j,i,k){return k||{};},_handleDataReturnPayload:function(k,j,l){l=this.handleDataReturnPayload(k,j,l);if(l){var i=this.get("paginator");if(i){if(this.get("dynamicData")){if(e.Paginator.isNumeric(l.totalRecords)){i.set("totalRecords",l.totalRecords);}}else{i.set("totalRecords",this._oRecordSet.getLength());}if(h.isObject(l.pagination)){i.set("rowsPerPage",l.pagination.rowsPerPage);i.set("recordOffset",l.pagination.recordOffset);}}if(l.sortedBy){this.set("sortedBy",l.sortedBy);}else{if(l.sorting){this.set("sortedBy",l.sorting);}}}},showCellEditorBtns:function(k){var l=k.appendChild(document.createElement("div"));c.addClass(l,d.CLASS_BUTTON);var j=l.appendChild(document.createElement("button"));c.addClass(j,d.CLASS_DEFAULT);j.innerHTML="OK";g.addListener(j,"click",function(n,m){m.onEventSaveCellEditor(n,m);m.focusTbodyEl();},this,true);var i=l.appendChild(document.createElement("button"));i.innerHTML="Cancel";g.addListener(i,"click",function(n,m){m.onEventCancelCellEditor(n,m);m.focusTbodyEl();},this,true);},resetCellEditor:function(){var i=this._oCellEditor.container;i.style.display="none";g.purgeElement(i,true);i.innerHTML="";this._oCellEditor.value=null;this._oCellEditor.isActive=false;},getBody:function(){return this.getTbodyEl();},getCell:function(i){return this.getTdEl(i);},getRow:function(i){return this.getTrEl(i);},refreshView:function(){this.render();},select:function(k){if(!h.isArray(k)){k=[k];}for(var j=0;j<k.length;j++){this.selectRow(k[j]);}},onEventEditCell:function(i){this.onEventShowCellEditor(i);},_syncColWidths:function(){this.validateColumnWidths();}});d.prototype.onDataReturnSetRecords=d.prototype.onDataReturnSetRows;d.prototype.onPaginatorChange=d.prototype.onPaginatorChangeRequest;d.editCheckbox=function(){};d.editDate=function(){};d.editDropdown=function(){};d.editRadio=function(){};d.editTextarea=function(){};d.editTextbox=function(){};})();(function(){var c=YAHOO.lang,f=YAHOO.util,e=YAHOO.widget,a=YAHOO.env.ua,d=f.Dom,j=f.Event,i=f.DataSourceBase,g=e.DataTable,b=e.Paginator;e.ScrollingDataTable=function(n,m,k,l){l=l||{};if(l.scrollable){l.scrollable=false;}this._init();e.ScrollingDataTable.superclass.constructor.call(this,n,m,k,l);this.subscribe("columnShowEvent",this._onColumnChange);};var h=e.ScrollingDataTable;c.augmentObject(h,{CLASS_HEADER:"yui-dt-hd",CLASS_BODY:"yui-dt-bd"});c.extend(h,g,{_elHdContainer:null,_elHdTable:null,_elBdContainer:null,_elBdThead:null,_elTmpContainer:null,_elTmpTable:null,_bScrollbarX:null,initAttributes:function(k){k=k||{};h.superclass.initAttributes.call(this,k);this.setAttributeConfig("width",{value:null,validator:c.isString,method:function(l){if(this._elHdContainer&&this._elBdContainer){this._elHdContainer.style.width=l;this._elBdContainer.style.width=l;this._syncScrollX();this._syncScrollOverhang();}}});this.setAttributeConfig("height",{value:null,validator:c.isString,method:function(l){if(this._elHdContainer&&this._elBdContainer){this._elBdContainer.style.height=l;
this._syncScrollX();this._syncScrollY();this._syncScrollOverhang();}}});this.setAttributeConfig("COLOR_COLUMNFILLER",{value:"#F2F2F2",validator:c.isString,method:function(l){if(this._elHdContainer){this._elHdContainer.style.backgroundColor=l;}}});},_init:function(){this._elHdContainer=null;this._elHdTable=null;this._elBdContainer=null;this._elBdThead=null;this._elTmpContainer=null;this._elTmpTable=null;},_initDomElements:function(k){this._initContainerEl(k);if(this._elContainer&&this._elHdContainer&&this._elBdContainer){this._initTableEl();if(this._elHdTable&&this._elTable){this._initColgroupEl(this._elHdTable);this._initTheadEl(this._elHdTable,this._elTable);this._initTbodyEl(this._elTable);this._initMsgTbodyEl(this._elTable);}}if(!this._elContainer||!this._elTable||!this._elColgroup||!this._elThead||!this._elTbody||!this._elMsgTbody||!this._elHdTable||!this._elBdThead){return false;}else{return true;}},_destroyContainerEl:function(k){d.removeClass(k,g.CLASS_SCROLLABLE);h.superclass._destroyContainerEl.call(this,k);this._elHdContainer=null;this._elBdContainer=null;},_initContainerEl:function(l){h.superclass._initContainerEl.call(this,l);if(this._elContainer){l=this._elContainer;d.addClass(l,g.CLASS_SCROLLABLE);var k=document.createElement("div");k.style.width=this.get("width")||"";k.style.backgroundColor=this.get("COLOR_COLUMNFILLER");d.addClass(k,h.CLASS_HEADER);this._elHdContainer=k;l.appendChild(k);var m=document.createElement("div");m.style.width=this.get("width")||"";m.style.height=this.get("height")||"";d.addClass(m,h.CLASS_BODY);j.addListener(m,"scroll",this._onScroll,this);this._elBdContainer=m;l.appendChild(m);}},_initCaptionEl:function(k){},_destroyHdTableEl:function(){var k=this._elHdTable;if(k){j.purgeElement(k,true);k.parentNode.removeChild(k);this._elBdThead=null;}},_initTableEl:function(){if(this._elHdContainer){this._destroyHdTableEl();this._elHdTable=this._elHdContainer.appendChild(document.createElement("table"));j.delegate(this._elHdTable,"mouseenter",this._onTableMouseover,"thead ."+g.CLASS_LABEL,this);j.delegate(this._elHdTable,"mouseleave",this._onTableMouseout,"thead ."+g.CLASS_LABEL,this);}h.superclass._initTableEl.call(this,this._elBdContainer);},_initTheadEl:function(l,k){l=l||this._elHdTable;k=k||this._elTable;this._initBdTheadEl(k);h.superclass._initTheadEl.call(this,l);},_initThEl:function(l,k){h.superclass._initThEl.call(this,l,k);l.id=this.getId()+"-fixedth-"+k.getSanitizedKey();},_destroyBdTheadEl:function(){var k=this._elBdThead;if(k){var l=k.parentNode;j.purgeElement(k,true);l.removeChild(k);this._elBdThead=null;this._destroyColumnHelpers();}},_initBdTheadEl:function(t){if(t){this._destroyBdTheadEl();var p=t.insertBefore(document.createElement("thead"),t.firstChild);var v=this._oColumnSet,u=v.tree,o,l,s,q,n,m,r;for(q=0,m=u.length;q<m;q++){l=p.appendChild(document.createElement("tr"));for(n=0,r=u[q].length;n<r;n++){s=u[q][n];o=l.appendChild(document.createElement("th"));this._initBdThEl(o,s,q,n);}}this._elBdThead=p;}},_initBdThEl:function(n,m){n.id=this.getId()+"-th-"+m.getSanitizedKey();n.rowSpan=m.getRowspan();n.colSpan=m.getColspan();if(m.abbr){n.abbr=m.abbr;}var l=m.getKey();var k=c.isValue(m.label)?m.label:l;n.innerHTML=k;},_initTbodyEl:function(k){h.superclass._initTbodyEl.call(this,k);k.style.marginTop=(this._elTbody.offsetTop>0)?"-"+this._elTbody.offsetTop+"px":0;},_focusEl:function(l){l=l||this._elTbody;var k=this;this._storeScrollPositions();setTimeout(function(){setTimeout(function(){try{l.focus();k._restoreScrollPositions();}catch(m){}},0);},0);},_runRenderChain:function(){this._storeScrollPositions();this._oChainRender.run();},_storeScrollPositions:function(){this._nScrollTop=this._elBdContainer.scrollTop;this._nScrollLeft=this._elBdContainer.scrollLeft;},clearScrollPositions:function(){this._nScrollTop=0;this._nScrollLeft=0;},_restoreScrollPositions:function(){if(this._nScrollTop){this._elBdContainer.scrollTop=this._nScrollTop;this._nScrollTop=null;}if(this._nScrollLeft){this._elBdContainer.scrollLeft=this._nScrollLeft;this._elHdContainer.scrollLeft=this._nScrollLeft;this._nScrollLeft=null;}},_validateColumnWidth:function(n,k){if(!n.width&&!n.hidden){var p=n.getThEl();if(n._calculatedWidth){this._setColumnWidth(n,"auto","visible");}if(p.offsetWidth!==k.offsetWidth){var m=(p.offsetWidth>k.offsetWidth)?n.getThLinerEl():k.firstChild;var l=Math.max(0,(m.offsetWidth-(parseInt(d.getStyle(m,"paddingLeft"),10)|0)-(parseInt(d.getStyle(m,"paddingRight"),10)|0)),n.minWidth);var o="visible";if((n.maxAutoWidth>0)&&(l>n.maxAutoWidth)){l=n.maxAutoWidth;o="hidden";}this._elTbody.style.display="none";this._setColumnWidth(n,l+"px",o);n._calculatedWidth=l;this._elTbody.style.display="";}}},validateColumnWidths:function(s){var u=this._oColumnSet.keys,w=u.length,l=this.getFirstTrEl();if(a.ie){this._setOverhangValue(1);}if(u&&l&&(l.childNodes.length===w)){var m=this.get("width");if(m){this._elHdContainer.style.width="";this._elBdContainer.style.width="";}this._elContainer.style.width="";if(s&&c.isNumber(s.getKeyIndex())){this._validateColumnWidth(s,l.childNodes[s.getKeyIndex()]);}else{var t,k=[],o,q,r;for(q=0;q<w;q++){s=u[q];if(!s.width&&!s.hidden&&s._calculatedWidth){k[k.length]=s;}}this._elTbody.style.display="none";for(q=0,r=k.length;q<r;q++){this._setColumnWidth(k[q],"auto","visible");}this._elTbody.style.display="";k=[];for(q=0;q<w;q++){s=u[q];t=l.childNodes[q];if(!s.width&&!s.hidden){var n=s.getThEl();if(n.offsetWidth!==t.offsetWidth){var v=(n.offsetWidth>t.offsetWidth)?s.getThLinerEl():t.firstChild;var p=Math.max(0,(v.offsetWidth-(parseInt(d.getStyle(v,"paddingLeft"),10)|0)-(parseInt(d.getStyle(v,"paddingRight"),10)|0)),s.minWidth);var x="visible";if((s.maxAutoWidth>0)&&(p>s.maxAutoWidth)){p=s.maxAutoWidth;x="hidden";}k[k.length]=[s,p,x];}}}this._elTbody.style.display="none";for(q=0,r=k.length;q<r;q++){o=k[q];this._setColumnWidth(o[0],o[1]+"px",o[2]);o[0]._calculatedWidth=o[1];}this._elTbody.style.display="";}if(m){this._elHdContainer.style.width=m;this._elBdContainer.style.width=m;
}}this._syncScroll();this._restoreScrollPositions();},_syncScroll:function(){this._syncScrollX();this._syncScrollY();this._syncScrollOverhang();if(a.opera){this._elHdContainer.scrollLeft=this._elBdContainer.scrollLeft;if(!this.get("width")){document.body.style+="";}}},_syncScrollY:function(){var k=this._elTbody,l=this._elBdContainer;if(!this.get("width")){this._elContainer.style.width=(l.scrollHeight>l.clientHeight)?(k.parentNode.clientWidth+19)+"px":(k.parentNode.clientWidth+2)+"px";}},_syncScrollX:function(){var k=this._elTbody,l=this._elBdContainer;if(!this.get("height")&&(a.ie)){l.style.height=(l.scrollWidth>l.offsetWidth)?(k.parentNode.offsetHeight+18)+"px":k.parentNode.offsetHeight+"px";}if(this._elTbody.rows.length===0){this._elMsgTbody.parentNode.style.width=this.getTheadEl().parentNode.offsetWidth+"px";}else{this._elMsgTbody.parentNode.style.width="";}},_syncScrollOverhang:function(){var l=this._elBdContainer,k=1;if((l.scrollHeight>l.clientHeight)&&(l.scrollWidth>l.clientWidth)){k=18;}this._setOverhangValue(k);},_setOverhangValue:function(n){var p=this._oColumnSet.headers[this._oColumnSet.headers.length-1]||[],l=p.length,k=this._sId+"-fixedth-",o=n+"px solid "+this.get("COLOR_COLUMNFILLER");this._elThead.style.display="none";for(var m=0;m<l;m++){d.get(k+p[m]).style.borderRight=o;}this._elThead.style.display="";},getHdContainerEl:function(){return this._elHdContainer;},getBdContainerEl:function(){return this._elBdContainer;},getHdTableEl:function(){return this._elHdTable;},getBdTableEl:function(){return this._elTable;},disable:function(){var k=this._elMask;k.style.width=this._elBdContainer.offsetWidth+"px";k.style.height=this._elHdContainer.offsetHeight+this._elBdContainer.offsetHeight+"px";k.style.display="";this.fireEvent("disableEvent");},removeColumn:function(m){var k=this._elHdContainer.scrollLeft;var l=this._elBdContainer.scrollLeft;m=h.superclass.removeColumn.call(this,m);this._elHdContainer.scrollLeft=k;this._elBdContainer.scrollLeft=l;return m;},insertColumn:function(n,l){var k=this._elHdContainer.scrollLeft;var m=this._elBdContainer.scrollLeft;var o=h.superclass.insertColumn.call(this,n,l);this._elHdContainer.scrollLeft=k;this._elBdContainer.scrollLeft=m;return o;},reorderColumn:function(n,l){var k=this._elHdContainer.scrollLeft;var m=this._elBdContainer.scrollLeft;var o=h.superclass.reorderColumn.call(this,n,l);this._elHdContainer.scrollLeft=k;this._elBdContainer.scrollLeft=m;return o;},setColumnWidth:function(l,k){l=this.getColumn(l);if(l){this._storeScrollPositions();if(c.isNumber(k)){k=(k>l.minWidth)?k:l.minWidth;l.width=k;this._setColumnWidth(l,k+"px");this._syncScroll();this.fireEvent("columnSetWidthEvent",{column:l,width:k});}else{if(k===null){l.width=k;this._setColumnWidth(l,"auto");this.validateColumnWidths(l);this.fireEvent("columnUnsetWidthEvent",{column:l});}}this._clearTrTemplateEl();}else{}},scrollTo:function(m){var l=this.getTdEl(m);if(l){this.clearScrollPositions();this.getBdContainerEl().scrollLeft=l.offsetLeft;this.getBdContainerEl().scrollTop=l.parentNode.offsetTop;}else{var k=this.getTrEl(m);if(k){this.clearScrollPositions();this.getBdContainerEl().scrollTop=k.offsetTop;}}},showTableMessage:function(o,k){var p=this._elMsgTd;if(c.isString(o)){p.firstChild.innerHTML=o;}if(c.isString(k)){d.addClass(p.firstChild,k);}var n=this.getTheadEl();var l=n.parentNode;var m=l.offsetWidth;this._elMsgTbody.parentNode.style.width=this.getTheadEl().parentNode.offsetWidth+"px";this._elMsgTbody.style.display="";this.fireEvent("tableMsgShowEvent",{html:o,className:k});},_onColumnChange:function(k){var l=(k.column)?k.column:(k.editor)?k.editor.column:null;this._storeScrollPositions();this.validateColumnWidths(l);},_onScroll:function(m,l){l._elHdContainer.scrollLeft=l._elBdContainer.scrollLeft;if(l._oCellEditor&&l._oCellEditor.isActive){l.fireEvent("editorBlurEvent",{editor:l._oCellEditor});l.cancelCellEditor();}var n=j.getTarget(m);var k=n.nodeName.toLowerCase();l.fireEvent("tableScrollEvent",{event:m,target:n});},_onTheadKeydown:function(n,l){if(j.getCharCode(n)===9){setTimeout(function(){if((l instanceof h)&&l._sId){l._elBdContainer.scrollLeft=l._elHdContainer.scrollLeft;}},0);}var o=j.getTarget(n);var k=o.nodeName.toLowerCase();var m=true;while(o&&(k!="table")){switch(k){case"body":return;case"input":case"textarea":break;case"thead":m=l.fireEvent("theadKeyEvent",{target:o,event:n});break;default:break;}if(m===false){return;}else{o=o.parentNode;if(o){k=o.nodeName.toLowerCase();}}}l.fireEvent("tableKeyEvent",{target:(o||l._elContainer),event:n});}});})();(function(){var c=YAHOO.lang,f=YAHOO.util,e=YAHOO.widget,b=YAHOO.env.ua,d=f.Dom,i=f.Event,h=e.DataTable;e.BaseCellEditor=function(k,j){this._sId=this._sId||d.generateId(null,"yui-ceditor");YAHOO.widget.BaseCellEditor._nCount++;this._sType=k;this._initConfigs(j);this._initEvents();this._needsRender=true;};var a=e.BaseCellEditor;c.augmentObject(a,{_nCount:0,CLASS_CELLEDITOR:"yui-ceditor"});a.prototype={_sId:null,_sType:null,_oDataTable:null,_oColumn:null,_oRecord:null,_elTd:null,_elContainer:null,_elCancelBtn:null,_elSaveBtn:null,_initConfigs:function(k){if(k&&YAHOO.lang.isObject(k)){for(var j in k){if(j){this[j]=k[j];}}}},_initEvents:function(){this.createEvent("showEvent");this.createEvent("keydownEvent");this.createEvent("invalidDataEvent");this.createEvent("revertEvent");this.createEvent("saveEvent");this.createEvent("cancelEvent");this.createEvent("blurEvent");this.createEvent("blockEvent");this.createEvent("unblockEvent");},_initContainerEl:function(){if(this._elContainer){YAHOO.util.Event.purgeElement(this._elContainer,true);this._elContainer.innerHTML="";}var j=document.createElement("div");j.id=this.getId()+"-container";j.style.display="none";j.tabIndex=0;this.className=c.isArray(this.className)?this.className:this.className?[this.className]:[];this.className[this.className.length]=h.CLASS_EDITOR;j.className=this.className.join(" ");document.body.insertBefore(j,document.body.firstChild);this._elContainer=j;},_initShimEl:function(){if(this.useIFrame){if(!this._elIFrame){var j=document.createElement("iframe");
j.src="javascript:false";j.frameBorder=0;j.scrolling="no";j.style.display="none";j.className=h.CLASS_EDITOR_SHIM;j.tabIndex=-1;j.role="presentation";j.title="Presentational iframe shim";document.body.insertBefore(j,document.body.firstChild);this._elIFrame=j;}}},_hide:function(){this.getContainerEl().style.display="none";if(this._elIFrame){this._elIFrame.style.display="none";}this.isActive=false;this.getDataTable()._oCellEditor=null;},asyncSubmitter:null,value:null,defaultValue:null,validator:null,resetInvalidData:true,isActive:false,LABEL_SAVE:"Save",LABEL_CANCEL:"Cancel",disableBtns:false,useIFrame:false,className:null,toString:function(){return"CellEditor instance "+this._sId;},getId:function(){return this._sId;},getDataTable:function(){return this._oDataTable;},getColumn:function(){return this._oColumn;},getRecord:function(){return this._oRecord;},getTdEl:function(){return this._elTd;},getContainerEl:function(){return this._elContainer;},destroy:function(){this.unsubscribeAll();var k=this.getColumn();if(k){k.editor=null;}var j=this.getContainerEl();if(j){i.purgeElement(j,true);j.parentNode.removeChild(j);}},render:function(){if(!this._needsRender){return;}this._initContainerEl();this._initShimEl();i.addListener(this.getContainerEl(),"keydown",function(l,j){if((l.keyCode==27)){var k=i.getTarget(l);if(k.nodeName&&k.nodeName.toLowerCase()==="select"){k.blur();}j.cancel();}j.fireEvent("keydownEvent",{editor:j,event:l});},this);this.renderForm();if(!this.disableBtns){this.renderBtns();}this.doAfterRender();this._needsRender=false;},renderBtns:function(){var l=this.getContainerEl().appendChild(document.createElement("div"));l.className=h.CLASS_BUTTON;var k=l.appendChild(document.createElement("button"));k.className=h.CLASS_DEFAULT;k.innerHTML=this.LABEL_SAVE;i.addListener(k,"click",function(m){this.save();},this,true);this._elSaveBtn=k;var j=l.appendChild(document.createElement("button"));j.innerHTML=this.LABEL_CANCEL;i.addListener(j,"click",function(m){this.cancel();},this,true);this._elCancelBtn=j;},attach:function(n,l){if(n instanceof YAHOO.widget.DataTable){this._oDataTable=n;l=n.getTdEl(l);if(l){this._elTd=l;var m=n.getColumn(l);if(m){this._oColumn=m;var j=n.getRecord(l);if(j){this._oRecord=j;var k=j.getData(this.getColumn().getField());this.value=(k!==undefined)?k:this.defaultValue;return true;}}}}return false;},move:function(){var m=this.getContainerEl(),l=this.getTdEl(),j=d.getX(l),n=d.getY(l);if(isNaN(j)||isNaN(n)){var k=this.getDataTable().getTbodyEl();j=l.offsetLeft+d.getX(k.parentNode)-k.scrollLeft;n=l.offsetTop+d.getY(k.parentNode)-k.scrollTop+this.getDataTable().getTheadEl().offsetHeight;}m.style.left=j+"px";m.style.top=n+"px";if(this._elIFrame){this._elIFrame.style.left=j+"px";this._elIFrame.style.top=n+"px";}},show:function(){var k=this.getContainerEl(),j=this._elIFrame;this.resetForm();this.isActive=true;k.style.display="";if(j){j.style.width=k.offsetWidth+"px";j.style.height=k.offsetHeight+"px";j.style.display="";}this.focus();this.fireEvent("showEvent",{editor:this});},block:function(){this.fireEvent("blockEvent",{editor:this});},unblock:function(){this.fireEvent("unblockEvent",{editor:this});},save:function(){var k=this.getInputValue();var l=k;if(this.validator){l=this.validator.call(this.getDataTable(),k,this.value,this);if(l===undefined){if(this.resetInvalidData){this.resetForm();}this.fireEvent("invalidDataEvent",{editor:this,oldData:this.value,newData:k});return;}}var m=this;var j=function(o,n){var p=m.value;if(o){m.value=n;m.getDataTable().updateCell(m.getRecord(),m.getColumn(),n);m._hide();m.fireEvent("saveEvent",{editor:m,oldData:p,newData:m.value});}else{m.resetForm();m.fireEvent("revertEvent",{editor:m,oldData:p,newData:n});}m.unblock();};this.block();if(c.isFunction(this.asyncSubmitter)){this.asyncSubmitter.call(this,j,l);}else{j(true,l);}},cancel:function(){if(this.isActive){this._hide();this.fireEvent("cancelEvent",{editor:this});}else{}},renderForm:function(){},doAfterRender:function(){},handleDisabledBtns:function(){},resetForm:function(){},focus:function(){},getInputValue:function(){}};c.augmentProto(a,f.EventProvider);e.CheckboxCellEditor=function(j){j=j||{};this._sId=this._sId||d.generateId(null,"yui-checkboxceditor");YAHOO.widget.BaseCellEditor._nCount++;e.CheckboxCellEditor.superclass.constructor.call(this,j.type||"checkbox",j);};c.extend(e.CheckboxCellEditor,a,{checkboxOptions:null,checkboxes:null,value:null,renderForm:function(){if(c.isArray(this.checkboxOptions)){var n,o,q,l,m,k;for(m=0,k=this.checkboxOptions.length;m<k;m++){n=this.checkboxOptions[m];o=c.isValue(n.value)?n.value:n;q=this.getId()+"-chk"+m;this.getContainerEl().innerHTML+='<input type="checkbox"'+' id="'+q+'"'+' value="'+o+'" />';l=this.getContainerEl().appendChild(document.createElement("label"));l.htmlFor=q;l.innerHTML=c.isValue(n.label)?n.label:n;}var p=[];for(m=0;m<k;m++){p[p.length]=this.getContainerEl().childNodes[m*2];}this.checkboxes=p;if(this.disableBtns){this.handleDisabledBtns();}}else{}},handleDisabledBtns:function(){i.addListener(this.getContainerEl(),"click",function(j){if(i.getTarget(j).tagName.toLowerCase()==="input"){this.save();}},this,true);},resetForm:function(){var p=c.isArray(this.value)?this.value:[this.value];for(var o=0,n=this.checkboxes.length;o<n;o++){this.checkboxes[o].checked=false;for(var m=0,l=p.length;m<l;m++){if(this.checkboxes[o].value==p[m]){this.checkboxes[o].checked=true;}}}},focus:function(){this.checkboxes[0].focus();},getInputValue:function(){var k=[];for(var m=0,l=this.checkboxes.length;m<l;m++){if(this.checkboxes[m].checked){k[k.length]=this.checkboxes[m].value;}}return k;}});c.augmentObject(e.CheckboxCellEditor,a);e.DateCellEditor=function(j){j=j||{};this._sId=this._sId||d.generateId(null,"yui-dateceditor");YAHOO.widget.BaseCellEditor._nCount++;e.DateCellEditor.superclass.constructor.call(this,j.type||"date",j);};c.extend(e.DateCellEditor,a,{calendar:null,calendarOptions:null,defaultValue:new Date(),renderForm:function(){if(YAHOO.widget.Calendar){var k=this.getContainerEl().appendChild(document.createElement("div"));
k.id=this.getId()+"-dateContainer";var l=new YAHOO.widget.Calendar(this.getId()+"-date",k.id,this.calendarOptions);l.render();k.style.cssFloat="none";l.hideEvent.subscribe(function(){this.cancel();},this,true);if(b.ie){var j=this.getContainerEl().appendChild(document.createElement("div"));j.style.clear="both";}this.calendar=l;if(this.disableBtns){this.handleDisabledBtns();}}else{}},handleDisabledBtns:function(){this.calendar.selectEvent.subscribe(function(j){this.save();},this,true);},resetForm:function(){var j=this.value||(new Date());this.calendar.select(j);this.calendar.cfg.setProperty("pagedate",j,false);this.calendar.render();this.calendar.show();},focus:function(){},getInputValue:function(){return this.calendar.getSelectedDates()[0];}});c.augmentObject(e.DateCellEditor,a);e.DropdownCellEditor=function(j){j=j||{};this._sId=this._sId||d.generateId(null,"yui-dropdownceditor");YAHOO.widget.BaseCellEditor._nCount++;e.DropdownCellEditor.superclass.constructor.call(this,j.type||"dropdown",j);};c.extend(e.DropdownCellEditor,a,{dropdownOptions:null,dropdown:null,multiple:false,size:null,renderForm:function(){var n=this.getContainerEl().appendChild(document.createElement("select"));n.style.zoom=1;if(this.multiple){n.multiple="multiple";}if(c.isNumber(this.size)){n.size=this.size;}this.dropdown=n;if(c.isArray(this.dropdownOptions)){var o,m;for(var l=0,k=this.dropdownOptions.length;l<k;l++){o=this.dropdownOptions[l];m=document.createElement("option");m.value=(c.isValue(o.value))?o.value:o;m.innerHTML=(c.isValue(o.label))?o.label:o;m=n.appendChild(m);}if(this.disableBtns){this.handleDisabledBtns();}}},handleDisabledBtns:function(){if(this.multiple){i.addListener(this.dropdown,"blur",function(j){this.save();},this,true);}else{if(!b.ie){i.addListener(this.dropdown,"change",function(j){this.save();},this,true);}else{i.addListener(this.dropdown,"blur",function(j){this.save();},this,true);i.addListener(this.dropdown,"click",function(j){this.save();},this,true);}}},resetForm:function(){var s=this.dropdown.options,p=0,o=s.length;if(c.isArray(this.value)){var l=this.value,k=0,r=l.length,q={};for(;p<o;p++){s[p].selected=false;q[s[p].value]=s[p];}for(;k<r;k++){if(q[l[k]]){q[l[k]].selected=true;}}}else{for(;p<o;p++){if(this.value==s[p].value){s[p].selected=true;}}}},focus:function(){this.getDataTable()._focusEl(this.dropdown);},getInputValue:function(){var n=this.dropdown.options;if(this.multiple){var k=[],m=0,l=n.length;for(;m<l;m++){if(n[m].selected){k.push(n[m].value);}}return k;}else{return n[n.selectedIndex].value;}}});c.augmentObject(e.DropdownCellEditor,a);e.RadioCellEditor=function(j){j=j||{};this._sId=this._sId||d.generateId(null,"yui-radioceditor");YAHOO.widget.BaseCellEditor._nCount++;e.RadioCellEditor.superclass.constructor.call(this,j.type||"radio",j);};c.extend(e.RadioCellEditor,a,{radios:null,radioOptions:null,renderForm:function(){if(c.isArray(this.radioOptions)){var k,l,r,o;for(var n=0,p=this.radioOptions.length;n<p;n++){k=this.radioOptions[n];l=c.isValue(k.value)?k.value:k;r=this.getId()+"-radio"+n;this.getContainerEl().innerHTML+='<input type="radio"'+' name="'+this.getId()+'"'+' value="'+l+'"'+' id="'+r+'" />';o=this.getContainerEl().appendChild(document.createElement("label"));o.htmlFor=r;o.innerHTML=(c.isValue(k.label))?k.label:k;}var q=[],s;for(var m=0;m<p;m++){s=this.getContainerEl().childNodes[m*2];q[q.length]=s;}this.radios=q;if(this.disableBtns){this.handleDisabledBtns();}}else{}},handleDisabledBtns:function(){i.addListener(this.getContainerEl(),"click",function(j){if(i.getTarget(j).tagName.toLowerCase()==="input"){this.save();}},this,true);},resetForm:function(){for(var m=0,l=this.radios.length;m<l;m++){var k=this.radios[m];if(this.value==k.value){k.checked=true;return;}}},focus:function(){for(var l=0,k=this.radios.length;l<k;l++){if(this.radios[l].checked){this.radios[l].focus();return;}}},getInputValue:function(){for(var l=0,k=this.radios.length;l<k;l++){if(this.radios[l].checked){return this.radios[l].value;}}}});c.augmentObject(e.RadioCellEditor,a);e.TextareaCellEditor=function(j){j=j||{};this._sId=this._sId||d.generateId(null,"yui-textareaceditor");YAHOO.widget.BaseCellEditor._nCount++;e.TextareaCellEditor.superclass.constructor.call(this,j.type||"textarea",j);};c.extend(e.TextareaCellEditor,a,{textarea:null,renderForm:function(){var j=this.getContainerEl().appendChild(document.createElement("textarea"));this.textarea=j;if(this.disableBtns){this.handleDisabledBtns();}},handleDisabledBtns:function(){i.addListener(this.textarea,"blur",function(j){this.save();},this,true);},move:function(){this.textarea.style.width=this.getTdEl().offsetWidth+"px";this.textarea.style.height="3em";YAHOO.widget.TextareaCellEditor.superclass.move.call(this);},resetForm:function(){this.textarea.value=this.value;},focus:function(){this.getDataTable()._focusEl(this.textarea);this.textarea.select();},getInputValue:function(){return this.textarea.value;}});c.augmentObject(e.TextareaCellEditor,a);e.TextboxCellEditor=function(j){j=j||{};this._sId=this._sId||d.generateId(null,"yui-textboxceditor");YAHOO.widget.BaseCellEditor._nCount++;e.TextboxCellEditor.superclass.constructor.call(this,j.type||"textbox",j);};c.extend(e.TextboxCellEditor,a,{textbox:null,renderForm:function(){var j;if(b.webkit>420){j=this.getContainerEl().appendChild(document.createElement("form")).appendChild(document.createElement("input"));}else{j=this.getContainerEl().appendChild(document.createElement("input"));}j.type="text";this.textbox=j;i.addListener(j,"keypress",function(k){if((k.keyCode===13)){YAHOO.util.Event.preventDefault(k);this.save();}},this,true);if(this.disableBtns){this.handleDisabledBtns();}},move:function(){this.textbox.style.width=this.getTdEl().offsetWidth+"px";e.TextboxCellEditor.superclass.move.call(this);},resetForm:function(){this.textbox.value=c.isValue(this.value)?this.value.toString():"";},focus:function(){this.getDataTable()._focusEl(this.textbox);this.textbox.select();},getInputValue:function(){return this.textbox.value;
}});c.augmentObject(e.TextboxCellEditor,a);h.Editors={checkbox:e.CheckboxCellEditor,"date":e.DateCellEditor,dropdown:e.DropdownCellEditor,radio:e.RadioCellEditor,textarea:e.TextareaCellEditor,textbox:e.TextboxCellEditor};e.CellEditor=function(k,j){if(k&&h.Editors[k]){c.augmentObject(a,h.Editors[k]);return new h.Editors[k](j);}else{return new a(null,j);}};var g=e.CellEditor;c.augmentObject(g,a);})();YAHOO.register("datatable",YAHOO.widget.DataTable,{version:"2.9.0",build:"2800"});
/*   Author: Mario Latendresse, first version September 2009.
                                cellular overview, October 2009.

     General documentation describing some implementation details
     are in implementation.txt. See also README.txt.

*/


/* Some general useful functions. */


function isArray (value) {
    return value && typeof value === 'object' && value.constructor === Array;
}

Array.prototype.removeByValue = function(val) {
  for(var i=0; i<this.length; i++) {
    if(this[i] == val) {
      this.splice(i, 1);
      break;
    }
  }
}

/*
Array.prototype.map = function(fn) {
  var r = [];
  var n = this.length;
  for(var i=0; i < n; i++) {
    r.push(fn(this[i]));
  }
  return r;
};
*/

function MapArray(array, fn) {
  var r = [];
  var n = array.length;
  for(var i=0; i < n; i++) {
    r.push(fn(array[i]));
  }
  return r;
};


Array.prototype.removeDuplicates = function(valueFn) {
  var temp = {};
  for (var i = 0; i < this.length; i++)
    temp[valueFn(this[i])] = this[i];
  var r = [];
  for (var k in temp)
    r.push(temp[k]);
  return r;
  }

/* Data structures
   ---------------

   1) A node structure for regulatory overview has the following form:

     { frameId: string, x: integer, y: integer,
       x1:integer, y1:integer, x2:integer, y2:integer
       s: integer}

   where o frameId: is a key to the object represented at this node.
         o (x, y) are the coordinates of the center of the node, in pixels.
         o (x1, y1), (x2, y2) are the coordinates (in pixels) of the
            top-left and bottom-right corners, respectively, of the
            bounding-box of this node (e.g., used for tooltip).
         o s is the size of the node, in 2.pixels)

    A zoom level structure:
      (for cellular overview, the layout and uniqueId fields are missing)

      { nodes: array of node structures, orgid: string,
        layout: string, uniqueID: string };

   3) A node structure for cellular overview:

       { frameId: string, type:string, name:string,doc:string,
         x:int, y:int, x1: int, y1:int, x2:int, y2:int }
*/

var dialogListNodes = null; // shared between cel and reg overviews.

/* =========================== REGULATORY OVERVIEW ============================ */

var oRegContextMenu;

// The context menu when right-clicking in a blank area of the regulatory overview.
var regBlankAreaContextMenuItems = [
  { text: "Display Complete Regulatory Overview",
    onclick : {fn: function(){regDisplayCompleteOverview()}}},
  { text: "Change Layout",
    className: "regNodeOperations",
    onclick: {fn: function(){regChangeLayoutShow()}}},
  { text: "Highlight Gene By Name or Frame ID",
    onclick: {fn: function(){ regDialogNameOrFrameID.show()}}},
  { text: "Highlight Genes By Substring",
    onclick: {fn: function(){ regDialogSubstring.show()}}},
  { text: "Highlight Genes By Gene Ontology Terms",
    onclick: {fn: function(){ regInitDialogGeneOntology()}}},
  { text: "Redisplay Subnetwork Based on Highlighted Genes Only",
    onclick: {fn: function(){regRedisplayHighlightedGenesOnly()}}},
  { text: "Clear All Highlighting",
    onclick: { fn:clearAllHighlightedGenes}},
  { text: "Show Legend",
    onclick: {fn: function(){regDialogLegend.show()}}},
  { text: "Help",
    onclick: {fn: function(){window.open("/PToolsWebsiteHowto.shtml#regOverview");}}}
];

/* Initialize the right-click menu of the regulatory overview.

   Arguments: map, a OpenLayer map.
              zoomLevels, array of zoomLevel structures.
   Returns: nothing.
 */

/*
function ORIGINALinitRegContextMenu(map, zoomLevels) {

   // Called when the right click occurs, args are ignored.
  function onContextMenuTrigger(s_type, a_args) {
    // s_type is the string of the event type, always should be "triggerContextMenu"
    // a_args is an array of args: should be of length 1, and that item should be the event
     // Remove any mouse over tooltip.
    removeTooltip();
    if (!checkOrgidRegulatory(orgID())) return;

    var zoomLevel = map.zoom;
    // The event passed in has x,y values relative to the window,
    // we need x,y values relative to the Layer (found in ovMouseMove.e).
    // var e = a_args[0];
    var e = ovMouseMove.e;
    var x = e.xy.x;
    var y = e.xy.y;
    var iNode = searchBoundingBox(map, zoomLevels[zoomLevel].nodes, x, y);
    var nMenuItems = oRegContextMenu.getItems().length;
    // REG-NET-WG start roughly
    if (iNode >= 0) {
       // The mouse was right-click over a node.
      var nodes = zoomLevels[zoomLevel].nodes;
      var aMainMenuItems = new Array();
      var frames = initRegOverview.frames;
      var orgid  = initRegOverview.orgid;
      var name   = frames[iNode].name;
      
      aMainMenuItems.push({ text: "Highlight Gene "+name,
                            onclick: { fn: function() {createHighlightOneGene(map, iNode, frames, orgid)}}});
      if (nodeHasDisplayedRegulatees(iNode))
        aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulatees",
                              onclick: { fn: function() {createHighlightDirectRegulatees(map, iNode, frames, orgid)}}});
      if (nodeHasDisplayedRegulators(iNode))
        aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulators",
                              onclick: { fn: function() {createHighlightDirectRegulators(map, iNode, frames, orgid)}}});
      if (nodeHasDisplayedRegulators(iNode) && nodeHasDisplayedRegulatees(iNode))
        aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulatees and Regulators",
                              onclick: {fn: function() {createHighlightDirectRegulateesAndRegulators(map, iNode, frames, orgid)}}});
       if (nodeHasDisplayedRegulatees(iNode))
         aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct and Indirect Regulatees",
                               onclick: {fn: function() {createHighlightDirectAndIndirectRegulatees(map, iNode, frames, orgid)}}});
      if (nodeHasDisplayedRegulators(iNode))
        aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct and Indirect Regulators",
                              onclick: { fn: function() {createHighlightDirectAndIndirectRegulators(map, iNode, frames, orgid)}}});
      if (nodeHasDisplayedRegulators(iNode) && nodeHasDisplayedRegulatees(iNode))
        aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct and Indirect Regulatees and Regulators",
                              onclick: {fn: function() {createHighlightDirectAndIndirectRegulateesAndRegulators(map, iNode, frames, orgid)}}});
      
      // Really add the context menu items for the node.
      // oRegContextMenu.clearContent();
      oRegContextMenu.addItems(aMainMenuItems);
      // Remove previous menu items but leave at least one.
      // Removing all previous items should be done after adding the new ones, otherwise
      // the context menu becomes inactive.
      for (var i=0; i < nMenuItems; i++) {
        oRegContextMenu.removeItem(0);
      }
    }
    // REG-NET-WG FINISH roughly 
    else {
      // oRegContextMenu.clearContent();
      oRegContextMenu.addItems(regBlankAreaContextMenuItems);
      // Remove previous menu items but leave at least one.
      // Removing all previous items should be done after adding the new ones, otherwise
      // the context menu becomes inactive.
      for (var i=0; i < nMenuItems; i++) {
        oRegContextMenu.removeItem(0);
      }
    }
    // logMsg('onContextMenuTrigger aMainMenuItems length '+aMainMenuItems.length);
  }
  
  // Create the context menu.
  oRegContextMenu = new YAHOO.widget.ContextMenu("regNodeOperations",
                                                 {trigger: "mapReg", zindex: 100});
  // The menu over the blank area.
  oRegContextMenu.addItems(regBlankAreaContextMenuItems);
  
  // Add a "move" event handler to the context menu
  oRegContextMenu.subscribe("triggerContextMenu", onContextMenuTrigger, oRegContextMenu, true);
  
  // Render the context menu
  oRegContextMenu.render(document.body);
  
  // For IE, warn the user that highlighting could be slow.
  if (YAHOO.env.ua.ie > 0) {
    var warningIEDialog = new YAHOO.widget.Dialog("warningIEDialog",
                                                  { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
                                                    buttons: [ { text:"Ok", handler: function(){warningIEDialog.hide()}, isDefault:true }
                                                             ]
                                                  });
    warningIEDialog.setHeader("Internet Explorer, Regulatory Overview Warning");
    warningIEDialog.setBody("Please note that for Internet Explorer, some operations for this Regulatory Overview, such as highlighting a large number of objects (e.g., 100), might be slow. The Firefox and Chrome browsers do not have such an issue.");
    warningIEDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
    warningIEDialog.render(document.body);
  }
}
*/

function initRegContextMenu() {

  // Create the context menu.
  oRegContextMenu = new YAHOO.widget.ContextMenu("regNodeOperations",
                                                 {n: 100});
  // The menu over the blank area.
  oRegContextMenu.addItems(regBlankAreaContextMenuItems);
  
  // Add a "move" event handler to the context menu
  // oRegContextMenu.subscribe("triggerContextMenu", onContextMenuTrigger, oRegContextMenu, true);
    YAHOO.util.Event.on("regNodeOperations", "mouseleave", function (e) {
	oRegContextMenu.hide();
    });
  // Render the context menu
  oRegContextMenu.render(document.body);
}

function regNodeSpecificMenuItems(tip) {
    var iNode = tip[8];
    if (iNode >= 0) {
	// The mouse was right-click over a node.
	var aMainMenuItems = new Array();
	var frames = WG.wgactive.nodeDesc; // initRegOverview.frames;
	var orgid  = initRegOverview.orgid;
	var name   = tip[3];
	var nMenuItems = oRegContextMenu.getItems().length;

	aMainMenuItems.push({ text: "Highlight Gene "+name,
                              onclick: { fn: function() {
					 // {createHighlightOneGene(map, iNode, frames, orgid)}
				  {createHighlightOneGene(iNode, frames, orgid)}}}});
	if (nodeHasDisplayedRegulatees(iNode))
	    aMainMenuItems.push({ text: "Print "+name+" Regulatee Network to File",
				  onclick: { fn: function() {
				      getRegNetFile(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulatees(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Regulatees",
				  onclick: { fn: function() {createHighlightDirectAndIndirectRegulatees(iNode, frames, orgid)}}});
/*	if (nodeHasDisplayedRegulatees(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulatees",
				  onclick: { fn: function() {createHighlightDirectRegulatees(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulatees(iNode))
	    aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulatees which are Regulators",
				  onclick: { fn: function() {createHighlightOnlyDirectRegulateesRegulators(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulatees(iNode))
	    aMainMenuItems.push({ text: 'Highlight Gene '+name+' and its Direct&nbsp;and&nbsp;Indirect Regulatees which are Regulators',
				  onclick: { fn: function() {createHighlightDirectAndIndirectRegulateesWhichRegulate(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulatees(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct and Indirect Regulatees",
				  onclick: {fn: function() {createHighlightDirectAndIndirectRegulatees(iNode, frames, orgid)}}});
*/
	if (nodeHasDisplayedRegulators(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulators",
				  onclick: { fn: function() {createHighlightDirectRegulators(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulators(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct and Indirect Regulators",
				  onclick: { fn: function() {createHighlightDirectAndIndirectRegulators(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulators(iNode) && nodeHasDisplayedRegulatees(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct Regulatees and Regulators",
				  onclick: {fn: function() {createHighlightDirectRegulateesAndRegulators(iNode, frames, orgid)}}});
	if (nodeHasDisplayedRegulators(iNode) && nodeHasDisplayedRegulatees(iNode))
            aMainMenuItems.push({ text: "Highlight Gene "+name+" and its Direct and Indirect Regulatees and Regulators",
				  onclick: {fn: function() {createHighlightDirectAndIndirectRegulateesAndRegulators(iNode, frames, orgid)}}});
	
	// Really add the context menu items for the node.
	// oRegContextMenu.clearContent();
	oRegContextMenu.addItems(aMainMenuItems);
	// Remove previous menu items but leave at least one.
	// Removing all previous items should be done after adding the new ones, otherwise
	// the context menu becomes inactive.
	for (var i=0; i < nMenuItems; i++) {
            oRegContextMenu.removeItem(0);
	}
    }
}

function getRegNetFile(iNode, frames, orgid){
    orgid = initRegOverview.orgid;
    geneid = (iNode != null) ? frames[iNode][FrameId] : null;
    genename = (iNode != null) ? frames[iNode][FrameName] : null;
    console.log("getRegNetFile called!!\n iNode: " + iNode + "\n frames: " + frames + "\norgid: " + orgid);
    var url = (geneid != null) ? "/print-reg-network?orgid="+orgid+"&object="+geneid : "/print-reg-network?orgid="+orgid;
    var filename = (geneid != null) ? orgid+"-"+genename+"-regulatee-network.txt" : orgid+"-regulatory-network.txt";
    var docElement = document.getElementsByClass('pageContentDynamic')[0];
    var origCursor = docElement.style.cursor;
    var request = new XMLHttpRequest();
    request.onload = function(e) {
	if (this.status == 200) {
	    // Create a new Blob object using the response data of the onload object
	    var blob = new Blob([this.response], {type: 'image/pdf'});
	    if (docElement != null) docElement.style.cursor=origCursor;
	    //Create a link element, hide it, direct 
	    //it towards the blob, and then 'click' it programatically
	    let a = document.createElement("a");
	    a.style = "display: none";
	    document.body.appendChild(a);
	    //Create a DOMString representing the blob 
	    //and point the link element towards it
	    let aurl = window.URL.createObjectURL(blob);
	    a.href = aurl;
	    a.download = filename;
	    //programatically click the link to trigger the download
	    a.click();
	    //release the reference to the file by revoking the Object URL
	    window.URL.revokeObjectURL(aurl);
	    alertUser(filename+" has been downloaded into your download folder");
	}else{
	    //deal with your error state here
	}
    };
    /*
    var regNetErrMsg = (genename != null)
	? '(Error 10b) A Web server error occurred retrieving the Regulatee Network for Gene '+genename
	: '(Error 10b) A Web server error occurred retrieving the Regulatory Network for Organism '+orgid;
    var regNetGenErrMsg = (genename != null)
	? 'The generation of the Regulatee Network for Gene '+genename+', for organism '+orgid+', failed on the server.'
        : 'The generation of the Regulatory Network for organism '+orgid+', failed on the server.'
    request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      try {
	eval(this.responseText);
      } catch(e) {
	showServerError(regNetErrMsg, e, this.responseText);
	showOvNotBusy();
	return null;
      };
      
      if (typeof(waitDescriptor) == 'string') {
	showOvBusy(waitDescriptor);
      }
      else if (typeof(descriptor) == 'string') {
	showError(regNetGenErrMsg, descriptor, 'Cellular Overview Error on Server');
	showOvNotBusy();
	return null;
      }
	else { showOvNotBusy(); return descriptor; }
    }
    };
*/
    request.open("GET", url, true);
    request.setRequestHeader("Accept", "text/*");
    if (docElement != null) docElement.style.cursor='progress';
    request.send();
}

function RegOvContextMenu(event, tip) {
  // Remove any mouse over tooltip.
  removeNonPermanentRegToolTips();
  // if(!checkOrgidReg(orgID())) return;                   // is there a cell overview for this org?
  // billingt:Mar-7-2013
  var x          = event.x;
  var y          = event.y;
  if (window.oRegContextMenu) oRegContextMenu.hide();
  if (tip != null) {                                         // on a node, get node specific info
    oRegContextMenu.clearContent();
//    var continuation = function (nodeTypeSpecificMenuItems) {
      var nodeSpecificMenuItems = regNodeSpecificMenuItems(tip);
      oRegContextMenu.addItems(nodeSpecificMenuItems)
      oRegContextMenu.moveTo(x-5,y-5)
      oRegContextMenu.render();                                   // after clearing and adding, re-render
      oRegContextMenu.show();
//    };

  } else {                                                      // NOT on a node, so put up generic menu
    oRegContextMenu.clearContent();
    oRegContextMenu.addItems(regBlankAreaContextMenuItems);
    oRegContextMenu.moveTo(x-5,y-5)
    oRegContextMenu.render();                                   // after clearing and adding, re-render
    oRegContextMenu.show();}
}

function removeNonPermanentRegToolTips(){
  if (showRegTooltip.popups){
    for (var i=0; i < showRegTooltip.popups.length; i++) {
      if (showRegTooltip.popups[i].dialog == null)
        showRegTooltip.popups.splice(i,1);
      else if (!showRegTooltip.popups[i].keepOpen) {
        showRegTooltip.popups[i].dialog.destroy();
        // Remove this popup from array.
        showRegTooltip.popups.splice(i,1);
      }
    }
  }
}

function removeAllCelToolTips() {
  while (showCelTooltip.popups.length > 0) {
    var p = showCelTooltip.popups.pop();
    p.dialog.destroy(); } }

/* Remove all non-omics highlighting on the cellular overview. */
function clearAllHighlightingCel(){
  if (initCelOverview.layers.length == 0) return;
  askBeforeExec("Are you sure you want to clear (remove) all highlighting?",
                "Clear All Highlighting",
   function (){
     showOvBusy();
     WG.ClearHighlight(null);
     dialogListNodesClose(initCelOverview);
     queryHighlightedNodes = new Array();
     initCelOverview.layers = new Array();
     resetOvColor();
     document.getElementById("layerSwitcherDataLayersDiv").innerHTML = null;
     document.getElementById("layerSwitcherDataLbl").style.display = "none";
     showOvNotBusy();
 });
}



/* Return true if node has regulatees that are displayed at the current zoom level.
   Currently, the implementation is such that frames only contain the displayed nodes.
 */
function nodeHasDisplayedRegulatees(iNode){
    // return initRegOverview.frames[iNode].outs.length > 0;
    return WG.wgactive.nodeDesc[iNode][FrameRegulatees] ? WG.wgactive.nodeDesc[iNode][FrameRegulatees].length > 0 : null;
}

/* Return true if node has regulators that are displayed at the current zoom level.
   Currently, the implementation is such that frames only contain the displayed nodes.
 */
function nodeHasDisplayedRegulators(iNode){
  // return initRegOverview.frames[iNode].ins.length > 0;
    return WG.wgactive.nodeDesc[iNode][FrameRegulators] ? WG.wgactive.nodeDesc[iNode][FrameRegulators].length > 0 : null;
}

/* a is an array of elements in ascending order.
 */
function findDichotomic(e, a) {
  var l = 0;
  var r = a.length - 1;
  while (l <= r) {
    var c = Math.floor((l + r) / 2);
    if (a[c] == e) return c;
    else if (a[c] < e) l = c+1;
    else r = c-1;
  }
  return false;
}

/* Arguments: frameID, an frameid string.
              frames, an array of structures with a field named frameId.

   Returns: an integer, an index i from frames such that frames[i].frameId = frameId.
            or false if frameId is not found in frames.
*/
function frameIdToIndex(frameId, frames){
    var result = null;
  for (var i = 1; i < frames.length; i++) {
      (frameId == frames[i][FrameId]) ? result = i : null;
  };
    return (result == null) ? false : result;
}

/*

*/
function frameIdToIndices(frameId, nodes){
  var result = new Array();
  for (var i = 0; i < nodes.length; i++) {
    if (frameId == nodes[i].frameId) result.push(i);
  }
  return result;
}


/* Called when the regulatory overview Web page is loaded.

   o Create the base map layer and the layer for all geometric figures
     for highlighting and mouse over.

   o Register all global events for mouse tracking and zooming
     and contextual menus.

   o Find the right zooming level for the first overview based
     on the size of the current window of the browser.

   o Initiate the download of the first tiles and center the map.

/*
function ORIGINALinitRegOverview(){
    // These two values must be the same as the ones used
    // in cwes-methods.lisp for method process-valid-command :reg-overview-image.
    initRegOverview.extent_width  = 1600;
    initRegOverview.extent_height = 800;

    // alert('initRegOverview');
    if (document.getElementById("mapReg") == undefined ||
        document.getElementById("mapReg") == null) {
      alertUser('initRegOverview: this Web page has no mapReg div element. Cannot continue.');
      return;
    }
    var cLSW  = new OpenLayers.Control.LayerSwitcher({name:'layerSwitcher', div:OpenLayers.Util.getElement('layerSwitcher')});

    var optionsMap = { controls: [  new OpenLayers.Control.Navigation(),
                                    new OpenLayers.Control.PanZoomBar(),
                                    cLSW
                                    // new OpenLayers.Control.MousePosition(),
                                    // new OpenLayers.Control.KeyboardDefaults()
                                    // Currently, overviewMap does a request to the server
                                    // for the overview which we cannot handle yet.
                                    //, new OpenLayers.Control.OverviewMap({size:new OpenLayers.Size(200,130)})
                       ]
                       , buffer: 1
                       , numZoomLevels: initRegOverview.nbZoomLevels
                       , maxExtent: new OpenLayers.Bounds(0, 0, initRegOverview.extent_width-1,
                                                          initRegOverview.extent_height-1)
                       , singleTile: false
                       , tileSize: new OpenLayers.Size(400, 200)
                       // TBD: write code based on the length of initRegOverview.resolutions.
                       , resolutions: initRegOverview.resolutions
                       , units: "dd"
    };

    var controlOptions = { numZoomLevels: initRegOverview.nbZoomLevels
                           , maxExtent: new OpenLayers.Bounds(0, 0, initRegOverview.extent_width-1,
                                                              initRegOverview.extent_height-1)
                           , singleTile: false
                           , tileSize: new OpenLayers.Size(400, 200)
                           // TBD: write code based on the length of initRegOverview.resolutions.
                           , resolutions: initRegOverview.resolutions
                           , units: "dd"};

    var map = new OpenLayers.Map('mapReg', optionsMap);
    cLSW.maximizeControl(null);
    initRegOverview.map = map;

    var controlOptions = {mapOptions: controlOptions};
    var style1 = new OpenLayers.Style({pointRadius: 2, fillColor: "none",
                                       strokeColor: "black", strokeWidth: 2}
                                     );
    var styleMap1 = new OpenLayers.StyleMap(style1);

    // This layer is used to add geometric figures to the map. It must be added first
    // since this is assumed so by fn addTempGeometricFigures.
    var vector_layer = new OpenLayers.Layer.Vector("Regulatory&nbsp;Overview&nbsp;Geometric&nbsp;Figures",
                                                   {styleMap: styleMap1, displayInLayerSwitcher: false});
    map.addLayer(vector_layer);
    // logMsg(map.events.eventTypes);
    map.events.register('mousemove', map, ovMouseMove);
    map.setLayerZIndex(vector_layer,0);

    var fnLeftClick = function(e){mouseRegLeftClick(e, map, initRegOverview.zoomLevels, initRegOverview.frames)};
    map.events.register('click', map, fnLeftClick);

    // Add a regulatory overview layer
    var layer = new OpenLayers.Layer.RegOvServer( "Regulatory&nbsp;Overview",
                // Do not specify the organism as this is done in RegOvServer.js. gif-only=t should be removed.
                "reg-overview-image?gif-only=t",
                {} ,
                {singleTile: false, isBaseLayer: true, "z-index": 0, zindex: 0}
                );
    // Set the layer such that the menu bar popups do not lay behind the map.
    map.setLayerZIndex(layer,0);
    map.addLayer(layer);

    // Each time a zoom (in or out) is done do something.
    map.events.register("zoomend", map, function(e){ regZoomEnd(e, map) });

    // Event 'movestart' is triggered after the start of a drag, pan, or zoom.
    map.events.register("movestart", map, function(e) {
        // alert('test event movestart, level: '+map.zoom);
        var zoomLevel = map.zoom;
    });

    // We zoom at the level that would almost fill the current window,
    // without having nodes outside the window.
    var wh = get_browser_window_size();
    var window_width  = wh[0];
    var window_height = wh[1];
    var zoomTo = 0; // lowest possible zoom level for now.
    // Find a higher zoomTo level if it fits in the current browser window.
    for (var i=0; i < map.resolutions.length; i++) {
        // Subtract about 20 pixels since the resulting regulatory overview rarely spans the
        // entire extent width or height.
        if(window_width  < (initRegOverview.extent_width  / initRegOverview.resolutions[i]) - 20) break;
        if(window_height < (initRegOverview.extent_height / initRegOverview.resolutions[i]) - 20) break;
        zoomTo = i;
    }

    initRegContextMenu(map, initRegOverview.zoomLevels);
    activateMouseTracking(initRegOverview, 300);

    var clon = initRegOverview.extent_width  / 2.0;
    var clat = initRegOverview.extent_height / 2.0;

    map.setCenter(new OpenLayers.LonLat(clon, clat), zoomTo);
    regZoomEnd(null, map);
}
*/
function getRegOvDescriptor(orgid) {
  var url  = "/"+orgid+"/reg-overview-descriptor";
  var descriptor      = null;
  var generated       = false;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      try {
	eval(this.responseText);
      } catch(e) {
	showServerError('(Error 10) A Web server error occurred retrieving the Cellular Overview descriptor ', e, this.responseText);
	initRegOverview.descriptor = null;
	return 0;
      };
      
      // If the response is a string in descriptor, this is an error message.
      if (typeof(descriptor) == 'string') {
	showError('The Web server encountered the following difficulty for displaying the Regulatory Overview of organism '+orgid+'.', 
		  descriptor, 'Regulatory Overview Error on Server');
	initRegOverview.descriptor = null;
	return 0;
      }
      else {
	initRegOverview.descriptor = descriptor;
	return (initRegOverview.descriptor.length);
      }
    }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function determineRegInitZoomLevel() {
  var zoomLevel = getUrlVar("zoomlevel"); // Get zoom level from URL, if any.

  if (zoomLevel)
    zoomLevel = Math.min((initCelOverview.nbZoomLevels - 1), Math.max(0, parseInt(zoomLevel)));
  else{
    // Not given in URL, compute it.
    zoomLevel = 0;
    /* not for WG
    // We zoom at the level that would almost fill the current window,
    // without having relevant tiles outside the view port.
    var wh = get_browser_window_size();
    var window_width  = wh[0];
    var window_height = wh[1];
    // Find a higher zoomTo level if it fits in the current browser window.
    for (var i=0; i < map.resolutions.length; i++) {
        // Subtract about 20 pixels since the resulting regulatory overview rarely spans the
        // entire extent width or height.
        if(window_width  < (initCelOverview.extent_width  / map.resolutions[i]) - 20) break;
        if(window_height < (initCelOverview.extent_height / map.resolutions[i]) - 20) break;
        zoomLevel = i;
    }
    */
  }
  return zoomLevel;
}

function initRegOverview(){
    // These two values must be the same as the ones used
    // in cwest-methods.lisp for method process-valid-command :reg-overview-image.
/* NOT FOR WG
    initRegOverview.extent_width  = 1600;
    initRegOverview.extent_height = 800;
*/
    // alert('initRegOverview');
    if (document.getElementById("mapReg") == undefined ||
        document.getElementById("mapReg") == null) {
      alertUser('initRegOverview: this Web page has no mapReg div element. Cannot continue.');
      return;
    }
    determineOrgIdFromURL() // webservice call would need this.

    // Get description of this Reg Ov based on selected orgid.
    getRegOvDescriptor(orgID());
    initRegOverview.nbZoomLevels = initRegOverview.resolutions.length;
    initRegOverview.orgid = orgID();  
    var zoomTo = determineRegInitZoomLevel();
    initRegContextMenu();
    WG.LoadRegulatoryOverview(orgID(),zoomTo,'mapReg','inside-out');
    showOrganismNameReg(orgID());
}

// The number of zoom levels should be limited so that large images
// are not requested to the server.
// These resolutions must match the ones in reg-network.lisp, parameter reg-resolutions.
initRegOverview.resolutions = [0.72727275, // 0.36363637,
				               // 1.333333333,
				               // 1.0,
				   1.6666666666,   // 0.8,
				               // 0.6666666666,
 				               // 0.44444445,
				   2.7586207,  // 2.6666666666, // 1.333333333,
				   4.0 ]       // 4.4 // 4.0 // 3.333333333 // 2.0
			       // 0.30769232];
initRegOverview.nbZoomLevels = initRegOverview.resolutions.length;
// Each zoom level has its own set of nodes.
initRegOverview.zoomLevels   = new Array(initRegOverview.nbZoomLevels);
initRegOverview.map    = null;
initRegOverview.layers = new Array();
initRegOverview.omics  = null; // Data structure for omics viewer.

/* The frames field is an array of frame structures that describe
   the genes, their regulatees and regulators. If uniqueID
   is a non-empty string, then the frames are for a subset of the
   entire regulatory overview of the organism. The orgid field is
   a string that identifies the database of the organism on the
   server.
 */
initRegOverview.frames   = null;
initRegOverview.orgid    = null;
initRegOverview.uniqueID = null;

/* REG-NET-WG */
function handleRegHighlightSubstring(){
  var stringName           = document.getElementById('regSubstringName').value;
  var includeRelationships = document.getElementById('includeRelationships').checked;
  var layerName            = "Substring '"+stringName+"'";

  regDialogSubstring.hide();
  showOvBusy('Highlighting Substring');
  if (stringName.length == 0) {
     var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }
                        ]
             });
     noHighlightingDialog.setHeader("Highlight Genes Substring Warning");
     noHighlightingDialog.setBody("No gene substring name was entered.");
     noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
     noHighlightingDialog.render(document.body);
     showOvNotBusy();
     return;
  }
  else {
      var oneZoomLevel = WG.GetCurrentZoomLevel(); // initRegOverview.zoomLevels[map.zoom];
   if (oneZoomLevel == null) {
       regDialogSubstring.hide(); return;
   }
      var frames   = WG.wgactive.nodeDesc; // initRegOverview.frames;
      var fnSearchNodes = function (frames) {return searchRegSubstringFrames(frames, stringName);}
      var orgid    = initRegOverview.orgid;
      var iNodes   = fnSearchNodes(frames);
      var frameIDs = [];
      for (var x = 0; x < iNodes.length; x++)
	  frameIDs.push(frames[iNodes[x]][FrameId]);
   // logMsg('handleRegHighlightSubstring number of nodes found '+iNodes.length);
      if (iNodes.length > 0) {
	  addRegHighlightLayer(frames, iNodes, layerName, stringName, includeRelationships, orgid, frameIDs);
      } else { // warning: nothing to highlight
	  var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
              { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
              buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }
                       ]
              });
	  noHighlightingDialog.setHeader("Highlight Genes Substring Warning");
	  noHighlightingDialog.setBody("No gene was found with substring '"+stringName+"'.");
	  noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
	  noHighlightingDialog.render(document.body);
	  showOvNotBusy();
	  return;
      }
  }
    showOvNotBusy();
}

function regInitDialogGeneOntology(){
  // Gene Ontology Browser (code adapted from search.js)
  YAHOO.util.Dom.get("GOID").value = "";
  clearTree(YAHOO.module.GO);

  var GOSelector = ACNameSelector(YAHOO.util.Dom.get("GOName"),
                                  YAHOO.util.Dom.get("GOContainer"),
                                  YAHOO.util.Dom.get("GOID"), "GO-TERMS");
  YAHOO.module.GO = new YAHOO.widget.Module("GOModule", { visible: true });
  classBrowser ("goTree", "Gene-Ontology-Terms", YAHOO.module.GO);
  YAHOO.module.GO.render();

  GOSelector.keydown(function () { clearTree(YAHOO.module.GO);});

  YAHOO.module.GO.showEvent.subscribe (function() {
    var tree = trees[YAHOO.module.GO];
    tree.subscribe ("checkClick", function (node) {
      YAHOO.util.Dom.get("GOID").value = "";
      YAHOO.util.Dom.get("GOName").value = "";
    });
  });

  regDialogGeneOntology.show();
}

/* The user clicked "Highlight" in the GO dialogue.
   Gather the GO terms, then request all the Gene frame-ids
   from the server according to the GO terms. The genes
   to highlight are the intersection of these genes with the ones
   in the current displayed regulatory network.

*/
function handleRegHighlightOntology(){
  var orgid = initRegOverview.orgid;
  var goTerms = "";
  var goTermsExp = "";
  var includeRelationships = document.getElementById('includeRelationshipsGO').checked;

  if (isVisible(YAHOO.module.GO)) {
    var goid = document.getElementById('GOID').value;
    var goname = document.getElementById('GOName').value;
    var gochecked = getCheckedNodes(trees[YAHOO.module.GO].getRoot());
    if (gochecked.length > 0) {
      goTerms = gochecked.join(', ');
      goTermsExp = gochecked.join('\\\" | t isa \\\"');
    }
    else if (goid)   { goTermsExp = goid; goTerms = goid}
    else if (goname) { goTermsExp = goname; goTerms = goname}
  }

  if (goTerms.length > 0) {
    // Get the gene frame-ids from the server.
    var bvQuery = '[g^frame-id:g<-'+orgid+'^^genes,#[p:p<-g^product, #[t:t<-p^go-terms,t isa \\\"'+goTermsExp+'\\\"]>0]>0]';
    var urlGET = '/query?submit=Submit+Query&object=("TABULATED"+"'+encodeURIComponent(bvQuery)+'")';

    showOvBusy('Retrieving gene data from server.');
    xmlhttpGet(urlGET,"",
     // Function called once an answer is received from server.
     function (s) {
      // Remove separators on left and right ends of string.
      var ss = s.replace(/^\s+|\s+$/g,'');
      // Replace all sequence of separators to a single space.
	 ss = ss.replace(/\s+/g, ' ');
      // re
	 ss = ss.replace(/'|"|'/g,''); // remove any quotes
      // Array a should contain the gene frame-ids.
	 var a = ss.split(' ');
	 let frames = WG.wgactive.nodeDesc;
	 var iNodes = frameIdsToIndices(frames, a);

      if (iNodes.length == 0) {
        var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialogGOnoGene",
           { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
             buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }
                      ]
           });
        noHighlightingDialog.setHeader('Highlighting by Gene Ontology Terms Warning');
        noHighlightingDialog.setBody('No gene in the current regulatory network has any products annotated with these GO terms: '+goTerms);
        noHighlightingDialog.cfg.setProperty('icon', YAHOO.widget.Dialog.ICON_WARN);
        noHighlightingDialog.render(document.body);
      } else {
	  var frameIds = [];
	  for (var i = 0; i < iNodes.length; i++)
	      frameIds.push(frames[iNodes[i]][FrameId]);
       var nameLayer = 'GO terms '+goTerms;
	  addRegHighlightLayer(frames, iNodes, nameLayer, null, includeRelationships, orgid, frameIds);
       }
     regDialogGeneOntology.hide();
     showOvNotBusy();
    })
  }
  else {
    var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialogGO",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }
                        ]
             });
     noHighlightingDialog.setHeader("Highlighting by Gene Ontology Terms Warning");
     noHighlightingDialog.setBody("No Gene Ontology term was entered or selected.");
     noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
     noHighlightingDialog.render(document.body);
     regDialogGeneOntology.hide();
     showOvNotBusy();
     return;
  }
}


function handleRegHighlightNameOrFrameID(){
  var stringName  = document.getElementById('regNameOrFrameID').value;
  var layerName   = "Gene name or frame-id of '"+stringName+"'";
  regDialogNameOrFrameID.hide();

  if (stringName.length == 0) {
    var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }
                        ]
             });
     noHighlightingDialog.setHeader("Highlight Name or FrameID Warning");
     noHighlightingDialog.setBody("No gene name or frame-id was entered.");
     noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
     noHighlightingDialog.render(document.body);
     return;
  }
  else {
//   var map          = initRegOverview.map;
      var oneZoomLevel = WG.GetCurrentZoomLevel(); // initRegOverview.zoomLevels[map.zoom];
   if (oneZoomLevel == null || oneZoomLevel == undefined) {
       // TBD: give an internal error message.
       regDialogNameOrFrameID.hide(); return;
   }
      var frames        = WG.wgactive.nodeDesc; //initRegOverview.frames;
   var orgid         = initRegOverview.orgid;
   // var nodes         = oneZoomLevel.nodes;
      var fnSearchNode  = function(frames) {
	  var iNode = searchRegNameOrFrameIDnode(frames, stringName);
	  return (iNode >= 0) ? [iNode] : [];
      }
   var iNode         = fnSearchNode(frames);

   if (iNode.length > 0) {
//     var node          = nodes[iNode[0]];
       var frameID = frames[iNode][FrameId];
       addRegHighlightLayer(frames, iNode, layerName, null, false, orgid, [frameID]);
     // Show the node found in the center of the map. (since the node might be outside the map viewport)
     // TBD: should pan to node without moving map if node is already visible.
   }
   else { // warning nothing to highlight.xb
     var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }
                        ]
             });
     noHighlightingDialog.setHeader("Highlight Name or Frame-id Warning");
     noHighlightingDialog.setBody("The gene "+stringName+ " was not found.");
     noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
     noHighlightingDialog.render(document.body);
     return;
   }
  }
}

/* Search for a frame that has its frame-id or gene name equal to the given name.

  Arguments: frames, an array of frame structures.
             stringName, a string.
  Returns: integer. The integer is the index of a node in frames or -1 if not found.
 */
function searchRegNameOrFrameIDnode(frames, stringName){
  var s = stringName.toLowerCase();
  for (var i=1; i < frames.length; i++) {
    if (frames[i][FrameName].toLowerCase()    == s) return frames[i][FrameNodeId];
    if (frames[i][FrameId].toLowerCase() == s) return frames[i][FrameNodeId];
  }
  return -1;
}

/*  Search for frames which have stringName as a substring of their name and type
    if provided. This is a case-insensitive string search.

    Arguments: frames, an array of frame structures.
               stringName, a string.
               type, a string describing the type of objects to search.
    returns: a vector of indices in array frames.
*/
/* REG-NET-WG */
function searchRegSubstringFrames(frames, stringName){
  if (frames == null || frames == undefined) return [];
  var result = new Array();
  var queryString = stringName.toLowerCase();
  for (var i=1; i < frames.length; i++){
      var name = frames[i][3].toLowerCase();
      if (name.indexOf(queryString) >= 0) result.push(i);
    }
  return result;
}

/* Add a regulatory highlight layer based on a search.
   This function does not create a layer for the Omics Viewer.

   Arguments: frames: array of frame structures.
              iNodes: an array of indices.
              name: a string to name this highlighting layer.
              includeRelationships, true => add the arcs between the highlighted iNodes
              orgid: orgid
              frameIDs: frameIds so if we zoom to a different level we can find the relevant iNodes to redisplay
   Returns: nothing.
*/
function addRegHighlightLayer(frames, iNodes, name, sQuery, includeRelationships, orgid, frameIDs){
   var fn = function (frames, oneLayer, resultp) {
               if (!resultp) regHighlightNodes(oneLayer, frames, includeRelationships);
               return (resultp) ? iNodes : false;
            };
   // A layer for all geometric figures for this highlight.
       var oneLayer = createRegHighlightLayer(name, sQuery, iNodes, null, orgid, fn, frameIDs);
   // Highlight the nodes.
   fn(frames, oneLayer, false);
}
/* Highlight the given nodes with a color. Used for Omics Viewer too.

   Arguments: oneLayer, a layer structure.
              iNodes, array of indices. Nodes to highlight.
                      If null, then oneLayer.tuples contains
                      an array of triples [frameid, color, value]
                      coming from some expression data (omics viewer).
              frames, array of frame structures. (needed to find direct regulators)
              includeRelationshipsP, true => includes arrows between the highlighted
                                             nodes having a relationship.
*/
/* OLD
function regHighlightNodes(oneLayer, frames, includeRelationshipsP){
  var highlightNodes = true;
    var iNodes = oneLayer.nodes;
    if (includeRelationshipsP) {
	if (iNodes) {
	    let regd = [];
	    for (var i=0; i < iNodes.length; i++){
		var node  = iNodes[i]; // nodes[iNodes[i]];
		var frame = frames[node]; // [iNodes[i]];
		// There is no need to look for regulatees since the regulators cover all cases.
		// for (var j=0; j < frame.ins.length; j++) {
		let regulators = [];
		if (frame[FrameRegulators]
		    && isArray(frame[FrameRegulators])
		    && (frame[FrameRegulators].length > 0)) {
		    for (var j=0; j < frame[FrameRegulators].length; j++) {
			// Is the regulator one of the highlighted genes?
			// if (iNodes.indexOf(frame.ins[j]) >= 0) {
			let candidate = frame[FrameRegulators][j]
			if ((iNodes.indexOf(candidate) >= 0)
			    && (node != candidate)) // ignore self-regulation
			{
			    regulators.push(candidate);
			} }
		    // var fromNode = frame[FrameRegulators][j];
		    if (regulators.length > 0) {
			let allNodes = regulators.concat([node]);
			if (highlightRegArcs(regulators, node, oneLayer, allNodes))
			    regd = regd.concat(allNodes)
			//			   
		    }}
	    }
	    if (regd.length > 0) {
		let regdSet = [...new Set(regd)];
		if (regdSet.length == iNodes.length) {
		    highlightNodes = false;
		} else {
		    let notRegd = [];
		    for (var j = 0; j < iNodes.length; j++) {
			if (regdSet.indexOf(iNodes[j]) == -1)
			    notRegd.push(iNodes[j]);
		    }
		    iNodes = notRegd;
		}
	    }}}
    // Nodes to highlight?
    if (iNodes && highlightNodes) {
	WG.RegHighlightList(oneLayer, iNodes);
    } else {
    if (oneLayer.tuples) {
    // For one step of the Omics animation.
    for (var i=0; i < oneLayer.tuples.length; i++) {
      var oneTuple = oneLayer.tuples[i];
      var j        = frameIdToIndex(oneTuple[0], frames);
      var color    = oneTuple[1];
      var style    = omicsStyle(color, map.zoom);
      if (j !== false) regHighlightOneNode(oneLayer, nodes[j], style);
    }
    }}
}
*/

function regHighlightNodes(oneLayer, frames, includeRelationshipsP){
  var highlightNodes = true;
    var iNodes = oneLayer.nodes;
    // first mark the nodes
    for (var i=0; i < iNodes.length; i++){
	var nodeId  = iNodes[i]; // nodes[iNodes[i]];
	WG.RegMark(nodeId) };
    // call unmark with a timeout - and do the rest of this
    setTimeout(WG.RegUnMark, 5000);
    if (includeRelationshipsP) {
	if (iNodes) {
	    let regd = [];
	    for (var i=0; i < iNodes.length; i++){
		var node  = iNodes[i]; // nodes[iNodes[i]];
		var frame = frames[node]; // [iNodes[i]];
		// There is no need to look for regulatees since the regulators cover all cases.
		// for (var j=0; j < frame.ins.length; j++) {
		let regulators = [];
		if (frame[FrameRegulators]
		    && isArray(frame[FrameRegulators])
		    && (frame[FrameRegulators].length > 0)) {
		    for (var j=0; j < frame[FrameRegulators].length; j++) {
			// Is the regulator one of the highlighted genes?
			// if (iNodes.indexOf(frame.ins[j]) >= 0) {
			let candidate = frame[FrameRegulators][j]
			if ((iNodes.indexOf(candidate) >= 0)
			    && (node != candidate)) // ignore self-regulation
			{
			    regulators.push(candidate);
			} }
		    // var fromNode = frame[FrameRegulators][j];
		    if (regulators.length > 0) {
			let allNodes = regulators.concat([node]);
			if (highlightRegArcs(regulators, node, oneLayer, allNodes))
			    regd = regd.concat(allNodes)
			//			   
		    }}
	    }
	    if (regd.length > 0) {
		let regdSet = [...new Set(regd)];
		if (regdSet.length == iNodes.length) {
		    highlightNodes = false;
		} else {
		    let notRegd = [];
		    for (var j = 0; j < iNodes.length; j++) {
			if (regdSet.indexOf(iNodes[j]) == -1)
			    notRegd.push(iNodes[j]);
		    }
		    iNodes = notRegd;
		}
	    }}}
    // Nodes to highlight?
    if (iNodes && highlightNodes) {
	WG.RegHighlightList(oneLayer, iNodes);
    } else {
    if (oneLayer.tuples) {
    // For one step of the Omics animation.
    for (var i=0; i < oneLayer.tuples.length; i++) {
      var oneTuple = oneLayer.tuples[i];
      var j        = frameIdToIndex(oneTuple[0], frames);
      var color    = oneTuple[1];
      var style    = omicsStyle(color, map.zoom);
      if (j !== false) regHighlightOneNode(oneLayer, nodes[j], style);
    }
    }}
}

/* Arguments: iNodes, an array of indices.
              frames, an array of frame structures.
   Returns: an array of frame ids from frames.
 */
function iNodesToFrameIds(iNodes, frames){
  var result = new Array();
  for (var i=0; i < iNodes.length; i++) {
      if (frames[iNodes[i]] == undefined) {
	  console.log('iNodesToFrameIds non-existant frame: ' + iNodes[i]);
      } else {
	  result.push(frames[iNodes[i]][FrameId]);
      }}
  return result;
}

/* Returns an array of indices in frames that have a frameId in frameIds.
   Note that frames may have several occurrences of the same frameId, so
   that the result of this fn might contain several indices referring
   to the same frameId.

   Arguments: frames, a frame or node array. (the field frameId is defined for frames)
   Returns: an array of indices in frames.
 */
function frameIdsToIndices(frames, frameIds){
  var allFrameIds = flattenFrameIds(frameIds);
  var result = new Array();
  //alert(allFrameIds.length);
  //alert(frames.length);
  for (var i=1; i < frames.length; i++) {
    if (allFrameIds.indexOf(frames[i][FrameId]) >= 0) {
      result.push(i);
    }
  }
  return result;
}

/* Arguments: an array of frameids (strings) or of structures having at least one field 'frameids'
              {...frameids:[..]...}
   Returns: an array of strings.
*/
function flattenFrameIds(frameIds){
  // Make it efficient. If frameIds is already flatten, just return it.
  if (frameIds.length == 0
      || (typeof(frameIds[0]) == 'string')) return frameIds;
  // All the elements of frameIds are structures.
  var result = new Array();
  for (var i=0; i < frameIds.length; i++){
    result = result.concat(frameIds[i].frameids);
  }
  return result;
}


// Based on the sQuery string, returns one of the names of the node.
function chooseNodeName(node, sQuery) {
  if (!sQuery) return (node.name || node.cname);

  var sQueryL = sQuery.toLowerCase();

  if (node.name.toLowerCase().indexOf(sQueryL) >= 0)  return node.name;
  if (node.cname && node.cname.toLowerCase().indexOf(sQueryL) >= 0) return node.cname;
  if (node.nas)
    for (var i=0; i < node.nas.length; i++){
      if (node.nas[i].toLowerCase().indexOf(sQueryL) >= 0) return node.nas[i];
    }
  // If the frame-id, puts it in parenthesis next to common name or name.
  if (node.frameId.toLowerCase().indexOf(sQueryL) >= 0)
    return ((node.cname || node.name)+' ('+node.frameId+')');
  // We are left with no other choice
  return node.name;
}


/* The colors were take from the *ov-light-gray* list in ec-utils.lisp.

These colors are

   (list clim:+green+ gsp::+red+ gsp::+dark-orchid+ gsp::+orange+
          gsp::+magenta+ gsp::+turquoise+
          gsp:+dark-khaki+ gsp::+firebrick+
          gsp::+dark-goldenrod+ gsp::+light-sky-blue+ gsp::+forest-green+
          gsp:+dodger-blue+ gsp:+light-pink+ gsp:+gold+ gsp:+plum+
          gsp:+dark-khaki+ gsp:+cadet-blue+ gsp:+navajo-white+))

 You can run the following Lisp code to get the # notations used below:

 (format t "[~{~S~^, ~}]" (mapcar #'clim-color->html *ov-light-color-sequence*))

*/

function getOvColor(){
  var color = getOvColor.colors[getOvColor.noColor];
  getOvColor.noColor++;
  if (getOvColor.noColor >= getOvColor.colors.length) getOvColor.noColor = 0;
  return color;
}
getOvColor.colors = ["#ff0000", "#9932cc", "#ffa500", "#ff00ff",
                   "#40e0d0", "#bdb76b", "#b22222", "#b8860b", "#87cefa",
                   "#228b22", "#1e90ff", "#ffb6c1", "#ffd700", "#dda0dd",
                     "#bdb76b", "#5f9ea0", "#ffdead", "#00ff00"];
getOvColor.noColor = 0;

function resetOvColor(){
  getOvColor.noColor = 0;
}

/* A highlight layer structure exists for each overlay created for highlighting
   and at each zoom level. This layer can also be for the Omics Viewer.

   Arguments: name, a string for the name of the layer.
              sQuery, a string.
              fn, a function of two parameters: frames and a structure layer
                    (used to redisplay the layer at some zoom level)
              tuples, for omics viewer.
              orgid, a string.
   Returns: a layer structure.
*/

   function createRegHighlightLayer(name, sQuery, nodes, tuples, orgid, fn, frameIDs){
  // var map        = initRegOverview.map;
  // Create a layer just for this highlighting. The style is for the default values.
  var color      = getOvColor();
  var styleMap   = createRegStyleMap(color);
  var i          = initRegOverview.layers.length;

   /*
        Create a reg highlight layer structure.

          layer:       an OpenLayer layer (aka overlay). Could be null.
          styleMap:    an OpenLayer style map that was used for the OpenLayer layer.
          name:        a string to use for the right panel of overlay names.
          tuples:  ??
          color:       the color used to highlight nodes and arcs.
          queryString: a string, the string to use to do a substring query.
          IGNORE fn:          a closure of three parameters that can add the features to this layer.
                       The first parameter is an array of frames, the second a layer structure.
                       Used, for example, when zoom-in/-out.
          nodes:       an array of node indices
	  collection:  A list of all the unique nodeIds in this layer.  (From createCelLayer( ) )
          orgid:       the organism id for this layer.
          layout:      a string representing the regulatory layout used for this layer.
                       Current possible values: 'inside-out', 'top-to-bottom'.
          visible:     true => the layer is visible on the map, otherwise it is not.
                       note: the layer field could be null and you cannot rely on it in all cases
                             to determine if this layer is visible.
   */
  var oneLayer = {
      layer: null, styleMap: styleMap,
      queryString: sQuery,
      tuples: tuples,
      color: color, 
      name: name, 
      frameIDs: frameIDs,
      nodes: nodes,
      collection: [],
      fn: fn,
      orgid: orgid,
      layout: getRegLayout(),
      visible: true,
      i: i};
    addRegHighlightOpenLayer(oneLayer);

  if (!tuples) initRegOverview.layers.push(oneLayer);
  else initRegOverview.omics.layers.push(oneLayer);
  return oneLayer;
}

function createRegStyleMap(color){
   var style = new OpenLayers.Style({pointRadius: 2, fillColor: color,
                                     strokeColor: color, strokeWidth: 2
                                    });
   var styleMap = new OpenLayers.StyleMap(style);
   return styleMap;
}

/* Arguments: name, a string to name the layer. It is displayed in the Switch Panel.
              visible, true => make the layer visible right away.
              i, integer, the index of the layer in initRegOverview.
   Returns: an OpenLayer layer.
   billingt:Oct-10-2013 : changes to make list button and highlight checkbox work correctly,
                          independently and appear on the same line
*/
/* REG-NET-WG */
function addRegHighlightOpenLayer(oneLayer){
//  var map          = initRegOverview.map;
//    var styleMap     = (oneLayer.tuples == null) ? oneLayer.styleMap : createOmicsStyleMap('white',WG.GetCurrentZoomLevel()); //map.zoom);
    var name         = oneLayer.name;
    var color        = oneLayer.color;
    var visible      = oneLayer.visible;
    var i            = oneLayer.i;
//  var visibleSwitcher = (oneLayer.tuples == null);
    var nameColored     = "<font style='color:"+color+"'>"+name+"</font>";
    var toggleId = "toggleHighlight"+i;
    var toggleButtonDef = "<input type='checkbox' id='"+toggleId+"' onclick='toggleHighlightList("+i+");' checked/>";
    var listButtonDef = "<input type=button value='List' href='#' onclick='showHighlightedList(event, "+i+", initRegOverview);'/>"
    var nameColoredOnClick = '<div style="display: inline"><div style="display: inline">'+toggleButtonDef+listButtonDef+'</div><div style="display: inline">'+nameColored+'</div></div>';
//  var layerHighlight  = new OpenLayers.Layer.Vector(nameColoredOnClick, {styleMap: styleMap, displayInLayerSwitcher: visibleSwitcher});
    oneLayer.nameColoredOnClick = nameColoredOnClick;
//  oneLayer.layer = layerHighlight;
  var dataLayerDiv = document.getElementById("layerSwitcherDataLayersDiv");
  dataLayerDiv.innerHTML = dataLayerDiv.innerHTML+"<br>"+nameColoredOnClick;
  document.getElementById("layerSwitcherDataLbl").style.display="inline";
//  layerHighlight.setVisibility(visible);
//    initRegOverview.layers.push(oneLayer); // map.addLayer(layerHighlight);
    return oneLayer;
}


/* This is typically called by the user to clear all highlighting.
   Remove all highlighting layers.
*/
function clearAllHighlightedGenes(){
  if (initRegOverview.layers.length == 0) return;
  askBeforeExec ("Are you sure you want to clear (remove) all highlighting?",
                 "Clear All Highlighting",
                 function (){
                   showOvBusy();
                   // Make sure the user really wants to remove all highlighting
//                   destroyAllHighlightedLayers();
                   initRegOverview.layers = new Array();
//                   dialogListNodesClose(initRegOverview);
                   resetOvColor();
		     WG.ClearHighlight(null);
		     document.getElementById("layerSwitcherDataLayersDiv").innerHTML = null;
		     document.getElementById("layerSwitcherDataLbl").style.display = "none";

		     dialogControlRegulateeIndirectionLevelClose(initRegOverview)
		     dialogControlRegulateeIndirectionLevel = null;

                   showOvNotBusy();
                  });
}

function clearAllZoomLevels() {
  for (var i=0; i < initRegOverview.zoomLevels.length; i++) {
    initRegOverview.zoomLevels[i] = null;
  }
}

/* Destroy the OpenLayers layers, but not the layer structures.
   Record the state (visible or not) of the layer to reconstruct it in
   that state when redisplayed.

   Returns: nothing.
*/
function destroyAllHighlightedLayers(){
  // Destroy all layers for highlighting genes.
  for (var i=0; i < initRegOverview.layers.length; i++) {
    var oneLayer = initRegOverview.layers[i];
    if(oneLayer.layer != null) {
      oneLayer.visible = oneLayer.layer.visibility;
      oneLayer.layer.destroy();
    }
    oneLayer.layer = null;
  }
}


/* When a zoom in/out is done, all highlighting must be
   removed and redisplayed at the proper zoom level.

   Arguments: map, the map of the highlighted layers to redisplay.
              oneZoomLevel, a zoom level structure.
   Returns: nothing.
*/
function regReHighlightGenes(map, oneZoomLevel) {
   if (!checkOrgidRegulatory(orgID())) return;
   destroyAllHighlightedLayers();
   // Render all relevant regulatory highlight layers.
   for (var i=0; i < initRegOverview.layers.length; i++) {
       var oneLayer = initRegOverview.layers[i];
       // If this layer applies to the oneZoomLevel, redo highlighting.
       if (oneLayer.orgid == oneZoomLevel.orgid) {
         // The OpenLayers layer was destroyed to remove the highlightings. Create a new one.
         addRegHighlightOpenLayer(oneLayer);
         // Highlight the nodes and the edges on this new OpenLayers layer.
         oneLayer.fn(initRegOverview.frames, oneLayer, false);
       }
   }

   // Recreate the OpenLayers layers for the Omics layers if any.
   // Destroy and recreate OpenLayers layers for the Omics Viewer (if any)
   if (animateOmics.ov && animateOmics.layers) {
     for (var i=0; i < animateOmics.layers.length; i++) {
       var oneLayer = animateOmics.layers[i];
       if(oneLayer.layer != null) oneLayer.layer.destroy();
       addRegHighlightOpenLayer(oneLayer); // Not visible in switcher panel.
       highlightLayer(oneLayer, initRegOverview);
     }
   }
}

/* Show the YUI dialog to change the layout.

*/
function regChangeLayoutShow() {
  setRegLayout(document.getElementById('regLayout').value);
  regDialogChangeLayout.show();
}

/* Called directly from the menu.

   Redisplay the network with the highlighted genes only for the
   current zoom level.  Only the active overlays should be
   considered. All inactive overlays will be deleted.  The new GIF
   image tiles must be produced by the server. A POST request is made
   to the server for a unique ID associatd with the new tile images.
   The code wait until this uniqueID is received before returning. The
   uniqueID is store in the HTML element regUniqueID. See fn
   handleRegRedisplayHighlighted.

   Returns: nothing. The regUniqueID HTML element will contain a uniqueID.
*/

function regRedisplayHighlightedGenesOnly(){
//  var map = initRegOverview.map;
    var zoomLevel = WG.GetCurrentZoomLevel(); // map.zoom;
    var frames = WG.wgactive.nodeDesc; //initRegOverview.frames;
    var orgid  = initRegOverview.orgid;
    if ((document.getElementById('regUniqueID.value') == "") ||
	(document.getElementById('regUniqueID.value') == null) ||
	(document.getElementById('regUniqueID.value') == undefined)) {
  var iNodes = new Array();
  showOvBusy();
  // Gather all the active highlighted nodes' frame-ids.
  // Note: the user can inactivate some layers using the switch panel.
  /*for (var i=0; i < initRegOverview.layers.length; i++){
    var oneLayer = initRegOverview.layers[i];
    if (oneLayer && oneLayer.layer.visibility) {
        // Reexecute the function to get the highlighted nodes.
        iNodes = iNodes.concat(oneLayer.fn(frames, oneLayer, true));
    }
  }*/
  for (var i=0; i < initRegOverview.layers.length; i++){
      var oneLayer = initRegOverview.layers[i];
    if (oneLayer) {
        // Reexecute the function to get the highlighted nodes.
	for (var j = 0; j < oneLayer.frameIDs.length; j++)
	    oneLayer.nodes.push(frameIdToIndex(oneLayer.frameIDs[j], WG.wgactive.nodeDesc));
	if (oneLayer.visible)
            iNodes = iNodes.concat(oneLayer.collection.concat(oneLayer.nodes));
    }
  }

	var iNodesSet = [... new Set(iNodes)];

  if (iNodesSet.length == 0) {
     var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [ { text:"Ok", handler: function(){noHighlightingDialog.destroy()}, isDefault:true }
                        ]
             });
     noHighlightingDialog.setHeader("Redisplay Subnetwork Based on Highlighted Genes Only Warning");
     noHighlightingDialog.setBody("There are no highlighted genes. You must highlight genes before using the command <i>Redisplay Subnetwork Based on Highlighted Genes Only</i>.");
     noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
     noHighlightingDialog.render(document.body);
  }
  else {
    // Force the layout to top-to-bottom
    document.getElementById('regLayout').value = 'top-to-bottom';
    var url = "/"+orgid+"/reg-overview-subset-image?zoomlevel="+zoomLevel+"&layout=top-to-bottom";
      var nodeFrameIds = iNodesToFrameIds(iNodesSet, frames);
    // logMsg('regRedisplayHighlightedGenesOnly '+url+' '+nodeFrameIds);
    showOvBusy();
    var request = OpenLayers.Request.POST({
                           method: "POST",
                           url: url,
                           data: OpenLayers.Util.getParameterString({object: nodeFrameIds}),
                           callback: function(request){handleRegRedisplayHighlighted(request, zoomLevel, orgid)},
                           headers: {"Content-Type": "application/x-www-form-urlencoded",
                                     "Accept": "text/*"},
                           async: false});
  }
  showOvNotBusy();
    }}

/*
   Receiving the JavaScript data from the server after requesting to
   start redisplaying highlighted nodes only. The expected answer is a
   short data structure with a uniqueID field string in it.

   Once this is received here, the redrawing of the base layer is
   initiated and the zoom end function is called to request more data
   and redraw the overlays.

   See fn process-valid-command for :reg-overview-subset-image in
   cwest-methods.lisp for what is being sent by the server.
*/
function handleRegRedisplayHighlighted(request, zoomLevel, orgid){
  // logMsg('handleRegRedisplayHighlighted, receiving data ');
  var redisplayStructure = null;
  showOvNotBusy();
  try {
    eval(request.responseText);
  } catch(e) {
    showServerError('(Error 1) A Web server error occurred when redisplaying highlighted genes only', 
                    e, request.responseText);
    return;
  };

  if (redisplayStructure != null) {
    var uniqueID = redisplayStructure.uniqueID;
    document.getElementById('regUniqueID').value = uniqueID;
      WG.ReLoadRegulatoryOverview(orgid, zoomLevel,'mapReg', 'top-to-bottom');
  } else alertUser('redisplayStructure is null: '+request.responseText);
}

function handleRegChangeLayoutCancel(){
  regDialogChangeLayout.destroy();
}

/* The user click the "Ok" button for changing the layout.

*/
function handleRegChangeLayout(){
  if (!checkOrgidRegulatory(orgID())) return;
  var layoutElms    = document.regDialogLayout.layout;
  var currentLayout = document.getElementById('regLayout').value;
  var newLayout     = false;
  // For each radio button if it is checked get the value.
  for (var i = 0; i < layoutElms.length; i++){
     if (layoutElms[i].checked){
        newLayout = layoutElms[i].value;
        break;
     }
  }
  regDialogChangeLayout.hide();

  // The hidden variable regLayout contains the value of the current layout.
  if (newLayout && currentLayout != newLayout) {
      // logMsg('handleRegChangeLayout really new, change layout');
      // This is a real change of layout.
      document.getElementById('regLayout').value = newLayout;
      // Forces a reload of the tiles.
      // var map = initRegOverview.map; //REG-NET-WG no more map?
      // map.baseLayer.redraw();
    WG.ReLoadRegulatoryOverview(orgID(),0,'mapReg',newLayout);
      // regZoomEnd(null, map);
  }
}

function getRegLayout(){
  return document.getElementById('regLayout').value;
}

function setRegLayout(value){
  var layoutElms    = document.regDialogLayout.layout;
  // Set the right radio button according to value.
  for (var i = 0; i < layoutElms.length; i++){
     if (layoutElms[i].value == value){
        layoutElms[i].checked = true;
        break;
     }
  }
}

/* Display the entire regulatory overview of the current selected organism.

   This is usually called when the Web page is first loaded
   or from a menu command to redisplay the complete overview
   after redisplaying the network with highlighted genes only.
*/
function regDisplayCompleteOverview(){
  if (!checkOrgidRegulatory(orgID())) return;
    document.getElementById('regUniqueID').value = '';
    // clear out the nodes to be highlighted list from highlightLists
    for (var i = 0; i < WG.wgactive.highlightList.length; i++) {
	WG.wgactive.highlightList[i][2] = [];
	}
    // clear out the highlighted nodes info from each layer, and re-populate it using stored function and frameId(s)
    for (var i = 0; i < initRegOverview.layers.length; i++) {
	initRegOverview.layers[i].layer =  null;
	initRegOverview.layers[i].nodes =  [];
	initRegOverview.layers[i].collection =  [];
//	initRegOverview.layers[i].fn(WG.wgactive.nodeDesc, initRegOverview.layers[i], false);
    }
    WG.ReLoadRegulatoryOverview(orgID(), WG.GetCurrentZoomLevel(), 'mapReg', 'inside-out');
}

/*

   For a left click, go to the object page. This fn is used by the
   regulatory overview only.
   Note: right-clicking is handled by the Yahoo code. See fn onContextMenuTrigger.

   Arguments: e, event object.
              map, an OpenLayers map object
              zoomLevels, an array of zoom level structures
              frames, an array of frame structures
   Returns: nothing.
*/
function mouseRegLeftClick(e, map, zoomLevels, frames){
  var zoomLevel = map.zoom;
  var oneZoomLevel = zoomLevels[zoomLevel];
  var x = e.xy.x;
  var y = e.xy.y;
  // logMsg('Left Click at '+x+', '+y+', center: '+map.getCenter());

  // If the server did not send data for this zoom level.
  if (oneZoomLevel == null || oneZoomLevel.nodes == null) {
    alertUser('Sorry, left-click is not working since the server has not sent the nodes data.');
    return;
  }

  if (frames == null) {
    alertUser('Sorry, left-click is not working since the server has not sent the frames data.');
    return;
  }

  if(window.oRegContextMenu) oRegContextMenu.hide();

  // On click, open the gene page if click occurs on a node.
  var iNode = searchBoundingBox(map, oneZoomLevel.nodes, x, y);
  if (iNode >= 0) {
     // Use organism name of the zoomlevel not the current selected organism.
      var orgid = oneZoomLevel.orgid;
      var frame = frames[iNode];
      if (frame != null && typeof(frame.frameId) == 'string')
	  openWindowOrNewTab(generateObjectURL(encodeURIComponent(frame.frameId), orgid, "gene"));
      else alertUser('Sorry, left-clicking is inoperative for this gene.');
  }
}


/* This fn creates a new tab or open a new window at the given URL
   (the user has control on which one will happen). The current
   window is not replaced by a new one.

   Arguments: url, a string.
   Returns: nothing.
*/

function openWindowOrNewTab(url){
  window.open(url);
}

/* Navigating to URL means to replace the current window
   of the users' browser to the URL.

   Arguments: url, a string.
*/
function navigate(url){
  document.location.href = url;
}

// Transforms the string type into a string acceptable for the ptools server.
function typeURL(type){
  var type2 = type.toLowerCase();
  if(type2 == "compounds") return "compound";
  if(type2 == "pathways")  return "pathway";
  if(type2 == "genes")     return "gene";
  if(type2 == "reactions") return "reaction";
  if(type2 == "proteins")  return "protein";
  return "";
}

/* Show the given organism name (via an orgid) above the regulatory
   overview map as HTML.

*/
function showOrganismNameReg(orgid){
  // Update the look of the banner if it needs be.
  updateBannerClass();
//  if (document.getElementById('regBeforeOrgName'))
//      document.getElementById('regBeforeOrgName').innerHTML = 'Regulatory&nbsp;Overview&nbsp;of';
  if (document.getElementById('regOrgName'))
      document.getElementById('regOrgName').innerHTML = orgNameFromOrgID(orgid);
}

function showOrganismNameCel(orgid){
    updateBannerClass();
    //if (document.getElementById('celBeforeOrgName'))
    //document.getElementById('celBeforeOrgName').innerHTML = 'Cellular&nbsp;Overview&nbsp;of';
    if (document.getElementById('celOrgName'))
	document.getElementById('celOrgName').innerHTML = orgNameFromOrgID(orgid);
}

/* Display message that no regulatory overview exists for
   the current selected organism.
*/
function showNoRegulatoryOverview(orgid){
  if (document.getElementById('regBeforeOrgName'))
      document.getElementById('regBeforeOrgName').innerHTML = '<font color=red>No regulatory overview for</font>';
  if (document.getElementById('regOrgName'))
      document.getElementById('regOrgName').innerHTML = orgNameFromOrgID(orgid);
}


/* When the regulatory overview zoom ends, two type of data must be requested if not
   yet transfered: frames and nodes data. And all highlighted layers must be reconstructed
   for the new zoom level.

*/
function regZoomEnd(e, map){
  if (!checkOrgidRegulatory(orgID())) return;
  suspendOmicsAnimation();
  // Set the organism name above the map in HTML.
  // Must be done for every zoom since the organism may have changed.

  var uniqueID   = document.getElementById('regUniqueID').value;
    var orgid = orgID();
  showOrganismNameReg(orgid);
  showOvBusy();
  // /destroyAllHighlightedLayers();
  // If we do not have the frame structures for this orgid, request them from the server.
//  /if (initRegOverview.frames == null || initRegOverview.orgid != orgid || initRegOverview.uniqueID != uniqueID) {
    if (WG.wgactive.nodeDesc == null || initRegOverview.orgid != orgid || initRegOverview.uniqueID != uniqueID) {
      var url = "/"+orgid+"/reg-overview-frames-data?uniqueid="+uniqueID;
      var request = OpenLayers.Request.GET({
                           url: url,
                           callback: function(request){handleRegFramesData(request, map, orgid, uniqueID)},
                           headers: {"Accept": "text/*" }, async: false});
  }

  var regLayout    = document.getElementById('regLayout');
  var layout       = (regLayout) ? regLayout.value : 'inside-out';
  var zoomLevel    = map.zoom;
  var oneZoomLevel = initRegOverview.zoomLevels[zoomLevel];

  if ( oneZoomLevel == null || oneZoomLevel.orgid != orgid || oneZoomLevel.nodes == null
       || oneZoomLevel.layout != layout || oneZoomLevel.uniqueID != uniqueID)  {
    // logMsg('requesting nodes data '+url);
    var url = "/"+orgid+"/reg-overview-nodes-data?zoomlevel="+zoomLevel+"&layout="+layout+"&uniqueid="+uniqueID;
    var request = OpenLayers.Request.GET({
                           url: url,
                           callback: function(request){
                             handleRegNodesData(request, map, zoomLevel, orgid, layout, uniqueID)
                               },
                           headers: {"Accept": "text/*" }, async: false});
  }
  else regReHighlightGenes(map, oneZoomLevel);

  // If the dialog with a list of objects is opened, we must update the list
  // for the current zoom level. A marker may also need to be remapped.
  if (dialogListNodes != null &&
      typeof(dialogListNodes.setListAtCurrentZoomLevel) == 'function') {
    dialogListNodes.setListAtCurrentZoomLevel();
    moveToZoomLevelMarkers(initRegOverview);
  }

  showOvNotBusy();
  resumeOmicsAnimation();
}

/* Display a warning panel that the orgid has no
   regulatory data if allOrganisms say so.

*/
function checkOrgidRegulatory(orgid){
  if (!isOrgidRegOverview(orgid)) {
     showNoRegulatoryOverview(orgid);
     var noRegOvDialog = new YAHOO.widget.Dialog("noRegOvDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [{ text:"Ok", handler: function(){noRegOvDialog.hide()}, isDefault:true}
                        ]
             });
     noRegOvDialog.setHeader('No Regulatory Overview for Selected Database Warning');
     noRegOvDialog.setBody('There is no regulatory data for the selected database '+orgNameFromOrgID(orgid)+', hence no Regulatory Overview diagram is available.');
     noRegOvDialog.cfg.setProperty('icon', YAHOO.widget.Dialog.ICON_WARN);
     noRegOvDialog.render(document.body);
     return false;
  }
  return true;
}


function ovMouseOut(e){
  // logMsg('mouseOut');
  ovMouseMove.e = null;
}


/* Register location of the last mouse move.
   Function checkTooltip, for example, will use this data.

*/
function ovMouseMove(e){
  // logMsg('mouseMove');
  ovMouseMove.e = e;
}

ovMouseMove.e = null;
var currentOv = null;

/* old way of doing mouse tracking 

function activateMouseTracking(ov, nbMilli){
  console.log("aMT");
  setTimeout(function(){checkTooltipTimeOut(ov, nbMilli)}, nbMilli);
}

// This fn is called by a timeout set on it.
//   Used by reg and cel overviews.
function checkTooltipTimeOut(ov, nbMilli) {
  checkTooltip(ov);
  // console.log("cTTTO");
  setTimeout(function () {checkTooltipTimeOut(ov, nbMilli)}, nbMilli);
}

*/

function activateMouseTracking(ov, nbMilli) {
  //  window.console.log("activateMouseTracking started");
  clearInterval(activeMouseTracking);
  currentOv = ov;
  activeMouseTracking = setInterval(function () {checkTooltip(ov)}, nbMilli); }
var activeMouseTracking = null;

function deActivateMouseTracking(ov) {
  //  window.console.log("deActivateMouseTracking run");
  clearInterval(activeMouseTracking); }

function checkTooltip(ov) {
  if (ov == initRegOverview) regCheckTooltip();
  else celCheckTooltip()
}

/* Check to see if the mouse is over some node with a tooltip to show.
   If it is, show the corresponding tooltip.
*/
function regCheckTooltip() {
  var map        = initRegOverview.map;
  var zoomLevels = initRegOverview.zoomLevels;
  if (ovMouseMove.e != null && ovMouseMove.e.xy != null) {
    if (!zoomLevels || !zoomLevels[map.zoom]) {
      return;
    }
    var oneZoomLevel = zoomLevels[map.zoom];
    showRegTooltip(map, oneZoomLevel, ovMouseMove.e.xy.x, ovMouseMove.e.xy.y);
  }
}


/* This fn is called by a timeout set on it.
   It can also be called to get the opened tooltips updated
   when the Omics Viewer is running.
*/
function celCheckTooltip() {
  var x = celCheckTooltip.xy.x;
  var y = celCheckTooltip.xy.y;

  // If the mouse stopped (same location xy) and the previous location is different,
  // asked the server for a potential tooltip at that location.
  if (ovMouseMove.e && ovMouseMove.e.xy
      && ovMouseMove.e.xy.x == celCheckTooltip.xy.x
      && ovMouseMove.e.xy.y == celCheckTooltip.xy.y
      && !(celCheckTooltip.xy2.x    == celCheckTooltip.xy.x
           && celCheckTooltip.xy2.y == celCheckTooltip.xy.y)
      ) {
    // Keep this location
    celCheckTooltip.xy = ovMouseMove.e.xy;
    mouseCelLeftClick(ovMouseMove.e);
    // Remember which location we just tried so that we do not keep asking the server.
    celCheckTooltip.xy2 = ovMouseMove.e.xy;
  }
  else if (ovMouseMove.e) celCheckTooltip.xy = ovMouseMove.e.xy;
  /* billingt:Aug-30-2013 removing this as it inaccurate, misleading, and replaced by omics data display
  // Update all tooltips opened if animation is on.
  if (showCelTooltip.popups && animateOmics.ov){
    for (var i=0; i < showCelTooltip.popups.length; i++) {
      var popup = showCelTooltip.popups[i];
      if (popup && popup.dialog && popup.node && (popup.contentShown != "omics")) {
        var node         = popup.node;
        var textTooltip  = popup.getThisCelNodeDoc();
        popup.dialog.setBody(textTooltip);
      }
    }
  } */
}
celCheckTooltip.xy  = {x:0,y:0};
celCheckTooltip.xy2 = {x:-1,y:-1};


/* Show a tooltip box on the overview for
   Regulatory Overview. If the Omics Viewer is on, the tooltip
   also show the expression value data, which also depends on the
   step of the animation.

   We try to keep the tooltip inside the viewport.

   Arguments: map, an OpenLayers map.
              oneZoomLevel, a zoomlevel structure.
              x, y, two integers representing a screen coordinate
                    of a pixel in the viewport of the map.
                    The viewport does not take into account the extra
                    space over the map itself (the header of the web page with the menu).
   Returns: nothing.
*/
function showRegTooltip(map, oneZoomLevel, x, y){
  if (oneZoomLevel == null) return;
  // To avoid doing an unnecessary call to searchBoundingBox, 
  // do not try to display at x and y (screen point, not lonlat), if it was done already? 
  if (point_close_to(x, y, showRegTooltip.xy.x, showRegTooltip.xy.y)) return; 
  removeTooltip();

  var nodes = oneZoomLevel.nodes;
  var iNode = searchBoundingBox(map, nodes, x, y);

  if (iNode >= 0) {
    document.body.style.cursor = 'pointer';
    //logMsg("Show Tooltip for ("+x+", "+y+") is "+node.frameId);
    var doc = getNodeDoc(iNode, nodes);
    if (doc == "") return;

    var popupDialog = new YAHOO.widget.Dialog("popupDialog",
      { modal: false, visible: true, draggable: true, close: false});

    // Keep a reference to this popup for other functions.
    showRegTooltip.onePopup = popupDialog;
    // See .olPopupContent in style.css for style definition of popup.
    popupDialog.setHeader('');
    popupDialog.setBody(doc);
    popupDialog.render(document.body);
    // +140, because the header of the page is 140 pixels. That brings down 
    // on the screen the tooltip box, closer to the node on the screen.
    popupDialog.moveTo(x+10, y+140); 
    showRegTooltip.xy = {x:x, y:y};
    // onePopup.setBackgroundColor("#ffffd9");
    // onePopup.setOpacity(1.0);
    // The color for tooltips is from the desktop version as defined in clim-utils.lisp:
    // (clim:make-rgb-color 1.0 1.0 0.85)
  }
  else {
    document.body.style.cursor = 'default';
  }
}

  showRegTooltip.xy       = {x:0, y:0}; // Keep track of the last shown tooltip for reg overview.
  showRegTooltip.onePopup = null;
  showRegTooltip.popups = new Array();

// Is point (x1, y1) in the neighborhood of point (x2, y2)?
// Neighborhood: +- 1 pixel.
function point_close_to(x1, y1, x2, y2) {
    if ((x2 - 1 <= x1 && x1 <= x2 + 1) && (y2 - 1 <= y1 && y1 <= y2 + 1))
        return true;
    else return false;
}

/* Translates point (x, y) on the map into a LonLat object. Used by reg and cel overviews.
   The result is different from fn getLonLatFromPixel (an OpenLayers
   function) since we do not take into account the viewport whereas
   getLonLatFromPixel assumes that the given pixel is relative to the
   position of the viewport on the map.

   Arguments: a map and two integers.
   Returns: a LonLat object.
 */
function mapNodesXYtoLonLat (map, x, y){
  var maxy = map.maxExtent.top;
  var res  = map.getResolution();
  var lat  = maxy - res * y;
  var lon  = res * x;

  return new OpenLayers.LonLat(lon, lat);
}

/* Search for a bounding box in nodes which has the closest center point
   to location (x, y) and its bounding box contains (x, y). Put a bounding
   box around the node found. Remove any previous bounding box.

   Used by Regulatory Overview only.

   Arguments: map,   an OpenLayer map.
              nodes, array of node structures
                     A node structure has the form {s:, x1:, y1:, x2: , y2, x: , y:}
                     all the fields are integers. The fields define a rectangle and the center
                     of that rectangle. The value s is the 
                     (x1, y1) is the top left corner   
              x, y,  two integers representing the location (x,y) of a pixel on the screen.
                     The point (0,0) is the top left corner of the screen.
   Returns: an index in nodes or -1.
*/
function searchBoundingBox(map, nodes, x, y) {
  if (searchBoundingBox.bbox) map.layers[0].destroyFeatures([searchBoundingBox.bbox]);
  /*
    A LonLat is a coordinate (lon, lat) for which the bottom left corner is (0,0)
    and the top right corner is map.maxExtent. The value map,maxExtent.top is therefore
    the maximum lat (latitude or 'y') that can occur for this map.
   */
  var lonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(x,y));
  var lat    = lonLat.lat; // For the y.
  var lon    = lonLat.lon; // For the x.
  var res    = map.getResolution(); // Has given during initialization of the map.
  var maxy   = map.maxExtent.top; // Maximum latitude possible, the greater the higher on the screen.
  var minD   = 1000000000; // Current minimum distance to (x,y)
  var result = false;      // A bounding box 4-array, if found.
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    // We should use mapNodesXYtoLonLat, but we try to make it fast here.
    var x1 = res * node.x1;
    var y1 = maxy - res * node.y1;
    var x2 = res * node.x2;
    var y2 = maxy - res * node.y2;

    if ( x1 <= lon && lon <= x2 && y2 <= lat && lat <= y1 ) {
      // (x, y) is in the bounding box of node.
      // mapNodesXYtoLonLat is used, not map.getLonLatFromPixel since
      // the node.x and node.y are relative to the bottom left corner
      // of the map, whereas x and y are relative to the current viewport.
      var lonLat2 = mapNodesXYtoLonLat(map, node.x, node.y);
      var d = Math.sqrt(Math.pow(lonLat2.lon - lon, 2) + Math.pow(lonLat2.lat - lat, 2));
      // Keep this box if center is closer to (x, y).
      // logMsg(d+' '+node.x+' '+node.y+' '+node.doc1);
      if (d < minD) { minD = d; result = [x1,y1,x2,y2,i]};
    }
  }

  if (result) {
    searchBoundingBox.bbox = showBoundingBox(map, result[0], result[1], result[2], result[3]);
    return result[4];
  }

  // Not found.
  return -1;
}

searchBoundingBox.bbox = null;

// Mainly used for testing.
function showAllBoundsNodes(map, nodes){
  var res = map.getResolution();
  var maxy = map.maxExtent.top;

  for (var i = 0; i < nodes.length; i++) {
    var x1 = res * nodes[i].x1;
    var y1 = maxy - res * nodes[i].y1;

    var x2 = res * nodes[i].x2;
    var y2 = maxy - res * nodes[i].y2;

    showBoundingBox(map, x1, y1, x2, y2);
  }
}

/* Draw a rectangle (a bounding box) with bottom-left corner at (x1, y1)
   and top-right corner at (x2, y2). The coordinates are in pixels
   relative to the current view port.

*/
function showBoundingBox(map, x1, y1, x2, y2){
  var lineStringVector = [new OpenLayers.Geometry.Point(x1, y1),
                          new OpenLayers.Geometry.Point(x2, y1),
                          new OpenLayers.Geometry.Point(x2, y2),
                          new OpenLayers.Geometry.Point(x1, y2)];
  var linearRing      = new OpenLayers.Geometry.LinearRing(lineStringVector);
  var linearRingBox   = new OpenLayers.Feature.Vector(linearRing);
  addTempGeometricFigures(map, [linearRingBox]);
  return linearRingBox;
}

/* Add a geometric figure. This figure is not going to be maintained
   when a zoom operation is done.
 */
function addTempGeometricFigures(map, vector){
  // It is assumed that the first layer is for temporary geometric figures.
  map.layers[0].addFeatures(vector);
}

// Use alertUser to differentiate it from debugging alerts.
function alertUser(msg){
  alert(msg);
}

// Log function for debugging. It is based on the Jash console.
function logMsg(msg){
  if (window.jash != null) jash.print(msg);
}

function logDump(args) {
  if (window.jash != null)
    for (var i=0; i < args.length; i++) {
      jash.dump(args[i]);
    }
}


/* Currently not used. Left for future development.

   Function taken from www.lisp. It was modified to work
   with the tooltip mechanism implemented to work with OpenLayers.

   It generates a string based on several components.

   Arguments: cpd, a string of compound frame-ids delimited by '#'.
              protein, a string
*/
function ovMenu (cpd, protein, rxn, pwy, superpwy) {
  var contents = '';
  /* var img; */
  if (rxn != 0) {
    contents += menuItem(rxn, 'Reaction: ')
  }

  if (pwy != 0) {
    var pwys = pwy.split(',');
    for (i=0; i < pwys.length; i++) {
      contents += menuItem(pwys[i], 'Pathway: ')
    }
  }
  /* No images for now.

  if (superpwy != 0) {
    contents += menuItem(superpwy, 'Superpathway: ')
    img = pwyImages[superpwy]
  }
  */
  if (cpd != 0) {
    var cpds = cpd.split('#')
    for (i=0; i < cpds.length; i++) {
      contents += menuItem(cpds[i], 'Compound: ')
    }
  }
  if (protein != 0) {
    var genes = protein.split(',');
    contents += menuItem(genes[0], 'Protein: ')
    if (genes.length == 2) {
      contents += menuItem(genes[1], 'Gene: ')
    }
    else if (genes.length > 2) {
      contents += 'Genes: '
      for (i=1; i < genes.length; i++) {
        if (i > 1) contents += ', ';
        contents += menuItem(genes[i], '')
      }
      contents += '<br>'
    }
  }
  /* No images for now.

  if ((pwy != 0) && (superpwy == 0)) {
    img = pwyImages[pwy]
  }
  if (img) {
    img = img.replace('\\+', '%2b')
    contents += '<p><img src="' + img + '"><br><a href="' + img + '" target=_blank>Printable version of this pathway diagram</a>'
  }
  */
  return contents;
}

/*
    Arguments:
*/
function menuItem (str, prefix) {
  var name = fr[str];
  var orgid = orgID();
  if (name) {
    var link = '<a href="' + generateURL(orgid,str) + '" target=~A>' + name + '</a>'
    if (prefix) return (prefix+link+'<br>')
    else return link
  }
  else return ''
}

function generateURL (orgid, str) {
    return generateObjectURL(str.replace('\\+', '%2b'), orgid);
}

/* Add auto completion, using YUI, to an input element.
   Works for Cellular and Regulatory Overviews.

   Arguments:  see function acSearch.
   Returns: nothing.
*/
// RAB OLD
/*function addAutoCompletion(inputId, acCountainerId, type, includeFrameId, considerSubstr, ov){
  // Add autocompletion

  var ds = new YAHOO.util.FunctionDataSource(function() {return acSearch(inputId,type,includeFrameId,considerSubstr, ov)});
  var ac = new YAHOO.widget.AutoComplete(inputId, acCountainerId, ds);
  ac.animVert            = false;
  ac.autoHighlight       = false;
  ac.maxResultsDisplayed = 200;
  ac.animSpeed           = 1;
  ac.queryDelay          = 0.5;
  ac.alwaysShowContainer = false;
  // Args: oResultData,
  //       sQuery, the string entered by the user.
  ac.formatResult = function(oResultData, sQuery, sResultMatch) {return insertMark(sQuery, sResultMatch)};
}
*/
// RAB NEW
function addAutoCompletion(inputId, acCountainerId, type, includeFrameId, considerSubstr, ov){
  // Add autocompletion
  var ds = ((ov == initCelOverview) 
	    ? acSlotSelector(inputId, acContainerId, null, includeFrameId, considerSubstr, ov)
	    : new YAHOO.util.FunctionDataSource(function() {
	      return acSearchLocally(inputId,type,includeFrameId,considerSubstr,ov)
	    }));
  var ac = new YAHOO.widget.AutoComplete(inputId, acCountainerId, ds);
  ac.animVert            = false;
  ac.autoHighlight       = false;
  ac.maxResultsDisplayed = 200;
  ac.animSpeed           = 1;
  ac.queryDelay          = 0.5;
  ac.alwaysShowContainer = false;
  // Args: oResultData,
  //       sQuery, the string entered by the user.
  ac.formatResult = function(oResultData, sQuery, sResultMatch) {return insertMark(sQuery, sResultMatch)};
}


function getSlotURL (id, type, includeFrameId, considerSubstr) {
  var t = (type) ? type.toLowerCase() : '';
  var typeName = '';
  var slotName = '';
  var orgid = initCelOverview.orgid;
  switch (t) {
  case 'compounds'      :  typeName = 'Compounds'; slotName = 'COMMON-NAME'; break;
    // RAB NEW
  case 'structures'     :  typeName = 'Compounds'; slotName = 'SMILES'; break;
  case 'reactions'      :  typeName = 'Reactions'; slotName = 'COMMON-NAME'; break;
  case 'pathways'       :  typeName = 'Pathways'; slotName =  'COMMON-NAME'; break;
  case 'reactionec'     :  typeName = 'Reactions'; slotName = 'EC-NUMBER'; break;
  case 'genes'          :  typeName = 'Genes'; slotName =     'COMMON-NAME'; break;
  case 'enzymes'        :  typeName = 'Enzymes'; slotName =  'COMMON-NAME'; break;
  default: alertUser('Error getSlotURL, unknown type '+type);
  }
  return "/"+orgid+"/ajax-slot-search?var=result&max=200&type="+typeName+"&object="+slotName+"&substr="+encodeURIComponent(considerSubstr)+"&inclFrameID=" + ((includeFrameId) ? "true" : "false");
}

/* Returns true if a dialog is active and we do not want any tooltip
   to be shown.
 */
function aDialogIsActive(){
  if (window.regDialogs)
    for(var i=0; i < regDialogs.length; i++){
      if(regDialogs[i].cfg.getProperty('visible')) return true;
    }
  if (window.celDialogs) {
    for(var i=0; i < celDialogs.length; i++){
      if(celDialogs[i].cfg.getProperty('visible')) return true;
    }
  }
  return false;
}


function removeTooltip(){
  if(showRegTooltip.onePopup != null) {
      showRegTooltip.onePopup.destroy();
      showRegTooltip.onePopup = null;
  }
  document.body.style.cursor = 'default';
}

/* Get the documentation for an object in the overview (Regulatory or Cellular).
   The tooltip text might include expression value if the Omics Viewer
   is on. This fn is used for tooltips.

   Arguments: iNode, an index in nodes.
   Returns: a string.
*/
function getNodeDoc(iNode, nodes){
  // For reg overview
  if (initRegOverview.frames != null) return getRegNodeDoc(initRegOverview.frames[iNode]);

  // For cellular overview
  return getCelNodeDoc(nodes[iNode], true, true, true, true, true);
}

function getRegNodeDoc(node){
  if (!node) return '';
  return node.doc+getOmicsNodeDoc(node.frameId);
}

/* Create a HTML string to display in a tooltip.
   The first line of the tooltip is a clickable link generated here.

   Parms: a cel node structure,
          doc1, doc2, doc3, zoomIn, Boolean to generate or not the corresponding parts.

   Returns: a string.
   billingt:Jan-22-2013 
*/
function getCelNodeDoc(node, doc1, doc2, doc3, doc4, zoomIn){
  if (node.frameId != null) {
      var n       = node;
      var frameId = n.frameId;
      var orgid   = initCelOverview.orgid;
      var type    = nodeTypeToURLtype(node.type.toLowerCase()).toUpperCase();
      var doc     = doc1 ? ("<a href=javascript:window.open("+generateObjectURL(frameId, orgid)+"');void(0);>"+n.doc1+"</a>"):"";
      var omicsData = getOmicsNodeDoc(frameId);
      // paley:Apr-27-2016 If there is any omics data, replace the pathway links
      // w/ links to the same pathways showing omics data.
      var anyOmicsData = omicsData || (animateOmics.layers != null && animateOmics.layers.length > 0);
      var ndoc3 = doc3 ? ((anyOmicsData) ? n.doc3.replace(/type=PATHWAY&/,'type=PATHWAY-W-OMICS&prevOmics=Y&detail-level=2&') : n.doc3) : "";
      //var ndoc3 = doc3 ? ((anyOmicsData) ? n.doc3 + '?prevOmics=Y&detail-level=2' : n.doc3) : "";
      doc += doc2 ? ((doc == "" || n.doc2 == "") ? n.doc2 : "<br>"+n.doc2): ""; // Enzyme for reaction
      doc += doc3 ? ((doc == "" || ndoc3 == "") ? ndoc3 : "<br>"+ndoc3): ""; // Path
      doc += doc4 ? ((doc == "" || n.doc4 == "") ? n.doc4 : "<br>"+n.doc4): "";

      // Remove the "compound:" or "protein:" substring.
      doc = doc.replace(/Compound:/ig,'');
      doc = doc.replace(/Protein:/ig, '');
      doc += omicsData;
      // Add a link to zoom in.
      doc += zoomIn ? ("<br><center><a style='font-size:smaller;background-color:#cccccc' href='#' onclick=\"celZoomIn('"+node.oid+"');\">[&nbsp;Zoom-in and center diagram on this object&nbsp;]</a></center>"): "";
      return doc;
  }
    else return '';
}

function removeLink(s){
  return (s.replace(/<\/a>/g,'')).replace(/<a[^>]*>/gi,'');
}

// Returns: a string describing Omics data of this frameId.
function getOmicsNodeDoc(frameId){
  if (animateOmics.layers != null && animateOmics.layers.length > 0) {
    // Add expression data if any.
    var i        = animateOmics.step;
    var oneLayer = animateOmics.layers[i];
    var tuple    = frameIdToTuple(frameId, oneLayer.tuples);
    /*    billingt:Aug-30-2013 removing this as it inaccurate, misleading, and replaced by omics data display
          if (tuple && typeof(tuple[2]) != undefined)
          return '<br><b>Expression data value</b>: '+tuple[2]+', <b>Step:</b> '+(i+1);
    else */ 
    return '';
  }
  else return '';
}

/* billingt:Jan-22-2013 */
function omicsNodeDatap(node) {
  // node needs to have a substrates slot with an array of substrate frameids
  // the loop for frameId and the substrateFrameIds and do the frameIdtoTuple test returning when anything has data.
  if (animateOmics.layers != null && animateOmics.layers.length > 0) {
    // Add expression data if any.
    var i        = animateOmics.step;
    var oneLayer = animateOmics.layers[i];
    var frameId = node.frameId;
    var tuple    = frameIdToTuple(frameId, oneLayer.tuples);
    if (tuple && typeof(tuple[2]) != undefined)
      return true;
    else return false;
  }
  else return false;
}

/* billingt:Sep-30-2014 */
// SUBSTRATES //
function omicsNodeDataNodes(node) {
  if (animateOmics.layers != null && animateOmics.layers.length > 0) {
    // Add expression data if any.
    var i        = animateOmics.step;
    var oneLayer = animateOmics.layers[i];
    var frameId = node.frameId;
    var returnArray = new Array();
    var tuple    = frameIdToTuple(frameId, oneLayer.tuples);
    if (tuple && typeof(tuple[2]) != undefined)
      returnArray.push(frameId);
    if (node.substrates !== undefined)
      for (var idx = 0; idx < node.substrates.length; idx++) {
        var tuple = frameIdtoTuple(node.substrates[idx]);
        if (tuple && typeof(tuple[2]) != undefined)
          returnArray.push(node.substrates[idx]) };
    if (returnArray.length > 0)
      return returnArray;
    else return null;
  }
  else return null;
}
  
/* billingt:Apr-9-2013 */
function omicsPathwayDatap(nodeArray) {
  for (i = 0; i < nodeArray.length; i++) {
    if (omicsNodeDatap(nodeArray[1]) == true)
      return true; };
  return false; }

function getOmicsDataMostPosNegValues(data) {
  // data is an array of arrays; inner array is frameid, value, genename
  // return value is the absolute maximum value in the array
  var MaxPosValue = 0;
  var MaxNegValue = 0;
  for (i = 0; i < data.length; i++) {
    var CurDatum = data[i];
    var CurValue = CurDatum[1];
    if (CurValue > 0) 
      MaxPosValue = (CurValue > MaxPosValue) ? CurValue : MaxPosValue;
    else MaxNegValue = (CurValue < MaxNegValue) ? CurValue : MaxNegValue;
  };
  return [MaxPosValue, MaxNegValue]
}

function getOmicsDataMinMax(data) {
  // data is an array of arrays; inner array is frameid, value, genename
  // return value is the absolute maximum value in the array
  var MaxValue = data[0][1];
  var MinValue = MaxValue;
  for (i = 0; i < data.length; i++) {
    var CurDatum = data[i];
    var curValue = CurDatum[1];
    if (curValue > MaxValue)
      MaxValue = curValue;
    if (curValue < MinValue)
      MinValue = curValue;
  };
  return [MinValue, MaxValue]
}

function getOmicsDataMostPosNegValuesMulti(dataTuplesByStep) {
  // data is an array of arrays (of steps) of arrays (data/gene); 
  // inner array (data/gene) is frameid, value, genename
  // return value is the absolute maximum value in all the data/gene arrays
  var MaxPosValue = 0;
  var MaxNegValue = 0;
  for (var i = 0; i < dataTuplesByStep.length; i++) {
    var CurStep = dataTuplesByStep[i];
    for (var j = 0; j < CurStep.length; j++) {
      var CurDatum = CurStep[j];
      var CurValue = CurDatum[1];
      if (CurValue > 0) 
      MaxPosValue = (CurValue > MaxPosValue) ? CurValue : MaxPosValue;
      else MaxNegValue = (CurValue < MaxNegValue) ? CurValue : MaxNegValue;
    } }
  return [MaxPosValue, MaxNegValue];
}

function getOmicsDataMinMaxMulti(dataTuplesByStep) {
  var maxValue = dataTuplesByStep[0][0][1];
  var minValue = dataTuplesByStep[0][0][1];
  for (var i = 0; i < dataTuplesByStep.length; i++) {
    var CurStep = dataTuplesByStep[i];
    for (var j = 0; j < CurStep.length; j++) {
      var CurDatum = CurStep[j];
      var curValue = CurDatum[1];
      if (curValue > maxValue)
	maxValue = curValue;
      if (curValue < minValue)
	minValue = curValue;
    } }
  return [ minValue,maxValue ];
}

function getPlotOmicsDataArray(data) {
  /* DATA is an array of 3 tuples: step, color, value
     RETURN VALUE is an array of pairs
     { step: N, value: V }
     and V is the value for step N in data array */
  var stepStyle = (animateOmics.popupLabelStyle && (animateOmics.popupLabelStyle)) ? animateOmics.popupLabelStyle : 'sequential';
  var tmpString = "[ ";
  for (var i = 0; i < data.length; i++) {
    var curDatum = data[i];
    var stepName = (stepStyle == 'sequential') ? animateOmics.layers[i].colnum : animateOmics.layers[i].name;
    tmpString += "{ step: '"+stepName+"', value: "+curDatum[2]+"}";
    tmpString += (i == data.length -1) ? "" : ", ";
  }
  tmpString += " ]";
  return eval(tmpString);
}

function getOmicsDataPopupMulti(data, colors) {
  /* COLORS is an array of color values as hex in strings. It has length > 1.
     DATA is an array of 4 tuples: step, value, color, gene name
     RETURN VALUE is an array of n + 1 tuples, n = number of colors
     { step: N, color1: 0, color2: V, ... colorN: 0 }
     where color2 is the color for step N in data array,
     and V is the value for step N in data array */
  var stepStyle = (animateOmics.popupLabelStyle && (animateOmics.popupLabelStyle)) ? animateOmics.popupLabelStyle : 'sequential';
  var tmpString = "[ ";
  for (var i = 0; i < data.length; i++) {
    var curDatum = data[i];
    var stepName = (stepStyle == 'sequential') ? animateOmics.layers[i].colnum : animateOmics.layers[i].name;
    tmpString += "{ step: '"+stepName+"', ";
    for (var j = 0; j < colors.length; j++) {
      tmpString += colors[j].replace("#", "HEX");
      tmpString += ": ";
      tmpString += (colors[j]==curDatum[1]) ? curDatum[2] : 0;
      tmpString += (j == (colors.length - 1)) ? " }, " : ", ";
    }
  }
  tmpString += " ]";
  return eval(tmpString);
}

function getHeatOmicsDataMultiSteps(data) {
  /* DATA is an array of arrays (per step) 
          NOT ANY MORE of 4 tuples: step, color, value, gene name
          billingt:Apr-16-2018 of 3 tuples: step, value, gene name
     RETURN VALUE is an array of objects of n entries (n = number of steps + 1)
     { geneName: "G", step_0: "C0", ... , step_n-1: "Cn-1" }
     and Cn is the color for gene G at step n */
  var stepStyle = (animateOmics.popupLabelStyle && (animateOmics.popupLabelStyle)) ? animateOmics.popupLabelStyle : 'sequential';
  var tmpString = "[ ";
  var geneCount = data[0].length;
  for (var geneIdx = 0; geneIdx < geneCount; geneIdx++) {
    // print beginning of object ... gene name column data
    tmpString += "{ gene: '"+data[0][geneIdx][2]+"', ";
    for (var step = 0; step < data.length; step++) {
      var curDatum = data[step][geneIdx];
      // "{ gene: 'geneName', "... add "stepn: color n"
      tmpString += "step_"+step+": '"+WG.OmicsValueToColor(curDatum[1]);
      tmpString += (step == data.length - 1) ? "'" : "', "; }
    tmpString += (geneIdx == geneCount - 1) ? " } " : " }, ";
  }
  tmpString += " ]";
  return eval(tmpString);
}

/* billingt:Jul-31-2015 added to more easily control truncation length of Gene Name string */
var GeneNameMax = 20;

function truncateString(string,maxLength) {           //truncated to maxLength + elipsis
  var truncName = (string.length < maxLength)
      ? string
      : string.substr(0,maxLength-1)+"...";
  return truncName;
}

function getOmicsDataPopupMultiGenes(data, colors) {
  /* COLORS is an array of color values as hex in strings. It has length > 1.
     DATA is an array of 4 tuples: step, color, value, gene name
     RETURN VALUE is an array of n + 1 tuples, n = number of colors
     { geneName: G, color1: 0, color2: V, ... colorN: 0 }
     where color2 is the color for gene G in data array,
     and V is the value for step N gene G in data array */
  var tmpString = "[ ";
  for (var i = 0; i < data.length; i++) {
    var curDatum = data[i];
    var geneName =   truncateString(data[i][3],GeneNameMax);
    tmpString += "{ gene: '"+geneName+"', ";     //truncated to 10 + elipsis
    for (var j = 0; j < colors.length; j++) {
      tmpString += colors[j].replace("#", "HEX");
      tmpString += ": ";
      tmpString += (colors[j]==curDatum[1]) ? curDatum[2] : 0;
      tmpString += (j == (colors.length - 1)) ? " }, " : ", ";
    }
  }
  tmpString += " ]";
  return eval(tmpString);
}

function getPlotOmicsDataMultiGenes(data) {
  /* DATA is an array of 4 tuples: step, color, value, gene name
     RETURN VALUE is an array of pairs
     { geneName: G, color: C }
     and C is the color for gene G in data array */
  var tmpString = "[ ";
  for (var i = 0; i < data.length; i++) {
    var curDatum = data[i];
    var geneName =   truncateString(data[i][3],GeneNameMax);
    tmpString += "{ gene: '"+geneName+"', value: "+curDatum[2]+"}";        //truncated to 10 + elipsis
    tmpString += (i == data.length -1) ? "" : ", ";
  }
  tmpString += " ]";
  return eval(tmpString);
}

function getHeatOmicsDataMultiGenes(data) {
  /* DATA is an array of 4 tuples: step, color, value, gene name
     RETURN VALUE is an array of objects
     { geneName: C }
     and V is the value for gene G in data array */
  var tmpString = "[ { ";
  for (var i = 0; i < data.length; i++) {
    var curDatum = data[i];
    tmpString += "'"+curDatum[2]+"': '"+WG.OmicsValueToColor(curDatum[1]);
    tmpString += (i == data.length -1) ? "'" : "', ";
  }
  tmpString += " } ]";
  return eval(tmpString);
}

/*
   Zoom-in the cellular overview at the ultimate level or penultimate level
   and center it on object with oid.

   Arguments: oid, a string.
*/
function celZoomIn(oid){
  var map          = initCelOverview.map;
  var zoomLevel    = map.zoom;
  var nbZoomLevels = initCelOverview.nbZoomLevels;
  var zoomTo       = (zoomLevel == nbZoomLevels-1) ? zoomLevel
                     : ((zoomLevel == nbZoomLevels-2) ? nbZoomLevels-1 : nbZoomLevels-2);
  var node         = getCelNodeXyOid(false, false, oid, zoomTo);
  var x            = node ? node.x : 0;
  var y            = node ? node.y : 0;
  var lonLat       = mapNodesXYtoLonLat(map, x, y);
  map.setCenter(lonLat, zoomTo);
}

// Return a tuple that has the given frameId, false if none.
function frameIdToTuple(frameId, tuples){
  for (var i=0; i < tuples.length; i++) {
    if (frameId == tuples[i][0])
      return tuples[i];}
  return false;}

// Return all tuples that have the given frameId, false if none.
function frameIdToTuples(frameId, tuples){
  var tuples = new Array();
  for (var i=0; i < tuples.length; i++)
    if (frameId == tuples[i][0])
      tuples.push(tuples[i]);
  if (tuples.length == 0)
    return false;
  else return tuples;}

function frameIdToOmicsDataTuples(frameId){
  if (animateOmics.layers != null && animateOmics.layers.length > 0) {
    var steps = animateOmics.layers.length;
    var stepArray = new Array();
    for (var s = 0; s < steps; s++) {
      var tuples = new Array();
      for (var i = 0; i < animateOmics.layers[s].tuples.length; i++)
        if (frameId == animateOmics.layers[s].tuples[i][0])
          tuples.push(animateOmics.layers[s].tuples[i]);
      stepArray[s] = tuples; }
    return stepArray; }}

/* A request for JavaScript nodes data was done and it was just received.
   This creates a level structure for the zoom level. The structure
   maintain the location of the nodes, the organism id for these nodes,
   the layout used, and the uniqueID if it is for a subset of the regulatory
   network.

   Note: this code run asynchronously and all shared data manipulation to
         global variables should take into account this fact.

   Arguments: request, a request object.
              map, an OpenLayers map object.
              zoomLevel, an integer.
              orgid, a string.
              layout, a string.
              uniqueID, a string. Could be an empty string which means there is no uniqueID.
*/
function handleRegNodesData(request, map, zoomLevel, orgid, layout, uniqueID){
  // logMsg('handleRegNodesData, receiving data ');
  var regNodesFromServer = null;
  var serverResponded    = false;
  showOvNotBusy();
  try {
    // The JavaScript is in responseText. The eval should assign a value to regNodesFromServer.
    eval(request.responseText);
    serverResponded = true;
  } catch(e) {
    showServerError('(Error 2) A Web server error occurred retrieving Regulatory Overview data', e, request.responseText);
    return;
  };

  if (regNodesFromServer != null) {
    // logMsg('handleRegNodesData, data received, zoomLevel: '+zoomLevel+', regNodesFromServer length '+ regNodesFromServer.length);
    var nodes = regNodesFromServer.slice(); // TBD: really need to copy?
    var oneZoomLevel = {nodes: nodes , orgid: orgid, layout: layout, uniqueID: uniqueID};
    initRegOverview.zoomLevels[zoomLevel] = oneZoomLevel;
    regReHighlightGenes(map, oneZoomLevel);
    // Use showAllBoundsNodes for debugging. It helps
    // found out where are the bounds of the nodes by drawing
    // all the bounding boxes.
    // showAllBoundsNodes(map, nodes);
  } else 
    if (serverResponded && !(uniqueID === "")) {
      alertUser('The highlighted genes have no relationships together! Will redisplay the entire network again.');
      regDisplayCompleteOverview();
    }
    else if (!serverResponded)
      alertUser('The server did not respond. Please try again by reloading the page.');
}


/* A request for JavaScript frames data was done and it was just received.

   Note: this code run asynchronously and all shared data manipulation to
         global variables should take into account this fact.

   Arguments: request, a request object.
              map, an OpenLayers map object.
              orgid, a string.
              uniqueID, a string.
   Returns: nothing but sets the initRegOverview global structure if the data received is valid.
*/
function handleRegFramesData(request, map, orgid, uniqueID){
    // the JavaScript is in responseText.
    // logMsg('handleRegFramesData, receiving data ');
    var regFramesFromServer = null;
    showOvNotBusy();
    try {
      // The eval should assign a value to regFramesFromServer.
      eval(request.responseText);
    } catch(e) {
      showServerError('(Error 3) A Web server error occurred retrieving Regulatory Overview frame data', e, request.responseText);
      return;
    };

    if (regFramesFromServer != null) {
      // logMsg('handleRegFramesData, data received, regFramesFromServer length '+ regFramesFromServer.length);

      // Remove all layer structures if orgid has changed.
      if (initRegOverview.orgid != orgid) {
        clearAllHighlightedGenes();
        clearAllZoomLevels();
        initRegOverview.frames = null;
      }

      initRegOverview.frames   = regFramesFromServer; // need to copy?
      initRegOverview.orgid    = orgid;
      initRegOverview.uniqueID = uniqueID;
    } else {
      alertUser('The server was too slow. Please reload the page.');
    }
}


/* ----------------------- Highlighting from a gene node ------------------- */

/* The following functions for highlighting have a similar interface and results.


*/

/* pre REG-NET-WG
function createHighlightOneGene(map, iFrame, frames, orgid){
  var frame    = frames[iFrame];
  var frameId  = frame.frameId;

  var fn = function(frames, regLayer, resultp) {
    var iFrame   = frameIdToIndex(frameId, frames);
    return highlightOneGene(map, iFrame, regLayer, resultp)
  };

  var regLayer  = createRegHighlightLayer('Single Gene '+FrameName, null, fn, null, orgid);
  fn(frames, regLayer, false);
}
*/
function createHighlightOneGene(iFrame, frames, orgid){
    var frameId = frames[iFrame][FrameId];
    var fn = function(frames, regLayer, resultp) {
	return highlightOneGene(frameId, regLayer, resultp)
    };
    var regLayer  = createRegHighlightLayer('Single Gene '+frames[iFrame][3], null, [iFrame], null, orgid, fn, frameId);
  fn(frames, regLayer, false);
}

/* pre REG-NET-WG
function highlightOneGene(map, iFrame, regLayer, resultp){
  var nodes  = initRegOverview.zoomLevels[map.zoom].nodes;
  regHighlightOneNode(regLayer.layer, nodes[iFrame]);
  return  (resultp) ? [iFrame] : false;
}
*/
function highlightOneGene(frameId, regLayer, resultp){
    var nodes  = WG.wgactive.nodeTable;
    var frames = WG.wgactive.nodeDesc;
    var iFrame = frameIdToIndex(frameId, frames);
    regHighlightOneNode(regLayer, iFrame);
    return  (resultp) ? [iFrame] : false;
}

function createHighlightDirectRegulatees(iFrame, frames, orgid){
  var frame    = frames[iFrame];
  if (frame == undefined || frame == null) return;
//  var frameId  = frame.frameId;
  // There is a frames argument since this function could be applied to a different
  // set of frames than the one currently provided. For example, when highlighting
  // is done on a subset of the network, the same highlighting will be applied
  // (to a different set of frames) when the user requests the complete network.
  var fn = function(frames, regLayer, resultp) {
    // Use the frameId and not frame to avoid keeping a pointer to it and create a memory leak.
    // var iFrame = frameIdToIndex(frameId, frames);
    // return highlightDirectRegulatees(map, iFrame, frames, regLayer, resultp)
    return highlightDirectRegulatees(frame[FrameId], frames, regLayer, resultp)
  };

    var regLayer  = createRegHighlightLayer('Direct&nbsp;Regulatees of '+frames[iFrame][FrameName], null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
  fn(frames, regLayer, false);
}

/* indices into frames as created in cwest::generate-reg-overview-nodes-file */
  var FrameRegulatees = 10; // list of lists of regulateess
  var FrameRegulators = 9;  // list of regulators
  var FrameNodeId = 8;
  var FrameId2 = 7
  var FrameDocStringList = 6;
  var FrameSynonyms = 5;
  var FrameCommonName = 4;
  var FrameName = 3;
  var FrameType = 2;
  // 1 is always null
  var FrameId = 0;

/* Arguments: map, an OpenLayer map.
              iFrame, an index frame identifying the gene from which regulatees are shown.
              frames, array of frame structures.
              regLayer, a layer structure which has the OpenLayer to use.
              resultp, true => return an array of the frames highlighted but do not highlight.
   Returns: array of gene indices in frames that were highlighted if resultp is true.
*/
function highlightDirectRegulatees(frameId, frames, regLayer, resultp){
    // showOvBusy();
    //  if (frames == null) return;
    //  var nodes  = initRegOverview.zoomLevels[map.zoom].nodes;
    //  if (nodes == null) return;
    var iFrame = frameIdToIndex(frameId, frames);
    var result = resultp ? new Array() : false;
    // The given frame is at least one node highlighted.
    if (resultp) result.push(iFrame);
    var frame  = frames[iFrame];
    if (frame == undefined || frame == null || frame[FrameRegulatees] == null) return result;

  // Get the node frames as part of the result.
    if (resultp){
      for (var i=0; i < frame[FrameRegulatees].length; i++) {
	  for (var j=0; j < frame[FrameRegulatees][i].length; j++) {
              var fi    = frame[FrameRegulatees][i][j];
              result.push(fi);
	  }}
    } else { 
	var fromNode = iFrame;
//	regHighlightOneNode(regLayer, fromNode);
	// collect two pieces of information (a) the nodes to draw arcs to (b) all the nodes.
	let allRegulatees = new Array();
	let arcNodes = new Array();
	for (var i=0; i < frame[FrameRegulatees].length; i++) {
	    arcNodes.push(frame[FrameRegulatees][i][0]); // first frameId in list of them
	    for (var j=0; j < frame[FrameRegulatees][i].length; j++) {
		allRegulatees.push(frame[FrameRegulatees][i][j]);
	    }};
	highlightRegArcs(fromNode, arcNodes, regLayer, allRegulatees);
    };
    // IMPROVEMENT: add all nodes, draw line to first, highlight rest?
    // showOvNotBusy();
    return result;
}

function createHighlightDirectRegulators(iFrame, frames, orgid){
    if (frames == null) return;
    var frame = frames[iFrame];
    if (frame == undefined || frame == null) return;
    var frameId = frame[FrameId];
    var fn = function(frames, regLayer, resultp) {
	return highlightDirectRegulators(frameId, frames, regLayer, resultp)
  };

    var regLayer  = createRegHighlightLayer('Direct&nbsp;Regulators of '+frame[FrameName], null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
  fn(frames, regLayer, false);
}

/* Highlight direct regulators of frame and frame itself.

   Arguments: See fn ShowDirectRegulatees

   Returns: an array of frames if resultp is true.
*/
function highlightDirectRegulators(frameId, frames, regLayer, resultp){
    if (frames == null) return;
    var result  = resultp ? new Array() : false;
    var iFrame = frameIdToIndex(frameId, frames);
    var frame   = frames[iFrame];
    if (frame == undefined || frame == null || frame[FrameRegulators] == null) return result;
    // The given frame is at least one node highlighted.
    if (resultp) result.push(iFrame);
    // Highlight the regulators
    if (resultp) {
	for (var i=0; i < frame[FrameRegulators].length; i++) {
	    var fi = frame[FrameRegulators][i];
	    result.push(fi);
	}
    } else {
      var toNode  = iFrame;
    // Let turn this off for now. regHighlightOneNode(regLayer.layer, toNode);
    // Show and highlight the arcs.
      let allRegulators = new Array();
      // let arcNodes = new Array();
      for(var i=0; i < frame[FrameRegulators].length; i++){
	  allRegulators.push(frame[FrameRegulators][i]);
      };
      highlightRegArcs(allRegulators, toNode, regLayer, allRegulators);
  }
  return result
}

  function createHighlightDirectRegulateesAndRegulators(iFrame, frames, orgid){
//  showOvBusy();
      if (frames == null) return;
      var frame = frames[iFrame];
      if (frame == undefined || frame == null) return;
      var frameId  = frame[FrameId];
      var fn = function(frames, regLayer, resultp) {
	  //  var iFrame = frameIdToIndex(frameId, frames);
	  return highlightDirectRegulateesAndRegulators(frameId, frames, regLayer, resultp);
  };

      var regLayer  = createRegHighlightLayer('Direct&nbsp;Regulatees and Regulators of '+frame[FrameName], null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
  fn(frames, regLayer, false);
//  showOvNotBusy();
}

function highlightDirectRegulateesAndRegulators(frameId, frames, regLayer, resultp){
  if (frames == null) return;
    var result1 = highlightDirectRegulatees(frameId, frames, regLayer, resultp);
    var result2 = highlightDirectRegulators(frameId, frames, regLayer, resultp);
    return (resultp) ? result1.concat(result2) : false;
}

/* Highlight the direct regulatees and the indirect ones for frame.

*/

function createHighlightDirectAndIndirectRegulatees(iFrame, frames, orgid){
  if (frames == undefined || frames == null) return;
    var frame    = frames[iFrame];
    if (frame == undefined || frame == null) return;
    var frameId = frame[FrameId];
    if (dialogControlRegulateeIndirectionLevel != null) {
	dialogControlRegulateeIndirectionLevelClose(initRegOverview);
	dialogControlRegulateeIndirectionLevel = null;
    };

    var fn = function(frames, regLayer, resultp, recursionLimit = 1) {
	var noSelection = getNewSelectionNo();
	highlightDirectAndIndirectRegulatees(frameId, frames, regLayer, noSelection, resultp, recursionLimit);
    };

    var regLayer  = createRegHighlightLayer('Regulatees of '+frame[FrameName],
	null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
    labelName = frame[FrameName];
    // Create a new noSelection number to mark the nodes.
    fn(frames, regLayer, false);
}

/* Highlight nodes and add arcs between nodes by following the regulatee (out) nodes
   from iFound. Recursively apply the highlighting from the direct regulatees of iFound.

   Arguments: map, an OpenLayers map
              iFrame, an index in frames
              frames, an array of frame structures
              regLayer, a structure layer
              noSelection, an integer to mark the visited nodes
              resultp, true => do not return the set of frames found. false => highlight.
   Returns: array of indices representing all nodes that were highlighted.
*/

var labelName = "";
var changeRedirectLevel = function (level) {}; 
var recursionLimitAtStart = 1;

function clearLayerHighlighting(layer) {
    let wg = WG.wgactive;
    wg.highlightList[layer.i][2] = [];
    layer.collection = [];
    WG.Draw(wg);
}

function highlightDirectAndIndirectRegulatees(frameId, frames, regLayer, noSelection, resultp, recursionLimit){
//    console.log("highlightDirectAndIndirectRegulatees: " + recursionLimit);
    changeRedirectLevel = function (level) {
	recursionLimitAtStart = level;
	var docElement = document.getElementsByClass('pageContentDynamic')[0];
	var origCursor = docElement.style.cursor;
	var popElement = document.getElementById('dialogControlRegulateeIndirectionLevel');
	var inputElement = document.getElementById('quantity');

	if (docElement != null) docElement.style.cursor='progress';
	if (popElement != null) popElement.style.cursor='progress';
	if (inputElement != null) inputElement.style.cursor='progress';

        var doItFun = function () { 
	    clearLayerHighlighting(regLayer);
	    regLayer.fn(frames, regLayer, resultp, level);
	    if (docElement != null) docElement.style.cursor=origCursor;
	    if (popElement != null) popElement.style.cursor=origCursor;
	    if (inputElement != null) inputElement.style.cursor=origCursor;
	};
	var timeOut = (level > 1) ? 1000 : 1 ;
	setTimeout (doItFun, timeOut);

//	docElement.style.cursor=origCursor;
//	if (popElement != null) popElement.style.cursor=origCursor;
//	if (inputElement != null) inputElement.style.cursor=origCursor;
    };
    if (recursionLimit > 0) {
	if (frames == undefined || frames == null) return;
	var result = (resultp) ? new Array() : false;
	var iFrame = frameIdToIndex(frameId, frames); 
	var frame  = frames[iFrame];
	var name = frame[FrameName];
	if (frame == undefined || frame == null) return result;
	if (resultp) result.push(iFrame);
	frame[1]      = noSelection; // Mark the found node as visited.
	var fromNode  = iFrame;
	// Highlight the arcs.
	let allRegulatees = new Array();
	let arcNodes = new Array()
	if (frame[FrameRegulatees] != null) {
	    for (var i=0; i < frame[FrameRegulatees].length; i++) {
		if (frames[frame[FrameRegulatees][i][0]][1] != noSelection) {
		    arcNodes.push(frame[FrameRegulatees][i][0]);
		    for (var j=0; j < frame[FrameRegulatees][i].length; j++) {
			allRegulatees.push(frame[FrameRegulatees][i][j]);
		    }
		}
	    }
	    allRegulateesCopy = [... allRegulatees];
	    var drawP = (recursionLimit == 1) ? true : false;
	    if  (selfRegulating(frames, fromNode)) {
		allRegulateesCopy.push(fromNode);
		highlightRegArcs(fromNode, arcNodes, regLayer, allRegulateesCopy, drawP)
	    } else {
		highlightRegArcs(fromNode, arcNodes, regLayer, allRegulatees, drawP)
	    };
	    //    highlightRegArcs(fromNode, arcNodes, regLayer, allRegulatees);
	    for (var k = 0; k < arcNodes.length; k++) {
		var iNodesNew = highlightDirectAndIndirectRegulatees(frames[arcNodes[k]][FrameId], frames, regLayer, noSelection, resultp, (recursionLimit - 1));
		if (resultp) result = result.concat(iNodesNew);
		if (resultp) result = result.concat(allRegulatees);
	    }}
	if (dialogControlRegulateeIndirectionLevel == null)
	    showControlRegulateeIndirectionLevelDialog(recursionLimit, labelName);
	return result;
    }}

function createHighlightDirectAndIndirectRegulateesWhichRegulate(iFrame, frames, orgid){
  if (frames == undefined || frames == null) return;
  var frame    = frames[iFrame];
  if (frame == undefined || frame == null) return;
  var fn = function(frames, regLayer, resultp) {
    var noSelection = getNewSelectionNo();
      return highlightDirectAndIndirectRegulateesWhichRegulate(iFrame, frames, regLayer, noSelection, resultp, 0)
  };
  var regLayer  = createRegHighlightLayer('Direct&nbsp;and&nbsp;Indirect Regulatees of '+frame[FrameName]+' which are Regulators',
                                          null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
  // Create a new noSelection number to mark the nodes.
  fn(frames, regLayer, false);
}

/* Highlight nodes and add arcs between nodes by following the regulatee (out) nodes
   from iFound. Recursively apply the highlighting from the direct regulatees of iFound.

   Arguments: map, an OpenLayers map
              iFrame, an index in frames
              frames, an array of frame structures
              regLayer, a structure layer
              noSelection, an integer to mark the visited nodes
              resultp, true => do not return the set of frames found. false => highlight.
   Returns: array of indices representing all nodes that were highlighted.
*/
function highlightDirectAndIndirectRegulateesWhichRegulate(iFrame, frames, regLayer, noSelection, resultp, recursionCount){
    console.log("highlightDirectAndIndirectRegulateesWhichRegulate: " + recursionCount);
    if (recursionCount <= 100) {
	if (frames == undefined || frames == null) return;
	var result    = (resultp) ? new Array() : false;
	   var frame     = frames[iFrame];
	   if (frame == undefined || frame == null) return result;
	   if (resultp) result.push(iFrame);
	   frame[1]      = noSelection; // Mark the found node as visited.
	   var fromNode  = iFrame;
	   
	   // Highlight the arcs.
	   //    let allRegulatees = new Array();
	   let arcNodes = new Array()
	   if (frame[FrameRegulatees] != null) {
	       for (var i=0; i < frame[FrameRegulatees].length; i++) {
		   if ((frames[frame[FrameRegulatees][i][0]][1] != noSelection) &&
		       (frames[frame[FrameRegulatees][i][0]][FrameRegulatees] != null)) {
		       arcNodes.push(frame[FrameRegulatees][i][0]);
		       //	 for (var j=0; j < frame[FrameRegulatees][i].length; j++) {
		       //	     allRegulatees.push(frame[FrameRegulatees][i][j]);
		   }
	       }
	   }
	   allarcNodesCopy = [... arcNodes];
	   if  (selfRegulating(frames, fromNode)) {
	       allarcNodesCopy.push(fromNode);
	       highlightRegArcs(fromNode, arcNodes, regLayer, allarcNodesCopy)
	   } else {
	       highlightRegArcs(fromNode, arcNodes, regLayer, arcNodes)
	   };
	   // first node in list might be a regulator, if there are other nodes, its an operon and none of the others will regulate
	   //    highlightRegArcs(fromNode, arcNodes, regLayer, allRegulatees);
	   for (var k = 0; k < arcNodes.length; k++) {
	       var iNodesNew = highlightDirectAndIndirectRegulateesWhichRegulate(arcNodes[k], frames, regLayer, noSelection, resultp, (recursionCount + 1));
	       if (resultp) result = result.concat(iNodesNew);
	       if (resultp) result = result.concat(arcNodes);
	   }}
       return result;
   }

function createHighlightOnlyDirectRegulateesRegulators(iFrame, frames, orgid){
  if (frames == undefined || frames == null) return;
  var frame    = frames[iFrame];
  if (frame == undefined || frame == null) return;
  var fn = function(frames, regLayer, resultp) {
      return highlightOnlyDirectRegulateesRegulators(iFrame, frames, regLayer, resultp)
  };
    var regLayer  = createRegHighlightLayer('Direct&nbsp;Regulatees of '+ frame[FrameName] + ' which are Regulators', null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
  // Create a new noSelection number to mark the nodes.
  fn(frames, regLayer, false);
}


function highlightOnlyDirectRegulateesRegulators(iFrame, frames, regLayer, resultp) {
    if (frames == undefined || frames == null) return;
    var result    = (resultp) ? new Array() : false;
    var frame     = frames[iFrame];
    if (frame == undefined || frame == null) return result;
    if (resultp) result.push(iFrame);
    var fromNode  = iFrame;

  // Highlight the arcs.
    let RegulateesWhichRegulate = new Array();
    // let arcNodes = new Array()
    if (frame[FrameRegulatees] != null) {
	for (var i=0; i < frame[FrameRegulatees].length; i++) {
	    // regulatees are listed as operons, so only look at first one
	    if (frames[frame[FrameRegulatees][i][0]][FrameRegulatees] != null) {
		RegulateesWhichRegulate.push(frame[FrameRegulatees][i][0]);
		// if there's more than one, they aren't regulators
		//	 for (var j=0; j < frame[FrameRegulatees][i].length; j++) {
		//	     allRegulatees.push(frame[FrameRegulatees][i][j]);
		//	 }
	    }
	}
	highlightRegArcs(fromNode, RegulateesWhichRegulate, regLayer, RegulateesWhichRegulate)
	return result;
       }}

/* This is similar to direct and indirect regulatees but for regulators.

*/
function createHighlightDirectAndIndirectRegulators(iFrame, frames, orgid){
    if (frames == undefined || frames == null) return;
    var frame    = frames[iFrame];
    if (frame == undefined || frame == null) return;
    var frameId  = frame[FrameId];
    var fn = function(frames, regLayer, resultp) {
	var noSelection = getNewSelectionNo();
	return highlightDirectAndIndirectRegulators(frameId, frames, regLayer, noSelection, resultp);
    };
    var regLayer  = createRegHighlightLayer('Direct&nbsp;and&nbsp;Indirect Regulators of '+frame[FrameName], null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
    fn(frames, regLayer, false);
}

function selfRegulating (frames, iFrame) {
    var frameRegulators = frames[iFrame][FrameRegulators]
    if (frameRegulators) {
	return (frameRegulators.includes(iFrame))
    } else {
	return false
    }
}

function highlightDirectAndIndirectRegulators(frameId, frames, regLayer, noSelection, resultp) {
    if (frames == undefined || frames == null) return result;
    var iFrame = frameIdToIndex(frameId, frames);
    var result = (resultp) ? new Array() : false;
    var frame = frames[iFrame];
    if (resultp) result.push(iFrame);
    if (frame == undefined || frame == null) return result;
    frame[1] = noSelection; // unique to this call number to mark the found node as visited.  
    if (frame[FrameRegulators] == null) return result;
    var toNode    = iFrame;
  // Let turns this off for now. if(!resultp) regHighlightOneNode(regLayer.layer, toNode);
    let allRegulators = new Array();
    for (var i=0; i < frame[FrameRegulators].length; i++) {
	if (frames[frame[FrameRegulators][i]][1] != noSelection) {
	    allRegulators.push(frame[FrameRegulators][i])
	}};
    allRegulatorsCopy = [... allRegulators];
    if  (selfRegulating(frames, toNode)) {
	allRegulatorsCopy.push(toNode);
	highlightRegArcs(allRegulators, toNode, regLayer, allRegulatorsCopy)
    } else {
	highlightRegArcs(allRegulators, toNode, regLayer, allRegulators)
    };
    for (var k = 0; k < allRegulators.length; k++) {
    var iNodesNew = highlightDirectAndIndirectRegulators(frames[allRegulators[k]][FrameId], frames, regLayer, noSelection, resultp);
      if (resultp) result = result.concat(iNodesNew);
     }
//  showOvNotBusy();
    return result;
}

function createHighlightDirectAndIndirectRegulateesAndRegulators(iFrame, frames, orgid){
    if (frames == undefined || frames == null) return;
    var frame    = frames[iFrame];
    if (frame == undefined || frame == null) return;
    var frameId  = frame[FrameId];
    var fn = function(frames, regLayer, resultp) {
	var noSelection = getNewSelectionNo();
	return highlightDirectAndIndirectRegulateesAndRegulators(frameId, frames, regLayer, noSelection, resultp)
    };
    var regLayer  = createRegHighlightLayer('Direct&nbsp;and&nbsp;Indirect Regulatees and Regulators of '+frame[FrameName], null, [iFrame], null, orgid, fn, [frames[iFrame][FrameId]]);
  fn(frames, regLayer, false);
}


function highlightDirectAndIndirectRegulateesAndRegulators(frameId, frames, regLayer, noSelection, resultp){
  if (frames == undefined || frames == null) return;
    var result1 = highlightDirectAndIndirectRegulatees(frameId, frames, regLayer, noSelection, resultp, 2);
    // TBD: this will highlight frame twice.
    var result2 = highlightDirectAndIndirectRegulators(frameId, frames, regLayer, noSelection, resultp);
    return (resultp) ? result1.concat(result2) : false;
}

/* Returns: an integer.
 */
function getNewSelectionNo(){
    ++getNewSelectionNo.selectionNo;
    return getNewSelectionNo.selectionNo;
}

getNewSelectionNo.selectionNo = 0;

/* Draw an arc from fromNode node to toNode node on layer.

   Arguments: fromNode, toNode, two node structures.
              layer, a OpenLayers layer.
              headFrom, true => show the head of the arc at the from node, not the to node.
   Returns: true <=> an arc was drawn.
*/
/* pre REG-NET-WG
function highlightRegArc(map, fromNode, toNode, layer, headFrom){
  if (fromNode == null || fromNode == undefined
      || toNode == undefined || toNode == null) return false;
  if (fromNode == toNode) return false;   // TBD: self-loop.

  var fromLonLat = mapNodesXYtoLonLat(map, fromNode.x, fromNode.y);
  var toLonLat   = mapNodesXYtoLonLat(map, toNode.x, toNode.y);
  var lineStringVector = [new OpenLayers.Geometry.Point(fromLonLat.lon, fromLonLat.lat),
                          new OpenLayers.Geometry.Point(toLonLat.lon, toLonLat.lat)
                         ];
  var lineString    = new OpenLayers.Geometry.LineString(lineStringVector);
  var vArc = new OpenLayers.Feature.Vector(lineString);
  // The line of the arrow.
  layer.addFeatures([vArc]);

  if (headFrom) {
     var origin = new OpenLayers.Geometry.Point(fromLonLat.lon, fromLonLat.lat);
     // The head of the arrow.
     var tStringVector = [ origin.clone(),
                           new OpenLayers.Geometry.Point(fromLonLat.lon - 6, fromLonLat.lat + 6),
                           new OpenLayers.Geometry.Point(fromLonLat.lon - 6, fromLonLat.lat - 6)
                         ];
     var triangle    = new OpenLayers.Geometry.LinearRing(tStringVector);
     // Rotate the triangle
     var angle = Math.atan2(toLonLat.lat - fromLonLat.lat , toLonLat.lon - fromLonLat.lon);

     triangle.move(15, 0);
     triangle.rotate(180*(angle/Math.PI), origin);

     var vTriangle   = new OpenLayers.Feature.Vector(triangle);
     layer.addFeatures([vTriangle]);
  }
  else {
     // The head of the arrow is near the toNode node.
     var origin = new OpenLayers.Geometry.Point(toLonLat.lon, toLonLat.lat);

     var tStringVector = [ origin.clone(),
                           new OpenLayers.Geometry.Point(toLonLat.lon - 6, toLonLat.lat + 6),
                           new OpenLayers.Geometry.Point(toLonLat.lon - 6, toLonLat.lat - 6)
                         ];
     var triangle    = new OpenLayers.Geometry.LinearRing(tStringVector);
     // Rotate the triangle
     var angle = Math.atan2(toLonLat.lat - fromLonLat.lat , toLonLat.lon - fromLonLat.lon);
     // TBD: make the -15 variables depending on the zoom level.
     triangle.move(-15, 0);
     triangle.rotate(180*(angle/Math.PI), origin);
     var vTriangle   = new OpenLayers.Feature.Vector(triangle);
     layer.addFeatures([vTriangle]);
  }
  return true;
}*/
/* REG-NET-WG */
function highlightRegArcs(fromNode, arcNodes, regLayer, allNodes) {
    if (fromNode == null || fromNode == undefined
	|| arcNodes == undefined || arcNodes == null) return false;
    WG.HighlightRegArcs(fromNode, arcNodes, regLayer, allNodes);
    return true;
}

function sign(x) {
  if (x == 0 )   return 0;
  else if(x < 0) return -1;
  else return 1;
}


/* ============================== Cellular Overview ============================== */


/* In the case of the regulatory overview, the vector initRegOverview.frames
   and all the vectors nodes in zoomLevels are synchronized. That
   is nodes[i].frameid = initRegOverview.frames[i].frameid.

   This is not the case for the cellular overview. This is so
   since different zoom levels have different number of objects.


   Therefore, all the search functions deal directly with nodes
   and not indices.

*/

// The context menu when right-clicking in a blank area of the cellular overview.
var celBlankAreaContextMenuItems = [
  { text: "Enter/Paste Data from Keyboard",
    onclick: {fn: function(){celDialogMixing.show();}}},
  { text: "Highlight Pathway(s)",
    submenu: {id: "celHighlightPathwaysMenuRightClick", itemdata:
              [{ url:  "javascript:showOvDialog(celDialogPathwayNameOrFrameID)",
                 text: "By Name or Frame ID" },
                { url:  "javascript:showOvDialog(celDialogPathwaySubstring)",
                  text: "By Substring" },
                { url:  "javascript:PathwayEvidence()",  
                 text: "By Evidence" },
	       { url:  "javascript:showOvDialog(celDialogPathwayCuration)",  
                 text: "By Curation"}
              ]}
  },
    {text: "Highlight Reaction(s)", 
			style: "COLLAPSED",
                        submenu: {id: "celHighlightReactionsMenuRightClick", itemdata: 
                        [{ url:  "javascript:showOvDialog(celDialogReactionNameOrFrameID)", 
                           text: "By Name or Frame ID" },
                         { url:  "javascript:showOvDialog(celDialogReactionSubstring)", 
  	                   text: "By Substring" },
                         { url:  "javascript:showOvDialog(celDialogReactionEC)", 
                           text: "By EC Number" },
                         { url:  "javascript:showOvDialog(celDialogReactionEnzyme)", 
                           text: "By Enzyme Name"},
			 { url:  "javascript:ReactionEvidence()",  
			   text: "By Evidence" },
			 { url:  "javascript:ReactionCCO()",  
			   text: "By Enzyme Cellular Location" },
			 {text: "By Modulation",
			  style: "COLLAPSED",
                          submenu: {id: "celHighlightCompoundModulationRightClickMenu",
			            itemdata: 
				    [{text: "Cofactor",
				     style: "COLLAPSED",
				      submenu: {id: "celHighlightCompoundCoFactorMenuRightClick",
						itemdata: 
						[{url:  "javascript:showOvDialog(celDialogCoFactorNameOrFrameID)", 
						  text: "By Name or Frame ID" },
						 {url:  "javascript:showOvDialog(celDialogCoFactorSubstring)", 
						  text: "By Substring" },
						 {url:  "javascript:showOvDialog(celDialogCoFactorStructure)", 
						  text: "By Structure" },
						 {url:  "javascript:ReactionCofactor()",
						  text : "Any Compound"}
				
						]}
				     },
				     {text: "Activator",
				      style: "COLLAPSED",
				      submenu: {id: "celHighlightCompoundActivatorMenuRightClick",
						itemdata: 
						[{url:  "javascript:showOvDialog(celDialogActivatorNameOrFrameID)", 
						  text: "By Name or Frame ID" },
						 {url:  "javascript:showOvDialog(celDialogActivatorSubstring)", 
						  text: "By Substring" },
						 {url:  "javascript:showOvDialog(celDialogActivatorStructure)", 
						  text: "By Structure" },
						 {url:  "javascript:ReactionActivator()",
						  text : "Any Compound"}
						]}
				     },
				     {text: "Inhibitor",
				      style: "COLLAPSED",
				      submenu: {id: "celHighlightCompoundInhibitorMenuRightClick",
						itemdata: 
						[{url:  "javascript:showOvDialog(celDialogInhibitorNameOrFrameID)", 
						  text: "By Name or Frame ID" },
						 {url:  "javascript:showOvDialog(celDialogInhibitorSubstring)", 
						  text: "By Substring" },
						 {url:  "javascript:showOvDialog(celDialogInhibitorStructure)", 
						  text: "By Structure" },
						 {url:  "javascript:ReactionInhibitor()",
						 text : "Any Compound"}
						 ]}
				     }   
  				    ]
				   } }
			]}
                        },
  { text: "Highlight Gene(s)",
    submenu: {id: "celHighlightGenesMenuRightClick", itemdata:
              [{ url:  "javascript:showOvDialog(celDialogGeneNameOrFrameID)",
                 text: "By Name or Frame ID"},
                { url:  "javascript:showOvDialog(celDialogGeneSubstring)",  text: "By Substring" },
                { url:  "javascript:showOvDialog(celDialogGeneFile)",  text: "From File" },
               { text: "By Replicon", 
                 onclick: {fn:celOverviewHighlightAllGenesInReplicons}},
               { url:  "javascript:GeneRegulon()",  
                 text: "By Regulon" }
               ]}
  },
  { text: "Highlight Enzyme(s)",
    submenu: {id: "celHighlightEnzymesMenuRightClick", itemdata:
              [{ url:  "javascript:showOvDialog(celDialogEnzymeNameOrFrameID)",
                 text: "By Name or Frame ID"},
                { url:  "javascript:showOvDialog(celDialogEnzymeSubstring)",
                  text: "By Substring" },
	       { url:  "javascript:showOvDialog(celDialogEnzymeCuration)",
                  text: "By Curation"}
               ]}
  },
  { text: "Highlight Compound(s)",
    submenu: {id: "celHighlightCompoundsMenuRightClick", itemdata:
              [{ url:  "javascript:showOvDialog(celDialogCompoundNameOrFrameID)",
                 text: "By Name or Frame ID" },
                { url:  "javascript:celDialogCompoundSubstring.show()",
                  text: "By Substring" }
               ]}
  },
  { text: "Clear All Highlighting",
    onclick: {fn: clearAllHighlightingCel}},
  { text: "Show Legend",
    onclick: {fn: function(){celDialogLegend.show()}}},
  { text: "Generate Bookmark for Current Cellular Overview",
    onclick: {fn: function(){celDialogGenURL.show(); genCelURL();}}},
  { text: "Export Pathways with Highlights to Pathway Collage",
    onclick: {fn: function(){window.open("/cytoscape-js/ovsubset.html?celov=T&orgid="+initCelOverview.orgid+genCelURLQueryParms());}}},
  { text: "Help",
    onclick:{fn: function(){window.open("/PToolsWebsiteHowto.shtml#celOverview");}}}
];

var celMinimalContextMenuItems = [
  { text: "Clear All Highlighting",
    onclick: {fn: clearAllHighlightingCel}},
  { text: "Show Legend",
    onclick: {fn: function(){celDialogLegend.show()}}},
  { text: "Generate Bookmark for Current Cellular Overview",
    onclick: {fn: function(){celDialogGenURL.show(); genCelURL();}}},
  { text: "Help",
    onclick:{fn: function(){window.open("/PToolsWebsiteHowto.shtml#celOverview");}}}
];

/* Display a warning panel that the orgid has no
   regulatory data if allOrganisms say so.

*/
function checkOrgidCellular(orgid) {
  if (!isOrgidCelOverview(orgid)) {
     var noCelOvDialog = new YAHOO.widget.Dialog("noCelOvDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [{ text:"Ok", handler: function(){noCelOvDialog.hide()}, isDefault:true}
                        ]
             });
     noCelOvDialog.setHeader('No Cellular Overview for Selected Database Warning');
     noCelOvDialog.setBody('There is no Cellular Overview for the selected database '+orgNameFromOrgID(orgid)+'.');
     noCelOvDialog.cfg.setProperty('icon', YAHOO.widget.Dialog.ICON_WARN);
     noCelOvDialog.render(document.body);
     return false;
  }
  return true;
}

/* Called when the Cellular Overview Web page is loaded.
   All the following operations are done for the cellular
   overview only.

   o Create the base map layer and the layer for all geometric figures
     for highlighting and mouse over.

   o Register all global events for mouse tracking and zooming
     and contextual menus.

   o Find the right zooming level for the first overview based
     on the size of the current window of the browser.

   o Initiate the download of the first tiles and center the map.

*/
function initCelOverview() {
  if (document.getElementById("mapCel") == undefined ||
      document.getElementById("mapCel") == null) {
    alertUser('initCelOverview: this Web page has no mapCel element. The Cellular Overview will not work.');
    return;
  }

  determineOrgIdFromURL() // webservice call would need this.

  // Get description of this Cel Ov based on selected orgid.
  getCelOvDescriptor(orgID());
  initCelOverview.nbZoomLevels = 4;
  initCelOverview.orgid = orgID();  
  var zoomTo = determineCelInitZoomLevel();
  // the following doesn't really work because WG.Load doesn't ever return a value.
  setZoomLevel();

  initCelContextMenu();
  WG.LoadCellularOverview(orgID(),zoomTo,'mapCel');
//  replayCelOperationsURL();
  showOrganismNameCel(orgID());
}

/* 30000 pixels by 30000 pixels is typically enough for all organisms.
   Do not change the following three values without changing the Lisp
   code in cwest-methods.lisp.
*/
initCelOverview.extent_height = 30000;
initCelOverview.extent_width  = 30000;
initCelOverview.nbZoomLevels  = 4;
initCelOverview.map           = null;
initCelOverview.omics         = null;
initCelOverview.orgid         = null;

/*
  All the cel ov highlighting layers are stored here.
  Each element of layers is an array of length nbZoomLevels.
*/
initCelOverview.layers  = new Array();

function celMapMoveEnd(){
  logMsg('celMapMoveEnd');
}

/*
   Called during the panning of the Cellular Overview.
*/
function celMapDrag(){
  // logMsg('celMapDrag');
  celMapRepositionPopups(false);
}

/*
  The opened Cellular Overview popups, if any, are repositioned
  to take into account the new position of the map or its
  new zoom level.
*/
function celMapRepositionPopups(redrawBoundingBox) {
  // logMsg('celMapRepositionPopups '+redrawBoundingBox);
  var map = initCelOverview.map;
  var zoomLevel = map.zoom;
  if (showCelTooltip.popups) 
    celMapRepositionPopupsInternal(redrawBoundingBox, map, zoomLevel, showCelTooltip.popups);
/*  if (celPWOmicsData.popups)
    celMapRepositionPopupsInternal(redrawBoundingBox, map, zoomLevel, celPWOmicsData.popups); */ }

function celMapRepositionPopupsInternal(redrawBoundingBox, map, zoomLevel, popupArray) {
  // Keep all the opened tooltips at their relative position.
  for (var i=0; i < popupArray.length; i++) {
    var popup = popupArray[i];
    if (popup && popup.keepOpen && popup.boundingBox && redrawBoundingBox) {
      map.layers[0].destroyFeatures([popup.boundingBox]);
      popup.boundingBox = null;
      var node = getCelNodeXyOid(false, false, popup.oid); 
      if (node) {
        popup.zoomLevelsNodes[zoomLevel] = node;
        popup.x  = node.x2  + popup.dx;
        var maxy = map.maxExtent.top;
        popup.y  = maxy - node.y1  + popup.dy; } }
    if (popup && popup.dialog && popup.keepOpen) {
      // The following fires the moveEvent attached to the popup
      // dialog. This will update the line-link.
      var x = popup.x;
      var y = popup.y;
      popup.panning = true;
      var px = map.getPixelFromLonLat(new OpenLayers.LonLat(x,y));
      // Move the popup along with the map.
      popup.dialog.moveTo(px.x, px.y + 140); } } }

/*
   Fired when the map is panned.
*/
function celMapMoveStart(){
  // The following removes the tool tip that should not be kept
  // and keep the ones marked as to stay open.
  var map = initCelOverview.map;

  removeNonPermanentCelToolTips();
  // Remove all the links while the map is panned.
  if (showRegTooltip.popups){
    for (var i=0; i < showCelTooltip.popups.length; i++) {
      var popup = showRegTooltip.popups[i];
      if (popup && popup.dialog && popup.keepOpen)
        // Remove the link.
        if (popup.feature) map.layers[0].destroyFeatures([popup.feature]); } }
/*
  if (celPWOmicsData.popups){
    for (var i=0; i < showCelTooltip.popups.length; i++) {
      var popup = celPWOmicsData.popups[i];
      if (popup && popup.dialog) 
        // Remove the link.
        if (popup.feature) map.layers[0].destroyFeatures([popup.feature]); } } */ }

/*
   Get the descriptor vector from the server for this organism.  
   At a minimum, the descriptor says how many zoom levels will be
   available. The tiles and Lisp data structure may still not exist yet
   on the server for some or even all zoom levels but they will be
   in the process of being generated once we get a file descriptor.

   The descriptor vector is either an array of structures {width:.. , height:..},
   the string 'being-generated' or null. The structure describes the width and height
   of one zoom level, a 'being-generated' means that zoom level is being generated on
   teh server, a null means that the zoom level has not been generated.

   Arguments: orgid, a string.
   Returns: the number of zoom levels, and
            the descriptor is assigned to initCelOverview.
*/
function getCelOvDescriptor(orgid) {
  var url  = "/"+orgid+"/cel-overview-descriptor";
  var descriptor      = null;
  var generated       = false;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      try {
	eval(this.responseText);
      } catch(e) {
	showServerError('(Error 10) A Web server error occurred retrieving the Cellular Overview descriptor ', e, this.responseText);
	initCelOverview.descriptor = null;
	return 0;
      };
      
      // If the response is a string in descriptor, this is an error message.
      if (typeof(descriptor) == 'string') {
	showError('The Web server encountered the following difficulty for displaying the Cellular Overview of organism '+orgid+'.', 
		  descriptor, 'Cellular Overview Error on Server');
	initCelOverview.descriptor = null;
	return 0;
      }
      else {
	initCelOverview.descriptor = descriptor;
	return (initCelOverview.descriptor.length);
      }
    }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

/*
   Request the descriptor for only one zoom level. This is actually the
   general way of processing: each zoom level descriptor is requested
   independently. This might trigger the generation of the zoom level
   tiles and data on the Web server.

   Returns: set initCelOverview.descriptor[zoomLevel]

*/
function getCelOvDescriptorOneZoomLevel(orgid, zoomLevel) {
  var url  = "/"+orgid+"/cel-overview-descriptor-one-zoomlevel?zoomlevel="+zoomLevel;
  var descriptor      = null;
  var waitDescriptor  = null;
  var text            = null;
  var stop = false;

  showOvBusy("<center><h2>Please Wait<h2></center> <p>The Web server is generating images and data for the Cellular Overview.</p>");
  // Ask for descriptor and wait for a response.
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      try {
	eval(this.responseText);
      } catch(e) {
	showServerError('(Error 10b) A Web server error occurred retrieving the Cellular Overview descriptor ', e, this.responseText);
	showOvNotBusy();
	return null;
      };
      
      if (typeof(waitDescriptor) == 'string') {
	showOvBusy(waitDescriptor);
      }
      else if (typeof(descriptor) == 'string') {
	showError('The generation of the Web Cellular Overview, for organism '+orgid+', failed on the server.', descriptor, 'Cellular Overview Error on Server');
	showOvNotBusy();
	return null;
      }
      else { showOvNotBusy(); return descriptor; }
    }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function nbLevelsBeingGenerated(descriptor) {
  var nb = 0;
  for (i = 0; i < descriptor.length; i++) {
    if (descriptor[i] === 'being-generated') nb++;
  }
  return nb;
}

function determineOrgIdFromURL(){
    var orgidValue = getUrlVar("orgid");
    if (orgidValue) setOrganism(orgidValue);
    else { 
	// paley:Apr-21-2020
	// Replace the current url with one that contains the orgid.
	let url = new URL (document.location.href);
	url.searchParams.append('orgid', orgID());
	//jah document.location = url.toString();
	window.history.replaceState({}, null, url.toString());
	
    }
}

/*
   Return the center given by the URL, false if none in URL.
*/
function determineCelOvInitCenterURL(){
  var lon = getUrlVar("lon");
  var lat = getUrlVar("lat");
  if (lon && lat) {
    return (new OpenLayers.LonLat(parseFloat(lon), parseFloat(lat)));
  }
  else return false;
}

/* Compute the lon and lat of the center of the Cel Ov.
   The descriptor may contain 'being-generated' or null.

 */
function computeCelOvCenter(zoomLevel){
  if (ensureDescriptorZoomLevelExist(zoomLevel)) {
    return computeCelOvCenterDescriptor(initCelOverview.descriptor[zoomLevel])
  }
  // Just a default to get going.
  return new OpenLayers.LonLat(400, initCelOverview.extent_height - 300); 
}

function computeCelOvCenterDescriptor(descriptor) {
  var w2 = descriptor.width;
  var h2 = descriptor.height;
  return new OpenLayers.LonLat(Math.round(w2/2),initCelOverview.extent_height - Math.round(h2/2));
}

// Query the server if needed to get a descriptor of the zoom level.
// if no valid descriptor can be given, return false;
function ensureDescriptorZoomLevelExist(zoomLevel) {
  if (!initCelOverview.descriptor[zoomLevel] || initCelOverview.descriptor[zoomLevel] === 'being-generated') {
    var descriptor = getCelOvDescriptorOneZoomLevel(orgID(), zoomLevel);
    initCelOverview.descriptor[zoomLevel] = descriptor;
    return (descriptor && descriptor != 'being-generated'); 
  }
  else return initCelOverview.descriptor[zoomLevel];
}


/* The zoom level might be given in the URL.
   If not given, it is computed based on the size
   of the window.

   Parms: none
   Returns: an integer.

 */
function determineCelInitZoomLevel() {
  /* not for WG
  var map = initCelOverview.map;
  */ 
  var zoomLevel = getUrlVar("zoomlevel"); // Get zoom level from URL, if any.

  if (zoomLevel)
    zoomLevel = Math.min((initCelOverview.nbZoomLevels - 1), Math.max(0, parseInt(zoomLevel)));
  else{
    // Not given in URL, compute it.
    zoomLevel = 0;
    /* not for WG
    // We zoom at the level that would almost fill the current window,
    // without having relevant tiles outside the view port.
    var wh = get_browser_window_size();
    var window_width  = wh[0];
    var window_height = wh[1];
    // Find a higher zoomTo level if it fits in the current browser window.
    for (var i=0; i < map.resolutions.length; i++) {
        // Subtract about 20 pixels since the resulting regulatory overview rarely spans the
        // entire extent width or height.
        if(window_width  < (initCelOverview.extent_width  / map.resolutions[i]) - 20) break;
        if(window_height < (initCelOverview.extent_height / map.resolutions[i]) - 20) break;
        zoomLevel = i;
    }
    */
  }
  return zoomLevel;
}

function virtualNode(nodeArray,maxy) {
  // if there's omics data in pathway
  //var gridDimension = Math.round(Math.sqrt(PWOmicsNodes.length));  // grid dimensions, width & height
  // find center point of the nodes
  var x1 = 100000; var y1 = 100000;
  var x = 0; var y = 0;
  var x2 = 0; var y2 = 0;
  for (i = 0; i < nodeArray.length; i++) {
    x1 = Math.min(x1, nodeArray[i].x1);
    y1 = Math.min(y1, nodeArray[i].y1);
    x += nodeArray[i].x;
    y += nodeArray[i].y; 
    x2 = Math.max(x2, nodeArray[i].x2);
    y2 = Math.max(y2, nodeArray[i].y2)}
  x = Math.floor(x / nodeArray.length);
  y = Math.floor(y / nodeArray.length);
  y1   = maxy - y1;
  y2   = maxy - y2;
  // return a virtualNode structure
  var r = {pathwayNodes: nodeArray,
           x1: x1, y1: y1,
           x: x, y: y, x2:
           x2, y2: y2};
  return r;}

// loop through all the colors used to display the omics data for a gene
// collect the minimal spanning set of those colors.
function nodeGeneUniqueColors(omicsDataArray) {
       var colorArray = new Array();
        for (var i = 0; i < omicsDataArray.length; i++) {
          var curColor = omicsDataArray[i][1];
          var oldColorP = function () {
            for (var j = 0; j < colorArray.length; j++) {
              if (curColor == colorArray[j])
                return true; } }
          var oldColor = oldColorP();
          if (!oldColor)
            colorArray[colorArray.length] = curColor; }
        return colorArray; }

/* billington: Aug-20-2013
OVERVIEW - change window size depending on which tab is selected
ARGS - popup: the actual popup window which is to be resized
       tab: the tab being selected or un-selected
       chartWidth: width in pixels to resize the popup to
       args: passed as part of the event this is handling
             - args.newValue tells us if this tab is being selected.
RETURNS - nothing
SIDE-EFFECT - may resize popup
*/
function resizeOnTabSelect (popup, tab, chartWidth, args) {
  var divStr = tab._configs.content.value;
  if ((divStr.search('heatMap') > -1) && args.newValue) // only change when selected
      // heat tab selected
      popup.dialog.cfg.setProperty("width", Math.max(chartWidth, 110)+"px");
    // other than heat tab selected
    else if (args.newValue)                             // only change when selected
        popup.dialog.cfg.setProperty("width", chartWidth+"px")
}

/*
function setUpGeneAxis(geneAxis, mostPosNegValues) {
  geneAxis.maximum = Math.ceil(2 * mostPosNegValues[0])/2;
  geneAxis.minimum = Math.floor(2 * mostPosNegValues[1])/2;
  geneAxis.majorUnit = 0.5;
  geneAxis.roundMajorUnit = true;
  geneAxis.snapToUnits = true;
}
*/

/* billingt:Sep-30-2013 
   as reported in http://developer.yahoo.com/yui/container/#knownissues, section on
   'Flash Movies appear on top of Overlay instances'
*/
function repairFlashProblem(divId) {
  var tempElement = document.getElementById(divId);
  if (tempElement.firstChild == null) {
    tempElement.innerHTML = '<div><a href="/flash-faq.shtml" target="_blank">Adobe Flash<br><i>must</i> be enabled<br><br>Click here for help</a></div>';
  }
  else {
    var tempHTML = tempElement.firstChild.innerHTML;
    tempElement.firstChild.innerHTML = tempHTML+'<param name=wmode value="opaque">';
  } }

function getStrLen (str) {
  document.getElementById('textSizeTestArea').innerHTML = str;
  document.getElementById('textSizeTestArea').style.fontSize = animateOmics.popupFontSize+"px";
  return document.getElementById('textSizeTestArea').getWidth();
}

function getStrHeight (str) {
  document.getElementById('textSizeTestArea').innerHTML = str;
  document.getElementById('textSizeTestArea').style.fontSize = animateOmics.popupFontSize+"px";
  return document.getElementById('textSizeTestArea').getHeight();
}

function setHeatLabelSize () {
  var targetrule;
  for (var j = 0; j < document.styleSheets.length; j++) {
    var mysheet=document.styleSheets[j];
    var myrules=mysheet.cssRules? mysheet.cssRules: mysheet.rules;
    for (var i=0; i<myrules.length; i++){
      if(myrules[i].selectorText == ".yui-skin-sam th .yui-dt-label"){
        targetrule=myrules[i]
        break; } }}
  targetrule.style.fontSize = animateOmics.popupFontSize+"px";
 }

/* OmicsTooltipHandler
   called from within webgraphics.js
   tip: an array with all the values provided for creating a tooltip - 
        (created on server by cwest::generate-cel-overview-nodes-file)
        indexed as follows:
        [0]  : frameId
        [1]  : array of pathway ids
	[2]  : class/type,
	[3]  : name-string,
	[4]  : common-name-string
	[5]  : array of synonym strings
	[6]  : array of 4 documation strings:
               documentation string 1 - print name
	       documentation string 2 - enzyme
	       documentation string 3 - pathway
	       documentation string 4 - reversibility
	[7]  : objectId (an object-id or a list of object-ids) - object-ids are for unique instance of frameid
	[9]  : node-id (assigned to this object for this rendering)
   popup: a YUI2 simple dialog (YAHOO.widget.SimpleDialog) object
*/

var googleChartsLoaded = false;

function OmicsTooltipHandler(tip, popup) {
  var dataTuplesByStep = frameIdToOmicsDataTuples(tip[0]);
  var popupDivId = "CelPopupChart"+tip[7].toString().replace(/,/g, "_");
  var displayOmicsView = function() {
    googleChartsLoaded = true;
    if (animateOmics.layers && (animateOmics.layers.length > 1))
          displayMultiStepOmicsCharts(dataTuplesByStep, popupDivId, popup);
    else displaySingleStepOmicsChart(dataTuplesByStep, popupDivId, popup);
  };
  if (googleChartsLoaded)
    displayOmicsView();
  else {
    google.charts.load('current', {'packages':['corechart', 'bar']});
    google.charts.setOnLoadCallback(displayOmicsView); }
}

// ---------------- Display for Bar, Plot, and Heat map ----------------------------------------
// DISPLAY BAR CHART
/* billingt:Aug-12-2013 
   dataTuplesByStep -   data is an array of arrays (of steps) of arrays (data/gene); 
                        inner array (data/gene) is frameid, value, genename
                        return value is the absolute maximum value in all the data/gene arrays
                        an array for each step, [ [step1] ... ]
                        each step the data array for one or more genes [ [step1 [gene1 ...]] ...]
                        gene: [ 0 <frameid>, 1 <value>, 2 <gene common name> ]
   popupDivId - 
   popup -              a structure
   popupDialog -        >>unused, unnecessary<<

   popup must be rendered before calling this function
   COMPLETELY SIDE EFFECT - no return value */
/* billingt:Jul-31-2015 fixes for displaying multi-genes, and for truncating gene name string for plantcyc */
function displaySingleStepOmicsChart (dataTuplesByStep, popupDivId, popupDialog) {
  var cli = null;
  var omicsBaseWidth = 49 + (2 * animateOmics.popupFontSize);
  var headerStrings = popupDialog.header.childNodes[0].innerHTML.split("-");
  var maxHeaderStrLen = 0;
  for (var i = 0; i < headerStrings.length; i++) {
    var strLen = getStrLen(headerStrings[i]);
    maxHeaderStrLen = (strLen > maxHeaderStrLen) ? strLen : maxHeaderStrLen; }
  var omicsHeaderMinWidth = maxHeaderStrLen + getStrLen("-") + 20;
  var omicsPerColWidth = 25;
  var omicsHeatTableMinWidth = Math.max(85,omicsHeaderMinWidth);
  var omicsColumnCnt = dataTuplesByStep[0].length // how many genes; column here is bar in chart
  var omicsChartWidth = Math.max((omicsBaseWidth + (omicsPerColWidth * omicsColumnCnt)), omicsHeaderMinWidth);
  var heatBoxDimension = animateOmics.popupFontSize * 1.7;//+ 8;
  // ------------------ get the data for each chart (one chart per gene involved) ------------------
  var geneCommonNames = new Array();
  var maxGeneCommonNameSize = 0;
  for (var gene = 0; gene < omicsColumnCnt; gene++) {
    var geneName =   truncateString(dataTuplesByStep[0][gene][2],GeneNameMax);
    var geneNameSize = getStrLen(geneName);
    geneCommonNames[gene] = geneName;            // for an arbitrary step (0), each gene's (i), prettyname (3rd element)
    maxGeneCommonNameSize = (geneNameSize > maxGeneCommonNameSize) ? geneNameSize : maxGeneCommonNameSize; }
  var heatGeneLabelSize = maxGeneCommonNameSize;// + 6;
  var hasColumnLabel = (dataTuplesByStep[0][0][2] != "");
  var columnLabelSize = 20 + ((hasColumnLabel) ? 
			      ((omicsColumnCnt == 1) ? animateOmics.popupFontSize : maxGeneCommonNameSize) // getStrLen(dataTuplesByStep[0][0][2]))
			      : 0);
  var omicsChartHeight = (animateOmics.popupStyle == 'heat')
      ? (heatBoxDimension + 2 + maxGeneCommonNameSize + 8) //maxStepLabelLength + 8)
      : (((0.01 * animateOmics.popupVerticalScale * 85) + columnLabelSize) + 5 + animateOmics.popupFontSize);
  var omicsCompleteHeight = ((animateOmics.popupStyle == 'heat')
                             ? (10 + omicsChartHeight)
                             : omicsChartHeight);
  var omicsCLIwidth = null;
  var omicsHeatWidth = Math.max(omicsHeatTableMinWidth, (5 + ((heatBoxDimension + 5) * omicsColumnCnt)));
  // ------------------ set up the HTML "divId"s per chart type ------------------------------------
  var subDivIds = new Array();                                     // generate the div names
  var chartTypes = ['bar', 'plot', 'heat'];
  var chartTypeNames = ["Bar", "XY", "Heat"];
  var subDivId = popupDivId+"subDiv";
  // ------------------ Create the tabs for each chart type ----------------------------------------
  popupDialog.setBody('<div id="'+popupDivId+'" style="position:relative"></div>');
  popupDialog.cfg.setProperty("width", ((animateOmics.popupStyle == 'heat')
                                         ? omicsHeatWidth
                                         : omicsChartWidth)+"px");
  // ------------------ Gather the data for chart ... (all genes on one chart) ------------------------
  // for google charts, need [['Gene Name','Value',{ role : 'style' }],
  //                          [gene-name, value, color], ... ]
  // CELOV:: rxn-name ???; value, the bar height; color, bar color; gene-name, label at bottom of column.
  // PATHWAYS:: rxn-name ???; value, bar height; color, bar color; gene-name, label at bottom of column ("", for pathways)
  var omicsDataArray =  new Array(); // an array of 3-tuples/arrays per gene [rxn-name, value, gene-name]
  var omicsDataArrayGoogle =  new Array();
  var step = 0;
  for (geneIdx = 0; geneIdx < omicsColumnCnt; geneIdx++)
    omicsDataArray[geneIdx] = dataTuplesByStep[step][geneIdx];
  var omicsMultiPopupDS;
  var seriesDef;
  // find largest and smallest values for all graphs in this popup
  var maxOmicsMostPosNeg = getOmicsDataMostPosNegValues(omicsDataArray);
  var omicsMinMax = getOmicsDataMinMax(omicsDataArray);
  // ---------------- Display for Bar, Plot, and Heat map ----------------------------------------
  // DISPLAY BAR CHART
  if (animateOmics.popupStyle !== 'heat') {
    // ------------------ set up the HTML "divId"s for each chart, but not heat map----
    var subDivId = popupDivId+"sub";
    var newElement = document.createElement("div");
    newElement.id=subDivId;
    newElement.style.position="absolute";
    newElement.style.left= 0+"px";
    newElement.style.top= 0+"px";
    newElement.style.width=omicsChartWidth+"px";
    newElement.style.height=omicsChartHeight+"px";
    var subDiv = newElement;
    var popupDivElement = document.getElementById(popupDivId);
    popupDivElement.appendChild(subDiv);
    // use the maxOmicsMostPosNeg values to determine (see below)
    //    (a) should we use a log scale or not,
    //    (b) the view window of the graph(s), and
    //    (c) the tick mark values
    var vAxisLogarithmic = (11 < Math.abs(maxOmicsMostPosNeg[0] - maxOmicsMostPosNeg[1])) // (a) - log scale or not
    var vAxisMaxLog10 = (maxOmicsMostPosNeg[0] == 0)
	? null
	: ((Math.log10(Math.abs(maxOmicsMostPosNeg[0])).ceil()) * ((maxOmicsMostPosNeg[0] < 0)
								   ? -1
								   : 1 ));
    var vAxisMinLog10 = (maxOmicsMostPosNeg[1] < 0)
	? (-1 * (Math.log10(Math.abs(maxOmicsMostPosNeg[1])).floor()))
	: null;
    var vAxisMax = (vAxisLogarithmic) // (b) - view window vertical max - needs to be a little bit bigger or it clips
	? ((maxOmicsMostPosNeg[0] == 0)
	   ? 0
	   : (((10 ** vAxisMaxLog10))
	      + ((maxOmicsMostPosNeg[0] < 0)
		 ? -1
		 : 1 )))
	: ((maxOmicsMostPosNeg[0] > 0 )
	   ? (maxOmicsMostPosNeg[0] * 1.1)
	   : 0);
    var vAxisMin = (maxOmicsMostPosNeg[1] < 0) // (b) - view window vertical min - needs to be a little bit smaller or it clips
	? (((vAxisLogarithmic)
	    ? ((10 ** vAxisMinLog10) - 1)
	    : (1.1 * maxOmicsMostPosNeg[1])))
	: 0;
    if (vAxisLogarithmic) { // (c) - if logarithmic, calculate tick marks (powers of 10 and 0), if not use automatic
      var tickArray = new Array();
      var tickCount = 0;
      if (vAxisMinLog10 = null) {
	tickArray[tickCount++] = 0 }
      else {
	for (var cnt = 0; cnt >= vAxisMinLog10; cnt--)
	  tickArray[tickCount++] = (10 ** cnt);
	tickArray[tickCount++] = 0 };
      if (vAxisMaxLog10 >= 0)
	for (var cnt = 0; cnt <= vAxisMaxLog10; cnt++)
	  tickArray[tickCount++] = (10 ** cnt); };
    var absVMin = Math.abs(omicsMinMax[0]);
    var absVMax = Math.abs(omicsMinMax[1]);
    var useScientificNotation = (absVMin < 0.001 || absVMax < 0.001);
    var vAxisLabelMaxWidth = 0;
    if (vAxisLogarithmic && useScientificNotation) {
      for (var i = 0; i > tickArray.length; i++) {
	let len = getstrLen(tickArray[i].toExponential);
	vAxisLabelMaxWidth = (vAxisLabelMaxWidth < len) ? len : vAxisLabelMaxWidth }}
    else vAxisLabelMaxWidth = (useScientificNotation)
      ? getStrLen("-5E-5")
      : Math.max((getStrLen(vAxisMax.toLocaleString())),
		 (getStrLen(vAxisMin.toLocaleString())));
    var options = {
	hAxis: { textPosition: (hasColumnLabel) ? "out" : "none",
		 slantedText : (hasColumnLabel && (omicsColumnCnt > 2)) ? true : false,
		 slantedTextAngle : 70 },
	legend: { position: "none" },
	chartArea: {
	  left: vAxisLabelMaxWidth + 5,
	  top: animateOmics.popupFontSize,
	  height: omicsChartHeight - columnLabelSize - (animateOmics.popupFontSize / 2),
	  backgroundColor: { stroke: 'black', strokeWidth: 1}  },
	fontSize: animateOmics.popupFontSize,
	height: omicsChartHeight,
	pointsVisible: true,
        bar: { groupWidth: (omicsColumnCnt > 2) ? '60%' : 25 },
	vAxis: {
	  scaleType: (vAxisLogarithmic) ? 'mirrorLog' : null,
	  viewWindow: { min: vAxisMin, max: vAxisMax },
	  format : (useScientificNotation) ? 'scientific' : 'decimal',
	  ticks: (vAxisLogarithmic) ? tickArray : null }
    };
    omicsDataArrayGoogle[0] = (useScientificNotation)
      ? [ 'Gene Name','Value',{ role : 'style' },{type : 'string', role : 'tooltip'} ]
      : [ 'Gene Name','Value',{ role : 'style' } ];
  for (geneIdx = 0; geneIdx < omicsColumnCnt; geneIdx++) {
    var tempArray = dataTuplesByStep[step][geneIdx];
    omicsDataArrayGoogle[(1 + geneIdx)] = (useScientificNotation)
      ? [ tempArray[2],tempArray[1], 'color: '+WG.OmicsValueToColor(tempArray[1]), Number.parseFloat(tempArray[1].toPrecision(3)).toExponential() ]
      : [ tempArray[2],tempArray[1], 'color: '+WG.OmicsValueToColor(tempArray[1]) ];
  }
  var GoogleData = google.visualization.arrayToDataTable(omicsDataArrayGoogle);
  GoogleData.setTableProperty('allowHtml', true);
    var fudge = 17;

    if (animateOmics.popupStyle == 'bar') {
      // DISPLAY BAR CHART
      var chart = new google.visualization.ColumnChart(newElement);
      chart.draw(GoogleData,options);
      cli = chart.getChartLayoutInterface();
      omicsCLIwidth=cli.getBoundingBox('chartarea').width+"px";
      newElement.style.width=(Math.max((fudge + (cli.getBoundingBox('chartarea').width)), omicsHeaderMinWidth)) + "px";
      popupDialog.cfg.setProperty("width", newElement.style.width);
      chart.clearChart();
      chart = new google.visualization.ColumnChart(newElement);
      chart.draw(GoogleData,options);
    }
    else if (animateOmics.popupStyle == 'plot') {
      // DISPLAY PLOT CHART
      var chart = new google.visualization.LineChart(newElement);
      chart.draw(GoogleData,options); }}
  else {
    // DISPLAY HEAT CHART
    var heatOmicsDataArray = getHeatOmicsDataMultiGenes(omicsDataArray);
    omicsMultiPopupDS = new YAHOO.util.DataSource(heatOmicsDataArray);
    var heatDataFormatting = function(elLiner, oRecord, oColumn, oData) { 
      // oData is color
      elLiner.innerHTML = '<div class="box-round" style="background-color:'+oData+
        ';width:'+heatBoxDimension+'px;height:'+heatBoxDimension+
        'px;border:1px solid;margin-left:auto;margin-right:auto" >'; }
    // Add the custom formatter to the shortcuts 
    YAHOO.widget.DataTable.Formatter.heatData = heatDataFormatting; 
    var columnDefs = new Array();
    for (var i = 0; i < omicsDataArray.length; i++)
      columnDefs[i] = {key: omicsDataArray[i][2], formatter: "heatData" };
    var dataTable = new YAHOO.widget.DataTable(popupDivId, columnDefs, omicsMultiPopupDS,
                                               {style: {font: {size: animateOmics.popupFontSize} } } ); }
  var x = document.getElementById(popupDivId)
  x.parentElement.style.height = ((animateOmics.popupStyle == 'heat') ? x.childNodes[1].getHeight() : omicsCompleteHeight)+"px";
  x.parentElement.style.paddingTop = "0px";
  x.parentElement.style.paddingLeft = "0px";
  x.parentElement.style.paddingRight = "0px";
  x.parentElement.style.paddingBottom = "0px";
}


function columnNamesFromFileP () {
  if (animateOmics.layers)
    for (var i = 0; i < animateOmics.layers.length; i++)
      if (animateOmics.layers[i].name.length > 0) return true;
  else return false;
}

function getMaxHeaderStrLen () {
  var temp = 0;
  for (var i = 0; i < animateOmics.layers.length; i++)
    if (getStrLen(animateOmics.layers[i].name) > temp)
      temp = getStrLen(animateOmics.layers[i].name);
  return temp;
}

/* billingt:Aug-12-2013 
   dataTuplesByStep -   data is an array of arrays (of steps) of arrays (data/gene); 
                        inner array (data/gene) is frameid, color, value, genename
                        return value is the absolute maximum value in all the data/gene arrays
                        an array for each step, [ [step1] ... ]
                        each step the data array for one or more genes [ [step1 [gene1 ...]] ...]
                        gene: [ 0 <frameid>, 1 <color>, 2 <value>, 3 <gene common name> ]
   popupDivId - 
   popup -
   popupDialog -

   popup must be rendered before calling this function
   COMPLETELY SIDE EFFECT - no return value */
function displayMultiStepOmicsCharts(dataTuplesByStep, popupDivId, popupDialog) {
  var chartCount = dataTuplesByStep[0].length; // tells you the number of bar & plot charts, number of rows in heat map
  var omicsColumnCnt = dataTuplesByStep.length; // column here is bar in chart, point in plot, column in heat ... and a step
  var chartRowLength = Math.ceil(Math.sqrt(chartCount)); // if more than one chart, try to make display a square of charts
  var chartRowCount = ((chartCount / chartRowLength) > (chartRowLength - 1)) ? chartRowLength : (chartRowLength - 1);
  var columnLabelSize = 20 + (((animateOmics.popupLabelStyle == 'columns')
                               && columnNamesFromFileP()) ? getMaxHeaderStrLen() : animateOmics.popupFontSize); // 0;
  var headerStrings = popupDialog.header.childNodes[0].childNodes[0].innerHTML.split("-");
  var maxHeaderStrLen = 0;
  for (var i = 0; i < headerStrings.length; i++) {
    var strLen = getStrLen(headerStrings[i]);
    maxHeaderStrLen = (strLen > maxHeaderStrLen) ? strLen : maxHeaderStrLen; }
  var omicsHeaderMinWidth = maxHeaderStrLen + getStrLen("-") + 37;
  // Try to maintian actual graph heights when font sizes change
  var heatBoxPad = 3;
  var heatBoxDimension = (Math.ceil(animateOmics.popupFontSize * 1.7) + heatBoxPad);
  var geneCommonNames = new Array();
  var actualMaxGeneCommonNameSize = 0;
  //  var headerHeight = 25;
  for (var gene = 0; gene < dataTuplesByStep[0].length; gene++) {
    var geneName = dataTuplesByStep[0][gene][2];
    var geneNameSize = getStrLen(geneName);
    geneCommonNames[gene] = geneName;            // for an arbitrary step (0), each gene's (i), prettyname (3rd element)
    actualMaxGeneCommonNameSize = (geneNameSize > actualMaxGeneCommonNameSize) ? geneNameSize : actualMaxGeneCommonNameSize; 
    // maxGeneCommonNameSize = (geneNameSize > maxGeneCommonNameSize) ? geneNameSize : maxGeneCommonNameSize; 
  }
  var heatGeneLabelSize = actualMaxGeneCommonNameSize;// + 6;
  var stepLabels = new Array();
  var maxStepLabelLength = 0;
  var maxStepCharCnt = 0;
  var stepStyle = ((animateOmics.popupLabelStyle && (animateOmics.popupLabelStyle))
                   ? animateOmics.popupLabelStyle
                   : 'sequential');
  for (var step = 0; step < omicsColumnCnt; step++) {
    var label = (stepStyle == 'sequential') ? animateOmics.layers[step].colnum : animateOmics.layers[step].name;
    stepLabels[step] = label.toString();
    maxStepLabelLength = Math.max(maxStepLabelLength, getStrLen(label));
    maxStepCharCnt = Math.max(stepLabels[step].length, maxStepCharCnt);
  }
  var labelRotationAngle = (maxStepCharCnt > 2) ? -90 : 0;
  var omicsChartHeight = (animateOmics.popupStyle == 'heat')
      ? ((heatBoxDimension * chartCount) + (chartCount * 2) + maxStepLabelLength + 8)
      : (((0.01 * animateOmics.popupVerticalScale * 85) + columnLabelSize) + 5 + animateOmics.popupFontSize);
  // Try to maintian Bar/Plot actual graph widths when font sizes change
  var omicsBaseWidth = (49 + ((actualMaxGeneCommonNameSize == 0)
                              ? 0 
                              : (2 * animateOmics.popupFontSize)));
  var omicsPerColWidth = 25;
  var omicsHeatTableMinWidth = 85;
  var omicsChartWidth = omicsBaseWidth + (omicsPerColWidth * omicsColumnCnt);
  var omicsCompleteWidth = Math.max (((omicsChartWidth * chartRowLength) + (5 * chartRowLength)), //(chartRowLength - 1))),
				     omicsHeaderMinWidth);
  var omicsCompleteHeight = ((animateOmics.popupStyle == 'heat')
                             ? (10 + omicsChartHeight)
                             : ((omicsChartHeight * chartRowCount) + (5 * (chartRowCount - 1))));
  // ------------------ get the data for each chart (one chart per gene involved) ------------------ 
  var chartPad = 5; 
  var omicsHeatWidth = (Math.max(omicsHeatTableMinWidth, (((heatBoxDimension + 5) * omicsColumnCnt) + chartPad + heatGeneLabelSize)));
  popupDialog.setBody('<div id="'+popupDivId+'" style="position:relative"></div>');
//  popupDialog.cfg.setProperty("height", omicsCompleteHeight+"px");
  popupDialog.cfg.setProperty("width", ((animateOmics.popupStyle == 'heat')
                                         ? omicsHeatWidth
                                         : omicsCompleteWidth)+"px");
  // ------------------ Gather the data for each chart ... (one chart/gene) ------------------------
  // find maximum across ALL values in all charts
  if (animateOmics.popupStyle !== 'heat') {
    // ------------------ set up the HTML "divId"s for each chart, but not heat map----
    var subDivIds = new Array();                                   // generate the div names
    for (var chartNum = 0; chartNum < chartCount; chartNum++) 
      subDivIds[chartNum] = popupDivId+"sub"+chartNum;
    var subDivs = new Array();                                     // and create the divs, including their relative location
    var curDivIdx = -1;
    for (var curRow = 0; curRow < chartRowCount; curRow++) {
      var y = (omicsChartHeight * curRow) + (5 * curRow);
      for (var curCol = 0; curCol < chartRowLength; curCol++) {
        var x = (omicsChartWidth * curCol) + (5 * curCol);
        curDivIdx += 1;
        var newElement = document.createElement("div");
        newElement.id=subDivIds[curDivIdx];
        newElement.style.position="absolute";
        newElement.style.left=x+"px";
        newElement.style.top=y+"px";
        newElement.style.width=omicsChartWidth+"px";
        newElement.style.height=omicsChartHeight+"px";
        subDivs[curDivIdx] = newElement; }}
    var popupDivElement = document.getElementById(popupDivId);
    if (chartCount == 1) {
      popupDivElement.parentElement.setStyle("background-color:#ffffff") };
    for (idx = 0; idx < subDivs.length; idx++)
      popupDivElement.appendChild(subDivs[idx]);
    // find largest and smallest values for all graphs in this popup
    var maxMostPosNegValues = getOmicsDataMostPosNegValuesMulti(dataTuplesByStep);
    var omicsMinMax = getOmicsDataMinMaxMulti(dataTuplesByStep);
    // use these values to determine (see below)
    //    (a) should we use a log scale or not,
    //    (b) the view window of the graph(s), and
    //    (c) the tick mark values
    var vAxisLogarithmic = (11 < Math.abs(maxMostPosNegValues[0] - maxMostPosNegValues[1])) // (a) - log scale or not
    var vAxisMaxLog10 = (maxMostPosNegValues[0] == 0)
	? null
	: ((Math.log10(Math.abs(maxMostPosNegValues[0])).ceil()) * ((maxMostPosNegValues[0] < 0)
								   ? -1
								   : 1 ));
    var vAxisMinLog10 = (maxMostPosNegValues[1] < 0)
	? (-1 * (Math.log10(Math.abs(maxMostPosNegValues[1])).floor()))
	: null;
    var vAxisMax = (vAxisLogarithmic) // (b) - view window vertical max - needs to be a little bit bigger or it clips
	? ((maxMostPosNegValues[0] == 0)
	   ? 0
	   : (((10 ** vAxisMaxLog10))
	      + ((maxMostPosNegValues[0] < 0)
		 ? -1
		 : 1 )))
	: ((maxMostPosNegValues[0] > 0 )
	   ? (maxMostPosNegValues[0] * 1.1)
	   : 0);
    var vAxisMin = (maxMostPosNegValues[1] < 0) // (b) - view window vertical min - needs to be a little bit smaller or it clips
	? (((vAxisLogarithmic)
	    ? ((10 ** vAxisMinLog10) - 1)
	    : (1.1 * maxMostPosNegValues[1])))
	: 0;
    if (vAxisLogarithmic) { // (c) - if logarithmic, calculate tick marks (powers of 10 and 0), if not use automatic
      var tickArray = new Array();
      var tickCount = 0;
      if (vAxisMinLog10 = null) {
	tickArray[tickCount++] = 0 }
      else {
	for (var cnt = 0; cnt >= vAxisMinLog10; cnt--)
	  tickArray[tickCount++] = (10 ** cnt);
	tickArray[tickCount++] = 0 };
      if (vAxisMaxLog10 >= 0)
	for (var cnt = 0; cnt <= vAxisMaxLog10; cnt++)
	  tickArray[tickCount++] = (10 ** cnt); };
    var absVMin = Math.abs(omicsMinMax[0]);
    var absVMax = Math.abs(omicsMinMax[1]);
    var useScientificNotation = (absVMin < 0.001 || absVMax < 0.001);
    var vAxisLabelMaxWidth = 0;
    if (vAxisLogarithmic && useScientificNotation) {
      for (var i = 0; i > tickArray.length; i++) {
	let len = getstrLen(tickArray[i].toExponential);
	vAxisLabelMaxWidth = (vAxisLabelMaxWidth < len) ? len : vAxisLabelMaxWidth }}
    else vAxisLabelMaxWidth = (useScientificNotation)
      ? getStrLen("-5E-5")
      : Math.max((getStrLen(vAxisMax.toLocaleString())),
		 (getStrLen(vAxisMin.toLocaleString())));
    for (var geneCnt = 0; geneCnt < geneCommonNames.length; geneCnt++) {
      var geneCommonName = geneCommonNames[geneCnt];
      var omicsDataArray =  new Array(); // an array of arrays (per step) of
      // 3-tuples/arrays for current gene [rxn-name, value, gene-name]
      for (var step = 0; step < omicsColumnCnt; step++) // loop for step, get per gene omics data
        for (geneIdx = 0; geneIdx < chartCount; geneIdx++)
          if (dataTuplesByStep[step][geneIdx][2] == geneCommonName)
            omicsDataArray[step] = dataTuplesByStep[step][geneIdx];
      var omicsDataArrayGoogle =  new Array();
      omicsDataArrayGoogle[0] = (useScientificNotation)
	? [ 'Gene Name','Value',{ role : 'style' },{type : 'string', role : 'tooltip'} ]
        : [ 'Gene Name','Value',{ role : 'style' } ];
      for (var step = 0; step < omicsColumnCnt; step++)
	for (geneIdx = 0; geneIdx < omicsColumnCnt; geneIdx++) {
	  var tempArray = omicsDataArray[step];
	  omicsDataArrayGoogle[step + 1] = (useScientificNotation)
	    ? [ stepLabels[step],tempArray[1], 'color: '+WG.OmicsValueToColor(tempArray[1]), Number.parseFloat(tempArray[1].toPrecision(3)).toExponential() ]
	    : [ stepLabels[step],tempArray[1], 'color: '+WG.OmicsValueToColor(tempArray[1]) ];
	}
      var GoogleData = google.visualization.arrayToDataTable(omicsDataArrayGoogle);
      GoogleData.setTableProperty('allowHtml', true);
      var omicsMultiPopupDS;
      var seriesDef;
      var options = {
	legend: { position: "none" },
	chartArea: {
	  left: vAxisLabelMaxWidth + 5 + getStrHeight(geneCommonName),
	  top: animateOmics.popupFontSize,
	  height: omicsChartHeight - columnLabelSize - (animateOmics.popupFontSize / 2),
	  backgroundColor: { stroke: 'black', strokeWidth: 1} },
	height: omicsChartHeight,
	fontSize: animateOmics.popupFontSize,
	pointsVisible: true,
	bar: { groupWidth: '60%' },
	hAxis: { slantedText : ((maxStepCharCnt > 1) && (stepStyle == 'columns')),
		 slantedTextAngle : 70 },
	vAxis: {
	  title: geneCommonName,
	  scaleType: (vAxisLogarithmic) ? 'mirrorLog' : null,
	  viewWindow: { min: vAxisMin, max: vAxisMax },
	  format : (useScientificNotation) ? 'scientific' : 'decimal',
	  ticks: (vAxisLogarithmic) ? tickArray : null }
      };
      // ---------------- Display for Bar, Plot, and Heat map ----------------------------------------
      if (animateOmics.popupStyle == 'bar') {
        // DISPLAY BAR CHART per gene
	var chart = new google.visualization.ColumnChart(subDivs[geneCnt]);
	chart.draw(GoogleData,options);}
      else {
        // DISPLAY PLOT per gene
      var chart = new google.visualization.LineChart(subDivs[geneCnt]);
      chart.draw(GoogleData,options);}}}
  else {
    // DISPLAY HEAT per step (columns) per gene (rows)
    var heatOmicsDataArray = getHeatOmicsDataMultiSteps(dataTuplesByStep);
    omicsMultiPopupDS = new YAHOO.util.DataSource(heatOmicsDataArray);
    var heatGeneLabelFormatting = function(elLiner, oRecord, oColumn, oData) {
      // oData is name
      elLiner.innerHTML = '<div style="font-size: '+animateOmics.popupFontSize+
        'px; width: '+heatGeneLabelSize+
        'px; text-align: center">'+oData+'</div>'; }
    var heatDataFormatting = function(elLiner, oRecord, oColumn, oData) { 
      // oData is color
      elLiner.innerHTML = '<div class="box-round" style="background-color:'+oData+
        ';width:'+heatBoxDimension+'px;height:'+heatBoxDimension+
        'px;border:1px solid;margin-left:auto;margin-right:auto" >'; }
    // Add the custom formatter to the shortcuts 
    YAHOO.widget.DataTable.Formatter.heatData = heatDataFormatting;
    var columnDefs = new Array();
    if (actualMaxGeneCommonNameSize > 0) {
      YAHOO.widget.DataTable.Formatter.heatGene = heatGeneLabelFormatting;
      columnDefs[0] = {key: "gene", label: "", formatter: "heatGene"}; }
    var incrZeroOrOne = (actualMaxGeneCommonNameSize > 0) ? 1 : 0;
    for (var step = 0; step < omicsColumnCnt; step++) {
      var stepLabel = stepLabels[step];
      var tmpStr = '( {key: "step_'+step+'", label: "'+stepLabel+'", formatter: "heatData", sortable: "true" } )';
      columnDefs[(step + incrZeroOrOne)] = eval(tmpStr); }
    var dataTable = new YAHOO.widget.DataTable(popupDivId, columnDefs, omicsMultiPopupDS);
  }
  var x = document.getElementById(popupDivId)
  x.parentElement.style.height = ((animateOmics.popupStyle == 'heat') ? x.childNodes[1].getHeight() : omicsCompleteHeight)+"px"; //omicsCompleteHeight+"px";
  if (animateOmics.popupStyle == 'heat') x.parentElement.parentElement.style.width = (2 + (x.childNodes[1].getWidth()))+"px";
  x.parentElement.style.paddingTop = "0px";
  x.parentElement.style.paddingLeft = "0px";
  x.parentElement.style.paddingRight = "0px";
  x.parentElement.style.paddingBottom = "0px";
}

function popupDrawLine(map, x1, y1, lonLat) {
  var linePoints = [new OpenLayers.Geometry.Point(x1, y1),
                    new OpenLayers.Geometry.Point(lonLat.lon, lonLat.lat)];
  var line       = new OpenLayers.Geometry.LineString(linePoints);
  var lineVector = new OpenLayers.Feature.Vector(line);
  addTempGeometricFigures(map, [lineVector]);
  return (lineVector); }

function createHeaderButton(value) {
  var temp = document.createElement('input');
  temp.type = 'button';
  temp.value = value;
  temp.href = '#';
  temp.style.height = "20px";
  temp.style.paddingTop = "0px";
  temp.style.paddingRight = "0px";
  temp.style.paddingBottom = (YAHOO.env.ua.gecko > 0) ? "16px" : "0px";
  temp.style.paddingLeft = "0px";
  return(temp); }

function handleDeletePopup (map, oid, popup, popupsArray) {
  popup.keepOpen = false;
  if (popup.feature) {
    // Remove line-link.
    map.layers[0].destroyFeatures([popup.feature]);
    // Remove bounding box.
    map.layers[0].destroyFeatures([popup.boundingBox]); }
  delete popupsArray[oid];
  popupsArray.removeByValue(popup); }
//  delete showCelTooltip.popups[popup.oid];
//  showCelTooltip.popups.removeByValue(popup); }

/* moveEvent is fired:
   1) After the move of the popup completes when user drags the popup.
   2) When the popup is created.
   3) Anytime the xy coordinates of the dialog are set. */
function popupHandleMoveEvent (args, map, popup) {
  // logMsg('popupDialog.moveEvent '+type+' '+args[0]);
  // The location of the popup in pixels, relative to the whole page
  // is given by args[0].
  var x2 = args[0][0];
  // Adjust y2 value for the location relative to the map.
  // Need to compute the location of the div of the map, using a constant for now.
  var y2 = args[0][1] - 140;
  if (!x2 || !y2) return;
  // Remove straight line if any.
  if (popup.feature) map.layers[0].destroyFeatures([popup.feature]);
  var lonLat = map.getLonLatFromPixel(new OpenLayers.Pixel(x2,y2));
  var x1, y1;
  var zoomLevel = map.zoom;
  var node      = popup.zoomLevelsNodes[zoomLevel];
  var maxy = map.maxExtent.top;
  // The center location of the object on the cel overview.
  // If the zoomLevel has changed we might not have the node for it yet.
  if (node) {
    x1 = node.x;
    y1 = maxy - node.y;  }
  else {
    // Need to get a new node from server.
    node = getCelNodeXyOid(false, false, popup.oid, zoomLevel);
    if (node) {
      popup.zoomLevelsNodes[zoomLevel] = node;
      x1 = node.x;
      y1 = maxy - node.y; }
    else return }
  if (!popup.boundingBox)
    popup.boundingBox = showBoundingBox(map, node.x1, maxy - node.y1, node.x2, maxy - node.y2);
  if (popup.dragged) {
    popup.dragged = false;
    popup.dx = lonLat.lon - x1;
    popup.dy = lonLat.lat - y1;
    popup.x  = lonLat.lon; popup.y = lonLat.lat; }
  // Draw a line from the location of the object to the tooltip popup.
  // And keep the line for potential removal.
  popup.feature = popupDrawLine(map, x1, y1, lonLat); }

/* Initialize the right-click menu of the cellular overview.

   Arguments: map, a OpenLayer map.
              zoomLevels, array of zoomLevel structures.
   Returns: nothing.
*/
/* RAB NEEDS TO RECODE THIS WHOLE THING - SIGH */

function nodeTypeMenu(tip, displayFn) {
  var nodeType   = nodeTypeToURLtype(tip[2]).toUpperCase();
  var menuItems = new Array();
  switch(nodeType) {
  case "PROTEIN": case "enzyme": { // each case returns an array of menu items
    break;
  }
  case "GENE": { // ??
    break;
  }
  case "COMPOUND": { // yep
    break;
  }
  case "PATHWAY": { // ??
    break;
  }
  case "REACTION": { // could be a "transport" reaction, which is different
    if ((tip[1] != null) && (tip[1][0] == "TRANSPORTER")) { // transport menu
      break;
    }
    else {                                                              // reaction menu
      // reaction: highlight this reaction everywhere it appears
      var frameId = tip[0];      var nodes = WG.GetNodesByFrameId(frameId);
      if (nodes != null) { 
        menuItems.push (
          { text: "Highlight this reaction everywhere it appears",
            onclick: {fn: function () { celHighlight( "Reaction '"+frameId+"'",
                                                      nodes,
                                                      frameId,
                                                      'rnids')}}})};
      // reaction: show enzymes and genes of this reaction in separate window <- DONE in left-click menu
      // reaction: Highlight reactions involving genes in same operon/regulon 
      // => submenu to select regulon =AND/OR=> sub-submenu to select operon
      // pathway: Highlight this pathway
      if (tip[1] != null) {
        // PATHWAY menu items
        var pathwayNodes = WG.GetNodesByPathwayId(tip[1][0]); // searchCelNameOrFrameID(node.pframeIds[0], "pathways");
	var continuation = function (pathwayLabel) {
	  var pathwayNameString = pathwayLabel;
          menuItems.push (
            { text: "Highlight Containing Pathway: <i>"+pathwayNameString+"</i>",
              onclick: { fn: function () { celHighlight("Pathway '"+pathwayNameString+"'",
							pathwayNodes,
							tip[1][0],
							'pnids')}}} );
          // pathway: Show OMICS data in popup (if there's omics data in this pathway)
          menuItems.push (
            { text: "Display Omics Data for Every Node in Pathway: <i>"+pathwayNameString+"</i>",
              onclick: { fn: function () { //celPWOmicsData(currentNode, tip[1][0], pathwayNameString, pathwayNodes) }}} );
		WG.DisplayOmicsPopups(pathwayNodes)
	      }}} );
	  for (i = 0; i < celMinimalContextMenuItems.length; i++)
	    menuItems.push(celMinimalContextMenuItems[i]);
	  displayFn(menuItems); };
	acCelSlotValue(tip[1][0], 'Pathways', 'COMMON-NAME', continuation);
      };
      // compound: (submenu for each compound in reaction)
      // => submenu compound: Display compound (in other window)
      // => submenu compound: highlight all reactions of this compound
      // => submenu compound: highlight all reactions of compound where it is a "main"
      // enzyme: show enzyme in separate window
      // => submenu for each enzyme 
      break;
    }
  }
  case "RNA": { // hmm, tRNA?
    break;
  }};
}  

   // Called when the right click occurs. Ignore args
function CelOvContextMenu(event, tip) {
  // Remove any mouse over tooltip.
  removeNonPermanentCelToolTips();
  if(!checkOrgidCellular(orgID())) return;                   // is there a cell overview for this org?
  // billingt:Mar-7-2013
  var x          = event.x;
  var y          = event.y;
  if (window.oCelContextMenu) oCelContextMenu.hide();
  if (tip != null) {                                         // on a node, get node specific info
    oCelContextMenu.clearContent();
    var continuation = function (nodeTypeSpecificMenuItems) {
      oCelContextMenu.addItems(nodeTypeSpecificMenuItems)
      oCelContextMenu.moveTo(x-5,y-5)
      oCelContextMenu.render();                                   // after clearing and adding, re-render
      oCelContextMenu.show();
    };
    nodeTypeMenu(tip, continuation);
  }
  else {                                                      // NOT on a node, so put up generic menu
    oCelContextMenu.clearContent();
    oCelContextMenu.addItems(celBlankAreaContextMenuItems);
    oCelContextMenu.moveTo(x-5,y-5)
    oCelContextMenu.render();                                   // after clearing and adding, re-render
    oCelContextMenu.show();}
}

function initCelContextMenu() {
  // Create the context menu. NOTE oCelContextMenu is an undeclared variable.
  // Assignment to an undeclared variable creates the variable as global in scope.
  oCelContextMenu = new YAHOO.widget.ContextMenu("celNodeOperations", {zindex: 100});
   // The menu over the blank area.
  oCelContextMenu.addItems(celBlankAreaContextMenuItems);
   // Add a "move" event handler to the context menu
  //oCelContextMenu.subscribe("triggerContextMenu", OonContextMenuTrigger, oCelContextMenu, true);
  YAHOO.util.Event.on("celNodeOperations", "mouseleave", function (e) {
    oCelContextMenu.hide();
  });
   // Render the context menu
   oCelContextMenu.render(document.body);

   // For IE, warn the user that highlighting could be slow.
/*
   if (YAHOO.env.ua.ie > 0) {
     var warningIEDialog = new YAHOO.widget.Dialog("warningIEDialog",
             { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
               buttons: [ { text:"Ok", handler: function(){warningIEDialog.hide()}, isDefault:true }
                        ]
             });

     warningIEDialog.setHeader("Internet Explorer, Cellular Overview Warning");
     warningIEDialog.setBody("Please note that for Internet Explorer, some operations for this Cellular Overview, such as highlighting a large number of objects (e.g., 100), and using the Omics Viewer, might be slow. The Firefox and Chrome browsers do not have such an issue.");
     warningIEDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
     warningIEDialog.render(document.body);
   }
*/
}

/* Record the last zoom. */
function setZoomLevel(){
  setZoomLevel.i = WG.GetCurrentZoomLevel();
}
setZoomLevel.i = false;

// Might return false or an integer.
function getLastZoomLevel(){
  return setZoomLevel.i;
}

/*
   For a left click, open up a popup window. This fn is used by the
   cellular overview only.

   Note: right-clicking is handled by the Yahoo code. See fn onContextMenuTrigger.

   Arguments: e, event object.
   Returns: nothing.
*/

function mouseCelLeftClick(e){
  showCelTooltip(e);
}

/*
   Use the server to send the data (for tooltip) of the node clicked or moused over.
   Open up a small window to display data of the object (e.g., reactions) clicked or moused over.

   Arguments: e, DOM event object. Contains the (x,y) coordinates of the mouse click.
   Returns: nothing.
   billingt:Jan-22-2013 
*/
function showCelTooltip(e) {
  var map        = initCelOverview.map;
  var zoomLevel  = map.zoom;
  var x          = e.xy.x;
  var y          = e.xy.y;

  if (window.oCelContextMenu) oCelContextMenu.hide();
  var node = getCelNodeXyOid(x, y, false);

  if (node) {
    // If a popup is already open for this oid,
    // do not open it again. TBD: do not use such an associative search.
    if (!(showCelTooltip.popups[node.oid])) {
      removeNonPermanentCelToolTips();
      showCelTooltip.popups[node.oid] = node.oid;
      var maxy = map.maxExtent.top;
      var y1   = maxy - node.y1;
      var y2   = maxy - node.y2;
      var boundingBox = showBoundingBox(map, node.x1, y1, node.x2, y2);
      // There is a node for each zoom level.
      var zoomLevelsNodes = new Array(initCelOverview.nbZoomLevels);
      zoomLevelsNodes[zoomLevel] = node;

      var dx = 20; var dy = 0;
      var popup    = {frameId: node.frameId,
                      zoomLevelsNodes: zoomLevelsNodes,
                      node: node,
                      getThisCelNodeDoc: function() {
                        return getCelNodeDoc(node, true, true, true, true, true)
                      },
                      dialog:null, keepOpen:false, feature:null, contentShown:true,
                      dragged: false, // true if the popup is being dragged by user.
                      // lon and lat of the tooltip popup on the screen.
                      x: node.x2 + dx, y:  y2 + dy,
                      dx: dx, dy: dy, // The distance from the object to the popup in pixels.
                      panning: false, // true when a panning just occurred.
                      boundingBox: boundingBox,
                      oid: node.oid, tabs: null,
                      omicsRedisplay: null};
      var width = (node.type && node.type.toLowerCase() == "reactions") ? "440px" : "360px";
      var idDiv = "popupCelDialog"+(node.oid).replace(/ /g, "_");
      var popupDialog = new YAHOO.widget.SimpleDialog(idDiv,
                                               { width: width, modal: false, visible: true,
                                                 draggable: true, padding: 0, buttons: []
                                               });

      popup.dialog = popupDialog;
      var nameObject = node.name; // billingt:Jul-20-2016 for brg-rt#6913 :: see name value fix in createLayersAnimation
      var nodeType   = nodeTypeToURLtype(node.type).toUpperCase();
      var header     = document.createElement('span');
      header.innerHTML   = ((nodeType == "COMPOUND") ? nameObject : nodeType)+"&nbsp;&nbsp;";
      var textTooltip  = popup.getThisCelNodeDoc();
      // The keep open button is created for all popups.
      var setupButtons;

      var input    = createHeaderButton('Keep Open');
      var inputOmics = createHeaderButton('Omics');
      var inputSummary =  createHeaderButton('Summary');
      var inputDataTable = createHeaderButton('DataTable');
      // For reaction and compound, add buttons to control the expansion of contents.
      if (nodeType == "COMPOUND") {
        setupButtons = function () {
          var input2    = createHeaderButton('C');
          var handlerCompound = function(){
            if (popup.contentShown != 'C') {
              // Make only the header visible.
              popup.contentShown = 'C';
              popup.dialog.setBody(" ");
              // Remove the resize handle.
              popup.dialog.render(document.body);
              // Turn the button as "on".
            }
            else {
              // Turn the button as not "on".
              // Make the content as visible.
              popupDialog.setBody(textTooltip);
              popupDialog.render(document.body);
              popup.contentShown = true;
            }
          }
          input2.onclick = handlerCompound;
          header.appendChild(input2);
        }
      }
      else if (nodeType == "REACTION"){
        setupButtons = function(){
          // We need three buttons to control the content.
	  MapArray(["E","R","P"], function(value) {
            var input2    = createHeaderButton(value);
            var handler = function(){
              if (popup.contentShown != value) {
                // Make only the element visible.
                popup.contentShown = value;
                var e = value == "E";
                var r = value == "R";
                var p = value == "P";
                popup.getThisCelNodeDoc = function(){return getCelNodeDoc(node,r,e,p,false,false)};
                var textTooltip = popup.getThisCelNodeDoc();
                popup.dialog.setBody(textTooltip);
                popup.dialog.render(document.body);
              }
              else {
                // Turn the button as not "on".
                // Make the content as visible.
                popup.getThisCelNodeDoc = function(){return getCelNodeDoc(node,true,true,true,true,true) };
                var textTooltip = popup.getThisCelNodeDoc();
                popup.dialog.setBody(textTooltip);
                popup.dialog.render(document.body);
                popup.contentShown = true;
              }
            }
            
            input2.onclick = handler;
            header.appendChild(input2);
          })}}
      else {
        setupButtons = function(){}}

      //kr:Jul-21-2022 
      var handlerDataTable = function(){
	alert('yoyo');
      }
      console.log('kr setting handlerDataTable'); //kr:Jul-21-2022 not called.  dead code ???

      var handlerKeepOpen = function(){
        popup.keepOpen = true;
        // Remove the button "keep open".
        header.removeChild(input);
        setupButtons();
      }
      var popupDivId = "CelPopupChart"+(node.oid).replace(/ /g, "_");
      var dataTuplesByStep = frameIdToOmicsDataTuples(node.frameId); // for a given frameId, []
                                                                     // an array for each step, [ [step1] ... ]
                                                                     // each step the data array for one or more genes [ [step1 [gene1 ...]] ...]
                                                                     // gene: [ 0 <frameid>, 1 <color>, 2 <value>, 3 <gene common name> ]
      // actual display of omics data
      var displayOmicsView = function() { 
        if (animateOmics.layers && (animateOmics.layers.length > 1))
          displayMultiStepOmicsCharts(dataTuplesByStep, popupDivId, popup, popupDialog);
        else displaySingleStepOmicsChart(dataTuplesByStep, popupDivId, popup, popupDialog);
        popup.contentShown = "omics";
      }
      // what happens when the Omics button is selected
      var handlerOmicsView = function() {
	if (popup.keepOpen == false) {
	  header.removeChild(input);
	  popup.keepOpen = true;
	}
        // remove other buttons
	var children = header.childNodes;
        var length = children.length;
	for (var i = (length - 1); i >= 0; i--)
	  if (3 != children[i].nodeType)
	    header.removeChild(children[i]);
        // add "Summary" button, so user can go back to Summary view
	header.appendChild(inputSummary);
	google.charts.load('current', {'packages':['corechart', 'bar']});
	google.charts.setOnLoadCallback(displayOmicsView);
//        displayOmicsView();
        popup.tabs = true; // will be reset when handlerSummaryView runs from "Omics" button select
      }
      // what happens when the Summary button is selected
      var handlerSummaryView = function() {
	header.removeChild(inputSummary);
        var children = header.childNodes;
        var length = children.length;
	for (var i = (length - 1); i >= 0; i--)
	  if (3 != children[i].nodeType)
	    header.removeChild(children[i]);
        header.appendChild(inputOmics);
        popup.dialog.cfg.setProperty("width", width);
	// next two lines eliminate the height spec imposed for omics data display, so window height
        // will be determined by the "summary" content automatically. Without getting rid of BOTH height styles,
	// this will fail - billingt:Jul-20-2016 :: brg-rt#6913
	popup.dialog.body.style.height=""; // get rid of height style property of the body portion of popup and ...
        popup.dialog.body.children[0].children[0].style.height = ""; // ... the YUI3 created chart div (its child)
	setupButtons();
	popup.getThisCelNodeDoc = function() {return getCelNodeDoc(node,true,true,true,true,true) };
        var textTooltip = popup.getThisCelNodeDoc();
        popup.dialog.setBody(textTooltip);
        popup.dialog.render(document.body);
        popup.contentShown = true;
        popup.tabs = null; // will be reset when handlerOmicsView runs from "Omics" button select
      }

      popup.omicsRedisplay = displayOmicsView;
      input.onclick = handlerKeepOpen;
      inputOmics.onclick = handlerOmicsView;
      inputSummary.onclick = handlerSummaryView;
      inputDataTable.onclick = handlerDataTable;

      // Main button to keep the popup open.
      header.appendChild(input);
      // Main button to keep the popup open AND display Omics data.
      if (omicsNodeDatap(node) == true) {
        header.appendChild(inputOmics);
      }
      //kr:Jul-21-2022 Experimental...
      header.appendChild(inputDataTable);

      popupDialog.setHeader(header);
      popupDialog.setFooter('');
      popupDialog.setBody(textTooltip);
      popupDialog.render(document.body);
      attachDialogResizeMechanism(idDiv, popupDialog);
      // new YAHOO.util.Resize(idDiv, {minWidth: 100, minHeight: 100, status: false});
      var div1 = document.getElementById(idDiv);
      var div2 = getElementsByClassNameNode('bd',div1);
//      div2[0].style.padding = "0px 3px 0px 3px";
      div2[0].style.position = "relative";
      div2[0].style.left = "0px";
      div2[0].style.top = "0px";
      var lonLat = new OpenLayers.LonLat(popup.x, popup.y);
      var px  = map.getPixelFromLonLat(new OpenLayers.LonLat(popup.x, (popup.y - 140)));
      popupDialog.moveTo(px.x, px.y);
      popupDialog.moveTo(px.x, px.y); // For some unknown reason the first time does not work.
      popup.feature = popupDrawLine(map, node.x, (maxy - node.y), lonLat);
      showCelTooltip.popups.push(popup);
      // SUBSCRIBE to drag, move, hide, and destroy events.
      var deletePopup = function (){ handleDeletePopup (map, popup.oid, popup, showCelTooltip.popups); };
      popupDialog.destroyEvent.subscribe(deletePopup);
      // The hide event is triggered when the user click the X in the header of the popup.
      // following addition of "this.destroy" call gets rid of popup - and memory leak billingt:Jan-22-2013 
      popupDialog.hideEvent.subscribe(function() {deletePopup(); this.destroy();});
      // When the dialog box is dragged, remove the link.
      popupDialog.dragEvent.subscribe (function (type, args)
                                       { popup.dragged = true;
                                         if (popup.feature) map.layers[0].destroyFeatures([popup.feature]); });
      popupDialog.moveEvent.subscribe ( function(type, args){ popupHandleMoveEvent(args, map, popup); } );
          } }
  else removeNonPermanentCelToolTips();
}

showCelTooltip.popups = new Array();

/* billingt:Apr-22-2013  -- the folling is unused
function delayRemoveNonPermanentPopup(popup, milliSeconds){
  setTimeout(function(){
                if (!popup.keepOpen) {popup.dialog.destroy(); popup.dialog=null;}},
             milliSeconds);
}
*/

/*
   The variable request contains the JavaScript data received from the Web server.
   Interpret the JavaScript data and return the text value.
   The data returned should be a list of nodes.

   Returns: a string, an HTML text.

*/
function receiveCelNodes(request, map, zoomLevel, orgid){
  var nodes = null;
//  showOvNotBusy(); //billingt:Jun-21-2013  Not needed
  try {
    // The JavaScript is in responseText.
    // The eval should assign a value to var nodeData.
    eval(request.responseText);
  } catch(e) {
    showServerError('(Error 12) A Web server error occurred when retrieving Cellular Overview node data', e, request.responseText);
    return "";
  };

  return nodes;
}

/*
   Get a cellular node either from position (x, y) on the
   screen or from an object unique identifier.
*/
function getCelNodeXyOid(x, y, oid, givenZoomLevel){
  var map       = initCelOverview.map;
  var zoomLevel = zoomLevel ? givenZoomLevel : map.zoom;
  var orgid     = initCelOverview.orgid;
  var url       = null;
  var nodes;

  if (x && y) {
    var lonLat  = map.getLonLatFromPixel(new OpenLayers.Pixel(x,y));
    var lon     = lonLat.lon;
    var lat     = lonLat.lat;
    var maxy    = map.maxExtent.top;

    url = "/"+orgid+"/cel-overview-node-data?zoomlevel="+zoomLevel+"&x="+lon+"&y="+(maxy-lat)+"&tilesize=400+200";
  }
  else
    if (oid) {
      // Based on oid
      url = "/"+orgid+"/cel-overview-node-data?zoomlevel="+zoomLevel+"&oid="+oid+"&tilesize=400+200";
    }

  if (!url) return null;

  var request = OpenLayers.Request.GET({
                           method: "GET",
                                     url: url,
                                     callback: function(request){
                             nodes = receiveCelNodes(request, map, zoomLevel, orgid);
                           },
                                     headers: {"Accept": "text/*", "Content-Type": "text/*"},
                                                async: false});

  return (nodes && nodes.length > 0) ? nodes[0] : null;
}

/*
   Remove all cel ov tooltips that do not have the keepOpen
   state.
*/
function removeNonPermanentCelToolTips(){
  if (showCelTooltip.popups){
    for (var i=0; i < showCelTooltip.popups.length; i++) {
      if (showCelTooltip.popups[i].dialog == null)
        showCelTooltip.popups.splice(i,1);
      else if (!showCelTooltip.popups[i].keepOpen) {
        showCelTooltip.popups[i].dialog.destroy();
        // Remove this popup from array.
        showCelTooltip.popups.splice(i,1);
      }
    }
  }
}

function removeAllCelToolTips() {
  while (showCelTooltip.popups.length > 0) {
    var p = showCelTooltip.popups.pop();
    p.dialog.destroy(); } }

/* Remove all non-omics highlighting on the cellular overview. */
function clearAllHighlightingCel(){
  if (initCelOverview.layers.length == 0) return;
  askBeforeExec("Are you sure you want to clear (remove) all highlighting?",
                "Clear All Highlighting",
   function (){
     showOvBusy();
     WG.ClearHighlight(null);
     dialogListNodesClose(initCelOverview);
     queryHighlightedNodes = new Array();
     initCelOverview.layers = new Array();
     resetOvColor();
     document.getElementById("layerSwitcherDataLayersDiv").innerHTML = null;
     document.getElementById("layerSwitcherDataLbl").style.display = "none";
     showOvNotBusy();
 });
}

/* Ask user before executing function f. If user says Cancel, do fn g, if provided.

   Arguments: msg, string text for the body of the dialog.
              msgButton, string text for the "yes" button.
              f, a function of zero argument.
              g, a function of zero argument, or null.
   Returns: nothing. Call f when user says to clear all highlighting.
*/
function askBeforeExec(msg, buttonMsg, f, g){
  //
  var ensureDialog = new YAHOO.widget.Dialog("askBeforeExec",
    { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
      buttons: [{text: buttonMsg, handler: function(){ensureDialog.hide(); f()},
                 isDefault: true},
                {text:"Cancel", handler: function(){ensureDialog.hide(); if (typeof(g) == 'function') g()},
                 isDefault: false}]
    });
  ensureDialog.setHeader("Confirm Operation");
  ensureDialog.setBody(msg);
  ensureDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
  ensureDialog.render(document.body);
}

function deactivateAllHighlight(ov){
  for(var i=0; i < ov.layers.length; i++){
    WG.ToggleHighlight(i,'off');
    console.log("WG.ToggleHighlight("+i+",'off')")
  }
}

/* Destroy the OpenLayers layers associated with Omics data and the
   layer structures if complete is true.

   Arguments: complete, boolean.
   Returns: nothing.
*/
// RAB NEW
function destroyAllOmicsLayers(complete){
  WG.OmicsRemove();
  var ov = animateOmics.ov;
  if (!ov) return;
  if (complete) {
    animateOmics.ov = null;
    animateOmics.layers = null;
    animateOmics.nodes = null;
  }

  // Destroy all Omics layers.
  if (!ov.omics || !ov.omics.layers) return;
  for (var i=0; i < ov.omics.layers.length; i++) {
    if (complete) ov.omics.layers[i] = null;
  };
  if (complete) {
    ov.omics = null;
  }
}

function destroyAllOmicsLayersReg(complete){
  var ov = animateOmics.ov;
  if (!ov) return;
  if (complete) {
    animateOmics.ov = null;
    animateOmics.layers = null;
    animateOmics.zoomLevels = new Array(12);
  }

  // Destroy all Omics layers.
  if (!ov.omics || !ov.omics.layers) return;
  for (var i=0; i < ov.omics.layers.length; i++) {
    var oneLayer = ov.omics.layers[i];
    if(oneLayer.layer != null) {
      oneLayer.layer.destroy();
    }
    if (complete) ov.omics.layers[i] = null;
  }
  if (complete) {
    ov.omics = null;
  }
}
/* Create a highlighting layer.
   A highlighting layer contains highlight objects at some zoom level.

   If the argument tuples is non-null, it is the creation of an omics layer.

   Arguments: name, a string, the name of the layer to display in switch panel.
              queryString, the string used to do the query.
              color, a JavaScript color.
              styleMap, an OpenLayers style map.
              orgid, a string.
              nodes, array of node structures. This is null if tuple is not null.
              visible, a boolean, true => make the layer visible now.
              tuples, can be null; an array of arrays [frameid, color].
              visibleSwitcher, boolean, should the layer be visible in the Switch Panel.
              ov, an overview init structure.
              op, a string, identify the highlighting operation.
                  (e.g., rnids, rsubs, recns, pnids, ...)

   Returns: a layer structure
   billingt:Aug-2-2013 added parameter omicsLayerIdx at end of call to addOmicsHighlightLayer, so we know which omics layer
   billingt:Oct-21-2014 added colnum parameter so we know column number from source table file.
*/
function createLayer(name, queryString, color, orgid,
                     nodes, visible, tuples, visibleSwitcher, ov,
                     op, geneNames, omicsLayerIdx, colnum){
  if (ov == initCelOverview) return createCelLayer(name, colnum, queryString, color, orgid,
                                                   nodes, visible, tuples, op, geneNames, omicsLayerIdx);
  else return createRegHighlightLayer(name, queryString, null, tuples, orgid);
}

/*
   Create a cel overview layer. This can be due to a search or the Omics Viewer.

   Arguments: the arguments are described in the returned structure.

   Returns: a layer structure with fields:

            layer:       an OpenLayer layer (aka overlay). Could be null, which
                         implies that the layer is no longer visible.
            styleMap:    an OpenLayer style map that was used for the OpenLayer layer.
            zoomLevels:  array of structures {nodes: }
                            nodes, array of node structures in this layer
                            at the zoom level.
            tuples:      can be null; an array of arrays [frameid, value].
            name:        a string to use for the right panel of overlay names.
            queryString: a string, the string to use to do a substring query.
            op:          a string, identify the highlighting operation.
                         (e.g., rnids, rsubs, recns, pnids, ...)
            color:       the color used to highlight.
            orgid:       the organism id for this layer. A string.
            layout:      for Cel Ov, currently only one possible, 'standard'.
            visible:     true => the layer is visible on the map, otherwise it is not.
            i:           the index of the structure in array ov.layers.
            billingt:Aug-2-2013 added parameter omicsLayerIdx at end of call to addOmicsHighlightLayer, so we know which omics layer
*/
function createCelLayer(name, colnum, queryString, color, orgid,
                        nodes, visible, tuples, op, geneNames, omicsLayerIdx) {
  var ov        = initCelOverview;
  var oneLayer  = {color:       color,
                   name:        name,
                   colnum:      colnum,
                   queryString: queryString,
                   op:          op,
                   orgid:       orgid,
                   layout:      'standard',
                   visible:     visible,
                   // TBD: try to remove this i field.
                   i:           ov.layers.length,
                   tuples:      tuples,
                   geneNames:   geneNames,
                   omicsLayerIdx: omicsLayerIdx,
		   nodes: nodes,
		   nameColoredOnClick: null,
		   collection: null // a list of all the unique nodeIds in this layer
                  };

  // It could be an omics layer given by tuples.
  if (tuples != null) ov.omics.layers.push(oneLayer);
  else {
    ov.layers.push(oneLayer);
    newCelHighlightOpenLayerLayer(oneLayer) };
  return oneLayer;
}

/* Arguments: color, a color such that it can be used directly
                     as a parameter color for CSS styling.
   Returns: an Openlayers styleMap object.
*/
function createStyleMap(color){
  // We use a fillOpacity less than 1 to make it possible
  // to cover wide area without obstructing the text and graphic.
  var style = new OpenLayers.Style({pointRadius: 3, fillColor: color, fillOpacity: 0.6,
                                    strokeColor: color, strokeWidth: 0
                                    });
  var styleMap = new OpenLayers.StyleMap(style);
  return styleMap;
}

/* Arguments: color, a color such that it can be used directly
                     as a parameter color for CSS styling.
   Returns: an Openlayers styleMap object.
*/
function createOmicsStyleMap(color, zoomLevel){
  // We use a fillOpacity less than 1 to make it possible
  // to cover wide area without obstructing the text and graphic.
  var style = new OpenLayers.Style({pointRadius: [3,4,5,5,6,7,8,9,10,10,10][zoomLevel],
                                    fillColor: color, fillOpacity: 0.6,
                                    strokeColor: color, strokeWidth: 0
                                    });
  var styleMap = new OpenLayers.StyleMap(style);
  return styleMap;
}

/* Create a new OpenLayer layer in oneLayer. That new layer is made
   visible if the oneLayer is set to visible.

   Parms: oneLayer,        a layer structure (not an OpenLayer layer).
          visibleSwitcher, boolean.

   Returns: an OpenLayer layer.
   billingt:Oct-10-2013 : changes to make list button and highlight checkbox work correctly,
                          independently and appear on the same line
*/
function toggleHighlightList(i) {
    ov = initRegOverview.orgid ? initRegOverview : initCelOverview;
  var toggleId = "toggleHighlight"+i;
  if (document.getElementById(toggleId).checked == true) {
    console.log("WG.ToggleHighlight("+i+",'on')");
    ov.layers[i].visible = true;
    WG.ToggleHighlight(i,'on') }
  else { WG.ToggleHighlight(i,'off');
	 ov.layers[i].visible = false;
	 console.log("WG.ToggleHighlight("+i+",'off')") }
}

function newCelHighlightOpenLayerLayer(oneLayer){
  var name     = oneLayer.name;
  var color    = oneLayer.color;
  var visible  = oneLayer.visible;
  var i        = oneLayer.i; // The index of the layer
  var nameColored = "<font style='color:"+color+"'>"+name+"</font>";
  var toggleId = "toggleHighlight"+i;
  var toggleButtonDef = "<input type='checkbox' id='"+toggleId+"' onclick='toggleHighlightList("+i+");' checked/>";
  var listButtonDef = "<input type=button value='List' href='#' onclick='showHighlightedList(event, "+i+", initCelOverview);'/>";
  var nameColoredOnClick = '<div style="display: inline"><div style="display: inline">'+toggleButtonDef+listButtonDef+'</div><div style="display: inline">'+nameColored+'</div></div>';
  oneLayer.nameColoredOnClick = nameColoredOnClick;
  var dataLayerDiv = document.getElementById("layerSwitcherDataLayersDiv");
  dataLayerDiv.innerHTML = dataLayerDiv.innerHTML+"<br>"+nameColoredOnClick;
  document.getElementById("layerSwitcherDataLbl").style.display="inline";
//  dataLayerDiv.style.display="inline";
  return oneLayer;
}

/*  Cancel the event e from propagating up.  Useful when it has been
    determined that the event is going to be handled completely and
    that no other functions should handled the event. Example: the
    Layer Switcher Panel tries to toggle a layer when the user click
    the "List" button.  */
function cancelEvent(e){
  if(!e) e = window.event;
  if(e.stopPropagation) e.stopPropagation();
  if(e.preventDefault)  e.preventDefault();
  e.cancelBubble = true;
  e.cancel       = true;
  e.returnValue  = false;
  return false;
}

///kr:Jul-18-2022 Return an array of arrays.  The sub-arrays are rows that can be
/// shown in the Google DataTable.
///
///   nodeIdxs: An array of integers, each of which is a nodeIdx
///   k:        An integer, indicating the highlighting Layer
///   ov:       Type of ov display.  Either initCelOverview or regOv
///
function nodeIds2DataRows(nodeIdxs,k,ov) {
  var result = new Array();
  if (ov == initCelOverview) {
    // nodeNameArray :: [ [nodeId, nodeNameString], ... ]
    var nodeNameArray = queryHighlightedNodes[k];
  //queryHighlightedNodes[listId] = nodeNameArray; // where nodeNameArray is indexed by the nodeId's
    console.log('kr in nodeIds2DataRows : queryHighlightedNodes (nodeData) : ');
    console.dir(nodeData);
    console.log('kr in nodeIds2DataRows : nodeIdxs : ');
    console.dir(nodeIdxs);
    //console.log('kr initCelOverview : ');
    //console.dir(initCelOverview);
    //console.log('kr WG.wgactive.nodeDesc : ');
    //console.dir(WG.wgactive.nodeDesc);
    for (var i=0; i < nodeIdxs.length; i++) {
      let nodeId = nodeIdxs[i];
      let nodeData = nodeData[nodeId];
      let row = new Array();
      // frameId
      if (nodeData.frameId) {
        row.push(nodeData.frameId);
	//console.log('kr frameIdToOmicsDataTuples(frameId) : ');
	//console.dir(frameIdToOmicsDataTuples(nodeData.frameId));
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);
        row.push('None');
      }
      // name
      if (nodeData.name) {
        row.push(nodeData.name);
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);
        row.push('None');
      }
      // cname
      if (nodeData.cname) {
        row.push(nodeData.cname);
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);
        row.push('None');
      }
      // type
      if (nodeData.type != undefined) {
        row.push(nodeData.type); // doesn't seem to exist...
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);

	let nodeDesc = WG.wgactive.nodeDesc[nodeId];
	let type = nodeDesc[2];
	console.log('kr nodeDesc :');
	console.dir(nodeDesc);
	//console.log('kr type :' + type);

	row.push('None');
      }
      result.push(row);
    }
    return result}
  // regOv
  else {
    //kr:Jul-11-2022 A replacement needs to be still implemented: !!
    return iNodesToFrameIds(nodes, WG.wgactive.nodeDesc);
  }
}

///kr:Jul-11-2022 Return an array of arrays.  The sub-arrays are rows that can be
/// shown in the Google DataTable.
///
///   nodes:  An array of integers, each of which is a nodeIdx
///   k:      An integer, indicating the highlighting Layer
///   ov:
///
function nodes2DataRows(nodes,k,ov) {
  var result = new Array();
  if (ov == initCelOverview) {
    var row = new Array();
    var nodeData = queryHighlightedNodes[k];
    console.log('kr nodes2DataRows  nodeData : ');
    console.dir(nodeData);
    console.log('kr nodes2DataRows  nodes : ');
    console.dir(nodes);
    console.log('kr initCelOverview : ');
    console.dir(initCelOverview);
    console.log('kr WG.wgactive.nodeDesc : ');
    console.dir(WG.wgactive.nodeDesc);
    for (var i=0; i < nodes.length; i++) {
      // frameId
      if (nodeData[nodes[i]].frameId) {
        row.push(nodeData[nodes[i]].frameId);
	console.log('kr frameIdToOmicsDataTuples(frameId) : ');
	console.dir(frameIdToOmicsDataTuples(nodeData[nodes[i]].frameId));
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);
        row.push('None');
      }
      // name
      if (nodeData[nodes[i]].name) {
        row.push(nodeData[nodes[i]].name);
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);
        row.push('None');
      }
      // cname
      if (nodeData[nodes[i]].cname) {
        row.push(nodeData[nodes[i]].cname);
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);
        row.push('None');
      }
      // type
      if (nodeData[nodes[i]].type) {
        row.push(nodeData[nodes[i]].type);
      }
      else {
	//kr:Jul-11-2022 I don't understand what this does:
        //for (var j=0; j < nodes[i].nodes.length; j++)  result.push(nodeData[nodes[i].nodes[j]].frameId);

	let nodeDesc = WG.wgactive.nodeDesc[nodes[i]];
	let type = nodeDesc[2];
	console.log('kr nodeDesc :');
	console.dir(nodeDesc);
	console.log('kr type :' + type);

	row.push('None');
      }
      result.push(row);
    }
    return result}
  // regOv
  else {
    //kr:Jul-11-2022 A replacement needs to be still implemented: !!
    return iNodesToFrameIds(nodes, WG.wgactive.nodeDesc);
  }
}

///kr:Jul-20-2022 Looks up the frameIds for the nodeIds that are in a highlight list.
///
function nodeIds2frameIds(nodeIds,k,ov) {
  if (ov == initCelOverview) {
    var result = new Array();
    //var nodeData = queryHighlightedNodes[k];
    for (var i=0; i < nodeIds.length; i++) {
      let nodeDesc = WG.wgactive.nodeDesc[nodeIds[i]];
      if (nodeDesc[0]) {
        result.push(nodeDesc[0]);
      }
      else //???
        for (var j=0; j < nodeIds[i].nodes.length; j++) 
          //result.push(nodeData[nodeIds[i].nodes[j]].frameId)
	  alert('unimplemented');
    }
    return result}
  // regOv
  else { //???
    return iNodesToFrameIds(nodeIds, WG.wgactive.nodeDesc);
  }}

//
function nodes2frameids(nodes,k,ov) {
  if (ov == initCelOverview) {
    var result = new Array();
    var nodeData = queryHighlightedNodes[k];
    for (var i=0; i < nodes.length; i++) {
      if (nodeData[nodes[i]].frameId) {
        result.push(nodeData[nodes[i]].frameId);
      }
      else 
        for (var j=0; j < nodes[i].nodes.length; j++) 
          result.push(nodeData[nodes[i].nodes[j]].frameId)
    }
    return result}
  // regOv
  else {
    return iNodesToFrameIds(nodes, WG.wgactive.nodeDesc);
  }}

/*
   Open up a dialog to display a list of highlighted objects.
   Each object of the list is clickable. Typically called when
   user has clicked the "List" button in the Switch Layer panel.

   Arguments: event, the clicking event that sent control here.
              i, the layer index in the ov
              ov, one of the init overview structures (reg or cel).
   Returns: nothing.  Opens up a dialog window with list of names.
*/
function showHighlightedList(event, i, ov) {
  cancelEvent(event); // need to cancel the SwitchLayer mechanism to operate.
  // It could already be opened. Open it once. Only one list is available
  // at a time.
  if (dialogListNodes != null) {
    dialogListNodesClose(ov);
  };
  var oneLayer  = ov.layers[i];
  var name      = oneLayer.name;
  var sQuery    = oneLayer.queryString;
  var idDiv     = "dialogListNodes";
  let nodeIds   = oneLayer.collection; // Uniquely occurring nodeIds
  if (dialogListNodes == null) { // just checking to be sure its closed
    var buttons = [];
    buttons.push({ text: "Invoke Omics DataTable",
		   handler:
		     function() {
			 if (WG.wgactive.omics.data) {
			     let nodeIdxsOfPwyBlockMap = new Map();
			     for(let ni = 0; ni < nodeIds.length; ni++) {
				 //kr:Feb-5-2023 In the previous use of this Map,
				 // the value was a pwyFrameId, but we don't really have that
				 // available here.  Also, the value is currently ignored,
				 // so I'll repeat the nodeIdx .
				 nodeIdxsOfPwyBlockMap.set(nodeIds[ni], nodeIds[ni]); // store in Map
			     }
			     //			 console.log('nodeIdxsOfPwyBlockMap : ');
			     //			 console.dir(nodeIdxsOfPwyBlockMap);
			     rawData = collectOmicsDataAsRawData(nodeIdxsOfPwyBlockMap);
			     //alert('rawData : ' + rawData);
			     if ( rawData.length == 0 ) {
				 alert("No applicable Omics data was found for the selections.");
			     } else {
			     invokeCellOvDataTableQtip ('Highlighted Search Results',   // dataTableName,
							null,  // tipType (null means: use value of WG.wgactive.omics.objectType)
							rawData,
							$j('<div/>').appendTo('body') , // elt,
							'Pathway Categories'            // categoryHeaderStr
						       );
			     }
			 } else {
			     alert(pleaseLoadOmicsDataStr() );
			 }
		     }});
    if (groupsEnabled) {
      if (can_create_group) {
	let map       = i;
	let zoomLevel = i;
	console.log('kr collection nodeIds : ');
	console.dir(nodeIds); //kr:Jul-18-2022 These are pure nodeIds
	//   collection just consists of nodeIds !
	let frameIds = nodeIds2frameIds(nodeIds,i,ov);
	//let frameIds = nodes2frameids(nodes,i,ov);    //kr:Jul-20-2022 temporary. broken. ( switch back to nodeIds )
	//console.log('kr data rows: ' + nodes2DataRows(nodes,i,ov) );
	let ovString = (ov == initCelOverview) ? 'cel' : 'reg';
	let url = '/nodes2group?nodes=' + encodeURIComponent(frameIds)
	  + '&name=' + encodeURIComponent(name)
	  + '&ov=' + ovString;
        buttons.push({ text: "Turn into SmartTable <img src='/pgroups/group.png' style='width: 20px; height: 16px;'>",
		       handler: // turnIntoGroup
		        function() {
			  window.open(url, '_blank'); //seems to address opening in a new TAB (not new window)
			}});
      } else {
        buttons.push({ text:"If you log in you can turn this into a SmartTable <img src='/pgroups/group.png' style='width: 20px; height: 16px;'>", handler: UnhideLogin });
      }
    }
    buttons.push({ text:"Dismiss", handler: function(){dialogListNodesClose(ov)}, isDefault:true });
    dialogListNodes = new YAHOO.widget.Dialog(idDiv,
      { width: (ov == initCelOverview) ? "500px": "200px", 
	height: (ov == initCelOverview) ? "230px" : "300px",
        visible: true, draggable: true, close: false,
        // This list should really be above everything on the page.
        zindex: 50000,
        buttons: buttons
      });
    // This will force the resizable handle to go at the right corner of the dialog window.
    dialogListNodes.setFooter(" ");
  };

  var fnSetList = function(){
//    var map       = (ov == initCelOverview) ? i : ov.map;
//    var nodes = (ov == initCelOverview) ? oneLayer.nodes
//    : oneLayer.fn(initRegOverview.frames, oneLayer, true);
      var map = i;
      ////      var nodes = oneLayer.collection ? oneLayer.collection : oneLayer.nodes;
      //kr:Oct-8-2021 These node structures contain info that came from the original query,
      //  whereas collection just consists of nodeIds .
      //kr:Jul-18-2022 These nodes seem to contain 2 fields: nas and nodes .  nodes are really nodeIds ...
      var nodes = oneLayer.nodes;
      console.log('kr nodes : ');
      console.dir(nodes);
      //console.log('kr data rows: ' + nodes2DataRows(nodes,i,ov) );
      var htmlStr = createListNodesHTML(map, nodes, sQuery, ov);
      if (name.includes("Compound") === true)
	  htmlStr = "<b>Click on entities below to visually flag them in the diagram.</b><br>" + htmlStr;
      dialogListNodes.setBody(htmlStr);
  }

  // This function might be called again when zoom level changes.
  dialogListNodes.setListAtCurrentZoomLevel = fnSetList;

  // Set the HTML list inside the dialog for the current zoom level.
  fnSetList();

  dialogListNodes.setHeader("List of Highlighted Objects for "+name);
  // Alligned the top-right corner with the bottom-right corner of the
  // layer switcher panel.
  dialogListNodes.render(document.body);
  dialogListNodes.cfg.setProperty('context', ['layerSwitcher','tr','br']);
  attachDialogResizeMechanism(idDiv, dialogListNodes);

  dialogListNodes.show();
}

/* START control regulatee indirection level */
/* START control regulatee indirection level */
/* START control regulatee indirection level */
var dialogControlRegulateeIndirectionLevel = null;

function showControlRegulateeIndirectionLevelDialog(currentLevel, name) {
//  cancelEvent(event); // need to cancel the SwitchLayer mechanism to operate.
    currentLevel = currentLevel - 1;
    var ov = initRegOverview;
//  var oneLayer  = ov.layers[i];
//  var name      = oneLayer.name;
//  var sQuery    = oneLayer.queryString;
  var idDiv     = "dialogControlRegulateeIndirectionLevel";
  // It could already be opened. Open it once. Only one list is available
  // at a time.
  if (dialogControlRegulateeIndirectionLevel != null) {
    dialogControlRegulateeIndirectionLevelClose(ov);
  };
// <input type="number" id="quantity" name="quantity" min="1" max="5" onchange="alert('wowee '+this.value)">
  if (dialogControlRegulateeIndirectionLevel == null) { // just checking to be sure its closed
    var buttons = [];
    buttons.push({ text:"Dismiss", handler: function(){dialogControlRegulateeIndirectionLevelClose(ov)}, isDefault:true });
    dialogControlRegulateeIndirectionLevel = new YAHOO.widget.Dialog(idDiv,
      { width:  "250px", 
	height: "125px",
        visible: true, draggable: true, close: false,
        // This list should really be above everything on the page.
        zindex: 50000,
        buttons: buttons
      });
    dialogControlRegulateeIndirectionLevel.setFooter(" ");
  };
    var frames = WG.wgactive.nodeDesc;
    var resultp = null;
    var labelStr = '<label for="quantity"/>Regulation Level:</label>';
    var queryStr = '<input type="number" id="quantity" name="quantity" min="0" max="10" value="' + currentLevel
        + '" onchange="changeRedirectLevel(Number(this.value) + 1)">';
    var htmlStr = 
	"<p>By clicking on the up/down arrows in the selector you can add/remove levels of indirect regulation.</p>" +
	labelStr + 
	queryStr;
    dialogControlRegulateeIndirectionLevel.setBody(htmlStr);
    dialogControlRegulateeIndirectionLevel.setHeader("Direct and Indirect Regulatees of "+ name);
    // Alligned the top-right corner with the bottom-right corner of the
    // layer switcher panel.
    //dialogControlRegulateeIndirectionLevel.cfg.setProperty('xy', [50, 50]);
    dialogControlRegulateeIndirectionLevel.render(document.body);
    dialogControlRegulateeIndirectionLevel.cfg.setProperty('context', ['viewControl','tr','br']);

  dialogControlRegulateeIndirectionLevel.show();
}

function dialogControlRegulateeIndirectionLevelClose(ov) {
    if (!dialogControlRegulateeIndirectionLevel) return;
    //dialogControlRegulateeIndirectionLevel.setListAtCurrentZoomLevel = null;
    //WG.UnMark();
    dialogControlRegulateeIndirectionLevel.hide();
    dialogControlRegulateeIndirectionLevel.destroy();
    dialogControlRegulateeIndirectionLevel = null;
}
/* control regulatee indirection level END */
/* control regulatee indirection level END */
/* control regulatee indirection level END */

function attachDialogResizeMechanism(name, windowDialog){}
/*
  // Create Resize instance, binding it to the windowDialog DIV
  var resize = new YAHOO.util.Resize(name, {
    handles: ["br"],
    autoRatio: false,
    minWidth:  100,
    minHeight: 0,
    status: false
  });

  // Setup startResize handler, to constrain the resize width/height
  // if the constraintoviewport configuration property is enabled.
  resize.on("startResize", function(args) {
    if (this.cfg.getProperty("constraintoviewport")) {
      var D = YAHOO.util.Dom;
      var clientRegion = D.getClientRegion();
      var elRegion = D.getRegion(this.element);
      resize.set("maxWidth",  clientRegion.right  - elRegion.left - YAHOO.widget.Overlay.VIEWPORT_OFFSET);
      resize.set("maxHeight", clientRegion.bottom - elRegion.top  - YAHOO.widget.Overlay.VIEWPORT_OFFSET);
    } else {
      resize.set("maxWidth",  null);
      resize.set("maxHeight", null);
    }
  }, windowDialog, true);

  // Setup resize handler to update the Panel's 'height' configuration property
  // whenever the size of the 'resizablepanel' DIV changes.

  // Setting the height configuration property will result in the
  // body of the Panel being resized to fill the new height (based on the
  // autofillheight property introduced in 2.6.0) and the iframe shim and
  // shadow being resized also if required (for IE6 and IE7 quirks mode).
  resize.on("resize", function(args) {
    var panelHeight = args.height;
    this.cfg.setProperty("height", panelHeight + "px");
  }, windowDialog, true);

  YAHOO.util.Event.on("showbtn", "click", windowDialog.show, windowDialog, true);
}
*/

/*   map : Seems to be an integer, standing for the layer index in the ov.

*/
function createListNodesHTML(map, nodes, sQuery, ov){
  if (nodes == null) return "";
  var result = "<b>Click on an item below to find it in the Overview</b><br>";

  // For Regulatory Overview, call a distinct function.
  if (ov == initRegOverview) return result+createRegListStr(nodes, sQuery);

  // For cellular Overview.

  // A simple case where the user was directly searching for reactions or compounds.
  if (!nodes[0].nodes)
    result = createCelListStr(map, nodes, sQuery, nodes[0].pframeid);
  else {
    /*
       Used for genes, enzymes, and pathways.

       For these, the objects found in the overview are compounds
       and/or reactions, but the top level items found for the search
       are either genes, enzymes, or pathways.

       Each node element represents the elements found: it is a structure
       with at least two fields {nas: ..., nodes:...} a third field
       might exist {nas:..., nodes:..., pframeid:...}

    */
    var listStr = "<ol>";
    // Sort the top level.
    nodes.sort(function(node1, node2){
      var s1 = chooseNameInArray(sQuery, node1.nas);
      var s2 = chooseNameInArray(sQuery, node2.nas);
      return compareString(s1,s2);
    });

    for (var i=0; i < nodes.length; i++){
      var name = chooseNameInArray(sQuery, nodes[i].nas);
      var listStr2 = createCelListStr(map, nodes[i].nodes, null, nodes[i].pframeid);
      if (listStr2 != "") listStr += "<li>"+insertMark(sQuery,name)+"<br>"+listStr2;
    }
    result = listStr+"</ol>";
  }
  return result;
}

function chooseNameInArray(sQuery, names){
  if (names.length == 0) return '';
  var lsQuery = sQuery.toLowerCase();
  for (var i=0; i < names.length; i++){
   if (names[i].toLowerCase().indexOf(lsQuery) >= 0) return names[i];
  }
  return names[0];
}

/*
   Arguments: iNodes, an array of indices.
              sQuery, a string or null.
   Returns: HTML string.
*/
function createRegListStr(iNodes, sQuery){
    var zoomLevel = WG.GetCurrentZoomLevel(); // map.zoom;
    var nodes     = WG.wgactive.nodeDesc;

  // Make a copy of iNodes since we are destructively sorting on the array.
  var iNodesCopy = [].concat(iNodes);
  // iNodesCopy.sort(function(i1,i2) {
  //  var s1 = chooseNodeName(frames[i1], sQuery).toLowerCase();
  //  var s2 = chooseNodeName(frames[i2], sQuery).toLowerCase();
  //  return  compareString(s1, s2);;
  //    ;
  // });
  iNodesCopy.sort(function(i1,i2) {
    var s1 = nodes[i1][FrameName].toLowerCase();
    var s2 = nodes[i2][FrameName].toLowerCase();
    return  compareString(s1, s2);;
      ;
  });

  var listStr = "<ol>";
  for (var j = 0; j < iNodesCopy.length; j++){
    // Centering on a node must be independent from the zoom level
    // since the user can keep the list of nodes open and zoom-in or -out.
    var r = iNodesCopy[j];
    var n = nodes[r];
//    var x = nodes[r].x;
//    var y = nodes[r].y;
      var name = n[FrameName]; // insertMark(sQuery, chooseNodeName(n, sQuery));
      var inode = n[FrameNodeId]
      listStr += createListEntry(inode,name);
  }
  listStr += "</ol>";
  return listStr;
}

/*
function createListEntryReg(name){
  var ovS = "initRegOverview";
//  return "<li><a href='#' onclick=centerMapOnNode("+x+","+y+","+ovS+")>"+name+"</a>";
return "<li><a>"+name+"</a>";
}
*/

function compareString(s1, s2){
  return (s1 > s2) ? 1 : (s1 == s2) ? 0 : -1;
}

/* This is only for the cellular overview.
   Create an HTML string for the list of nodes.

   Arguments: map : Seems to be an integer, standing for the layer index in the ov.
              nodes, an array of node structures.  kr:Sep-23-2021 Actually, I see an array of integers...
              sQuery, a string or null.
              pframeid, the parent frameid of the child nodes.
                        Might be undefined or null.
   Returns: HTML string.
*/
function createCelListStr(map, nodes, sQuery, pframeid){
  // map is the index into queryHighlightedNodes - i.e., map = listId
  if (!nodes || (nodes.length == 0)) return "";
  displayedNodes = queryHighlightedNodes[map];
  /*
     Structure the list of nodes into sublists. It is done since
     frameIds may repeat in nodes: several nodes may refer to the same
     object although the nodes have different locations (different
     reactions or pathways).

     These repetitions will create sublists in the list displayed to
     the user. The exception is for a pathway list, in this case the
     reaction to list do occur at different places but only one is
     listed. 
  */

  var nodesSub = new Array(); // An array with frameid index.
  var topNodes = new Array(); // First node for each sublist.

  for (var j = 0; j < nodes.length; j++){
    var node = displayedNodes[nodes[j]];
    if (!!node) {
      var frameid = node.frameId;
      if (nodesSub[frameid] != undefined) {
	// It should not be in the same pathway as another node
	var repeat = false;
	for (var k=0; k < nodesSub[frameid].length; k++) {
          var node2 = nodesSub[frameid][k];
          if (node.doc3 != "" && node.doc3 == node2.doc3)
            repeat = true;
	}
	if (!repeat) nodesSub[frameid].push(nodes[j]);
      }
      else {
	nodesSub[frameid] = [nodes[j]]; // First node with such frameid.
	topNodes.push(nodes[j]);
      }}}

  topNodes.sort(function(node1, node2) {
    var name1 = chooseNodeName(displayedNodes[node1], sQuery).toLowerCase();
    var name2 = chooseNodeName(displayedNodes[node2], sQuery).toLowerCase();
    return compareString(name1, name2);
  });

  // The top list for the given ids.
  var listStr = "<ol>";
  for (var j = 0; j < topNodes.length; j++){
    // Centering on a node must be independent from the zoom level
    // since the user can keep the list of nodes open and zoom-in or -out.
    var frameid = displayedNodes[topNodes[j]].frameId;
    var sublist = nodesSub[frameid];
    if (!sublist || sublist.length == 0) continue;

    // If there is a parent frameid, this
    // is a pathway search that was done. Each node
    // is not a pathway but an object of a pathway.

    if (sublist.length > 1 && !pframeid) {
      // Build a second level sublist.
      var name = chooseNodeName(displayedNodes[sublist[0]], sQuery);
      listStr += "<li>"+insertMark(sQuery, name)+"<ol>";

      for (var k=0; k < sublist.length; k++) {
	var nodeId = [sublist[k]];
        var n = displayedNodes[nodeId];

        // doc2 and doc3 are rarely simultaneously empty, but
        // use the node name if this occurs. Do not use doc4,
        // this is extra info, e.g. directionality, not to be
        // displayed in the list.
        var subName = removeLink((n.doc3 == "") ? ((n.doc2 == "") ? name: n.doc2) : n.doc3);
        // The link is good only for the current zoom level.
        listStr += createListEntry(nodeId, subName, initCelOverview);
      }
      listStr += "</ol>";
      // Remove this sublist.
      nodesSub[frameid] = null;
    }
    else {
      var nodeId = false; // the node to use.
      if (pframeid && sublist.length > 1) {
        // Remove this sublist from the set.
        nodesSub[frameid] = null;
        // Find the element that has pframeid
        for (var k=0; k < sublist.length; k++) {
	  var nodeId = sublist[k];
          var n = displayedNodes[nodeId];
          if (n.pframeIds && n.pframeIds.indexOf(pframeid) >=0 ) {
            r= n; // sublist[k];
            break;
          }
        }
      }
      else nodeId = sublist[0]; // Logically, there is only one.

      if (nodeId) {
        var name       = chooseNodeName(displayedNodes[nodeId], sQuery);
        var nameMarked = insertMark(sQuery, name);
        // The link entry is good only for this zoom level.
        listStr += createListEntry(nodeId, nameMarked, initCelOverview);
      }
    }
  }
  listStr += "</ol>";
  return listStr;
  }

// Generates an ol entry for the list of object.
function createListEntry(nodeId, name, ov){
//  var ovS = (ov == initCelOverview) ? "initCelOverview" : "initRegOverview";
//  if (ovS == "initRegOverview")
//    return "<li><a href='#' onclick=centerMapOnNode("+x+","+y+","+ovS+")>"+name+"</a>";
//  else 
return "<li><a href='#' onclick='WG.Mark("+nodeId+")'>"+name+"</a>";
}

/* Center the map at (x, y) for overview ov and put a marker on this
   location.

*/
function centerMapOnNode(x, y, ov){
  removeAllMarkers(ov);
  var map       = ov.map;
  var zoomLevel = map.zoom;
  var lonLat    = mapNodesXYtoLonLat(map, x, y);

  addMarker(x, y, ov);
  map.setCenter(lonLat, zoomLevel);
}

/*
   Move all markers to the current zoom level for overview ov.
*/
function moveToZoomLevelMarkers(ov){
  var map = ov.map;
  var markerLayers = map.getLayersByName('Markers');
  if (markerLayers.length > 0) {
    // Actually, not more than one layer should be on the map.
    var markerLayer = markerLayers[0];
    var markers     = markerLayer.markers;
    // Move the markers according to zoom level.
    for (var i=0; i < markers.length; i++) {
      var x      = markers[i].x;
      var y      = markers[i].y;
      var lonLat = mapNodesXYtoLonLat(map, x, y);
      var lon    = lonLat.lon;
      var lat    = lonLat.lat;
      markers[i].moveTo(new OpenLayers.Pixel(lon,lat));
    }
  }
}

// Add and display a marker on the (x, y) location.
// RAB -  not necessary for celOv - see WG.Mark
// midford - Still necessary for regOv
function addMarker(x, y, ov){
  var map = ov.map;
  var markerLayers = map.getLayersByName('Markers');
  var markerLayer;
  if (markerLayers.length == 0) {
    markerLayer = new OpenLayers.Layer.Markers('Markers', {displayInLayerSwitcher: false});
    map.addLayer(markerLayer);
    map.setLayerZIndex(markerLayer,50000);
  }
  else markerLayer = markerLayers[0];

  var lonLat = mapNodesXYtoLonLat(map, x, y);
  var lon    = lonLat.lon;
  var lat    = lonLat.lat;
  var size   = new OpenLayers.Size(20,34);
  var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
  var icon   = new OpenLayers.Icon('img/marker.png',size,offset);
  var marker = new OpenLayers.Marker(new OpenLayers.LonLat(lon,lat),icon);
  marker.x   = x;
  marker.y   = y;
  marker.setOpacity(1.0);
  markerLayer.addMarker(marker);
  return marker;
}


function dialogListNodesClose(ov){
  if (!dialogListNodes) return;
  dialogListNodes.setListAtCurrentZoomLevel = null;
  // (ov = initCelOverview) ? WG.UnMark() : removeAllMarkers(ov);
    WG.UnMark();
  dialogListNodes.hide();
  dialogListNodes = null;
}

function removeAllMarkers(ov){
  var map = ov.map;
  var markerLayers = map.getLayersByName("Markers");
  for (var i=0 ; i < markerLayers.length; i++){
    markerLayers[i].clearMarkers();
  }
}

/* This a general high level function to highlight compounds, enzymes,
   reactions, pathways.

   This will create a new highlight layer for the cellular overview.

   Arguments: name,  a string, the name of this highlight (overlay name in switch panel).
              nodes, array of node structures to highlight or
                     array of structures of the form {... nodes:[]}
              queryString, a string, the strings entered by the user to do
                           the highlighting.
              op,        a string, identify the highlighting operation to do.
              geneNames, an array of gene names, special case of op == 'gfile'.
   Returns: nothing.
*/
function celHighlight(name, nodes, queryString, op, geneNames){
  var layerName = name;
  showOvBusy();

  // logMsg('celHighlight number of nodes '+nodes.length);
  var orgid  = initCelOverview.orgid;

  // logMsg('celHighlight number of nodes found '+iNodes.length);
  if (!!nodes && (nodes.length > 0)) {
    addHighlightLayer(nodes, layerName, queryString, orgid, initCelOverview, op, geneNames);
  }
  else { // warning: nothing to highlight
    var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
      { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
        buttons: [{text:"Ok", handler: function(){noHighlightingDialog.hide()},
                   isDefault:true }]
      });
    noHighlightingDialog.setHeader("Highlight Warning");
    noHighlightingDialog.setBody("For search "+name+" no object was found.");
    noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
    noHighlightingDialog.render(document.body);
  }
  showOvNotBusy();
}

/* Arguments: queryString,

   Returns: Boolean, true => the search can proceed.
*/
function celSearchIsOk (queryString){
  if (queryString.length == 0) {
    var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
      { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
        buttons: [{ text:"Ok", handler: function(){noHighlightingDialog.hide()}, isDefault:true }]
      });
    noHighlightingDialog.setHeader("Highlight Warning");
    noHighlightingDialog.setBody("No data was entered in the text input box.");
    noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
    noHighlightingDialog.render(document.body);
    return false;
  }
  return true
}

/* Create a layer for highlighting nodes.

   Arguments: nodes, an array of node structures.
              name, a string to name the layer.
              queryString, the string entered by the user to query.
              orgid, a string.
              ov, a Regulatory or Cellular Overview init structure.
              op, a string describing the search operation that did the
                  highlighting.
              geneNames, an array of gene names.
   Returns: nothing.
*/
function addHighlightLayer(nodes, name, queryString, orgid, ov, op, geneNames){
  // A layer for all geometric figures for this highlight.
  var color    = getOvColor(); // default color for all objects.
  var oneLayer = createLayer(name, queryString, color, orgid, nodes, true, null, true, ov, op, geneNames);
  // Highlight the nodes.
  highlightLayer(oneLayer, initCelOverview);
}

/* Create a layer for highlighting nodes for the Omics Viewer for
   one step animation. The parameter tuples is for one animation
   step.

   This is similar to fn addHighlightLayer, but here each frameId
   gets its own color.

   Arguments: tuples, an array of arrays of three elements of the form
                 [frameid, color, value] for Reg or Cel Ov.
              name, a string to name the layer.
              orgid, a string.
              ov, an overview init structure.

   Returns: a layer structure.
   billingt:Aug-2-2013 added parameter omicsLayerIdx at end of call to addOmicsHighlightLayer, so we know which omics layer
   billingt:Oct-21-2014 added colnum parameter so we know column number from which data is coming.
*/
function addOmicsHighlightLayer(tuples, name, orgid, ov, omicsLayerIdx, colnum){
  // A layer for all geometric figures for this highlight.
  var color    = 'white';  // default color.
  // Create an omics layer base on tuples not nodes.
  var oneLayer = createLayer(name, null, color, orgid, null, true, tuples, false, ov, "omics", null, omicsLayerIdx,
                             colnum);
  // Highlight the nodes of the layer.
  highlightLayer(oneLayer, ov);

  return oneLayer;
}

/*
  Recreates all the layers for the Omics Viewer according
  to the current zoom level, layout, and set of available
  frames.

  billingt:Aug-2-2013 Methinks this is GUBAGE

function recreateOmicsHighlightLayers(ov){
  if (!ov.omics) return;
  addOmicsHighlightLayer(oneLayer.tuples, oneLayer.name, oneLayer.orgid, ov);
}
*/

/* Highlight the nodes of the given layer at the current
   zoom level of the map of ov. Used for Cel and Reg overviews.

   Arguments: oneLayer, a highlightlayer structure.
              ov, an overview init structure.
   Returns: nothing.
*/
function highlightLayer(oneLayer, ov){
  if (ov == initCelOverview) celHighlightNodes(oneLayer, null);
  else regHighlightNodes(oneLayer, null, ov.frames, false);
}

/* Get the cellular overview nodes, perhaps from the server and cached the nodes,
   for the Omics Viewer at the zoom level
   and apply the continuation to them. The Omics animation is not necessarily
   started yet.

   This is a potentially asynchronous operation that requires
   a continuation since the nodes might have to be retrieved from
   the server.

   Arguments: oneLayer, the field tuples is necessarily non-null.
              zoomLevel, an integer.
              continuation, a function of one argument of nodes.
   Returns: nothing.
*/
function getCelOmicsNodes(oneLayer, zoomLevel, continuation){
  // If the nodes are already in for this zoom level, just use them.
  if (animateOmics.nodes)
    continuation(animateOmics.nodes);
  else {
    // Ask the server to get the nodes for this zoom level.
    var frameidsTxt   = tuplesToFrameidsTxt(oneLayer.tuples);
    var continuation2 = function(result) {
      if (result) {
        animateOmics.nodes = result.nodes;
        continuation(result.nodes);
      }
    };
    getCelNodesServer(frameidsTxt, continuation2, zoomLevel);
  }
}

/*
    Do a query to the server to get the cel ov nodes given by the
    frameids at the given zoom level.

    Once the nodes are received, apply the continuation on them.
*/

function getCelNodesServer(frameidsTxt, continuation, zoomLevel) {
  var s = "object="+frameidsTxt;
  var orgid = initCelOverview.orgid;
  var url   = "/"+orgid+"/cel-overview-frameids-to-nodes?zoomlevel="+zoomLevel;
  showOvBusy();
  postRequestAsync(url,continuation,s);
}

/* Handle an asynchronous request for a result structure
   from the server.

*/
function handleCelNodesServer(request, continuation){
  var result = null;
  showOvNotBusy();
  try {
    eval(request.responseText);
  } catch(e) {
    showServerError('(Error 13) A Web server error occurred when retrieving Cellular Overview node data', e, request.responseText);
    return;
  };
  showOvNotBusy();
  continuation(result);
}

/*
   Highlight all the relevant nodes for one layer (one step
   of the animation) of the Omics Viewer based on the nodes.
   The oneLayer contains the tuples for the frame ids, and color;
   the nodes contain the location.

*/
function celHighlightOmicsNodes(oneLayer, nodes){};
/*
  // in oneLayer, there will be multiple entries for a frameId, if there's multiple genes (values) for that frameId ... only display one
  // TBD the above. which one, one with greatest absolute value??
  var zoomLevel = WG.GetCurrentZoomLevel();
  var layerNodes = nodes[oneLayer.omicsLayerIdx];
  // collect the highlights in here ...
  var highlights = new Array();
  for (var i = 0; i < layerNodes.length; i++) {
    var color    = layerNodes[i].color;
    var nodeid   = layerNodes[i].nodeid;
    highlights.push([nodeid, color]); 
  }
  // .s.. display them all in one swell foop
  WG.highlightOmicsData(highlights);
}
// RAB ADDING FOR TESTING
// WG.highlightOmicsData = function (highlights) {};
*/

function removeDupsSimple(anArray) {
  var seen = {};
  return anArray.filter(function(item) {
    return seen.hasOwnProperty(item) ? false : (seen[item] = true);
  });
}

/*
  Highlight all the nodes of the layer with a color.
  Used for Omics Viewer too.

  Arguments: oneLayer, a layer structure.
             style, a style structure. Null for Omics Viewer, called from highlightLayer(oneLayer, ov)

*/
function celHighlightNodes(oneLayer, style) {
  var ov        = initCelOverview;
  /* billingt:Aug-2-2013 added "else", because either this layer is omics, or not */
  if (oneLayer.tuples) {
    // Omics Viewer.
    var continuation = function(nodes) {celHighlightOmicsNodes(oneLayer, nodes)};
    getCelOmicsNodes(oneLayer, WG.GetCurrentZoomLevel(), continuation); 
  }
  else if (oneLayer.nodes) {
    // Non Omics highlighting
    var nodes = oneLayer.nodes;
    var collection;
    if (typeof nodes[0] == "object") {
      collection = new Array();
      for (i = 0; i < nodes.length; i++) {
	collection = nodes[i].nodes == null ? collection : collection.concat(nodes[i].nodes);
      }}
      else collection = nodes;
    oneLayer.collection = removeDupsSimple(collection);
    WG.HighlightList(oneLayer.i, oneLayer.color, oneLayer.collection);
  }}

var queryHighlightedNodes = new Array();

///kr:Jul-14-2022 I don't see the following being called from anyhwere...(???)
/* listId :: an integer >= 0
   nodeNameArray :: [ [nodeId, nodeNameString], ... ]
*/
/* listId :: an integer >= 0
*/
function highlightedNodes (listId, nodeNameArray) {
  console.log("listId = "+listId+" nodeNameArray = "+nodeNameArray);
  console.log("nodeNameArray : ");
  console.dir(nodeNameArray);
  queryHighlightedNodes[listId] = nodeNameArray; // where nodeNameArray is indexed by the nodeId's
  // if (dialogListNodes != null &&
  //       typeof(dialogListNodes.setListAtCurrentZoomLevel) == 'function')
  //   ShowHighlightedList(null, listId, initCelOverview); hopefully the null event won't have a bad side effect.
}

/* Highlight only one node in the overview. Can be used for regulatory
   overview or cellular overview. The node becomes visible only when the
   layer is visible.

   Arguments: openlayer, an OpenLayer layer.
              node,  a node structure
              style, an OpenStyle object.
              ov,    an overview structure.
   Returns: nothing.
*/
function highlightOneNode(openlayer, node, style, ov){
  if (!node) return;
  if (ov == initCelOverview) celHighlightOneNode(openlayer, node, style);
  else regHighlightOneNode(openlayer, node, style);
}

/* Highlight right away a node on layer. Note: the layer must be
   visible for the highlight to show.

   Arguments:  layer, an OpenLayer layer.
               node,  a node structure.
               style, an OpenStyle object.
   Returns: nothing.
*/
/* REG-NET-WG */
function regHighlightOneNode(layer, node, style){
   if (!node) return;
//   var map    = initRegOverview.map;
//   var lonLat = mapNodesXYtoLonLat(map, node.x, node.y);
//   var origin = new OpenLayers.Geometry.Point(lonLat.lon, lonLat.lat);
   // If style is null, the default style of the layer applies.
//   var circle = new OpenLayers.Feature.Vector(origin, null, style);
//   layer.addFeatures([circle]);
    WG.RegHighlightList(layer, [node]);
}


/* create highlighting feature for open layers to add (via addFeatures).  This enables
   collecting up a bunch of features to call addFeatures with, all at once, rather than
   one at a time, which is very marginally faster. This draws a 

   Arguments:  node,  a node structure.
               layer, an OpenLayer layer.
               style, an OpenLayers style; if null, the default style of the layer applies.
   Returns: geometric rectangle.
*/
function celHighlightOneNodeReturn(layer, node, style){
  if (!node) return;
  var ov        = initCelOverview;
  var map       = ov.map;
  var zoomLevel = map.zoom;
  // For reactions only, if the bounding box is small, use it.
  // Otherwise use the central point.
  var lonLat1, lonLat2;

  if (node.type.toLowerCase() == 'reactions') {
    // For reactions, limit the highlighting to a small box.
    // The size of the box might depend on the zoom level.
    var boundBox  = [9,9,9,9,9,9,9,9,9,9,9,9,9][zoomLevel];
    var hwidth  = Math.max(2,Math.round(Math.min(Math.abs(node.x1 - node.x2), boundBox)/2));
    var hheight = Math.max(2,Math.round(Math.min(Math.abs(node.y1 - node.y2), boundBox)/2));
    lonLat1     = mapNodesXYtoLonLat(map, (node.x) - hwidth, (node.y) - hheight);
    lonLat2     = mapNodesXYtoLonLat(map, (node.x) + hwidth, (node.y) + hheight);
  } else {
    lonLat1  = mapNodesXYtoLonLat(map, node.x1, node.y1);
    lonLat2  = mapNodesXYtoLonLat(map, node.x2, node.y2);
  }

  var rec = [new OpenLayers.Geometry.Point(lonLat1.lon, lonLat1.lat),
             new OpenLayers.Geometry.Point(lonLat2.lon, lonLat1.lat),
             new OpenLayers.Geometry.Point(lonLat2.lon, lonLat2.lat),
             new OpenLayers.Geometry.Point(lonLat1.lon, lonLat2.lat)];
  var lines = new OpenLayers.Geometry.LinearRing(rec);
  var rec   = new OpenLayers.Feature.Vector(lines, null, style);
  return(rec);
}

/* Highlight right away a node on layer. Note: the layer must be visible
   for the highlight to show.

   Arguments:  node,  a node structure.
               layer, an OpenLayer layer.
               style, an OpenLayers style; if null, the default style of the layer applies.
   Returns: nothing.
*/
function celHighlightOneNode(layer, node, style){
  var ov        = initCelOverview;
  var map       = ov.map;
  var zoomLevel = map.zoom;
  // For reactions only, if the bounding box is small, use it.
  // Otherwise use the central point.
  var lonLat1, lonLat2;

  if (node.type.toLowerCase() == 'reactions') {
    // For reactions, limit the highlighting to a small box.
    // The size of the box might depend on the zoom level.
    var boundBox  = [9,9,9,9,9,9,9,9,9,9,9,9,9][zoomLevel];
    var hwidth  = Math.max(2,Math.round(Math.min(Math.abs(node.x1 - node.x2), boundBox)/2));
    var hheight = Math.max(2,Math.round(Math.min(Math.abs(node.y1 - node.y2), boundBox)/2));
    lonLat1     = mapNodesXYtoLonLat(map, (node.x) - hwidth, (node.y) - hheight);
    lonLat2     = mapNodesXYtoLonLat(map, (node.x) + hwidth, (node.y) + hheight);
  } else {
    lonLat1  = mapNodesXYtoLonLat(map, node.x1, node.y1);
    lonLat2  = mapNodesXYtoLonLat(map, node.x2, node.y2);
  }

  var rec = [new OpenLayers.Geometry.Point(lonLat1.lon, lonLat1.lat),
             new OpenLayers.Geometry.Point(lonLat2.lon, lonLat1.lat),
             new OpenLayers.Geometry.Point(lonLat2.lon, lonLat2.lat),
             new OpenLayers.Geometry.Point(lonLat1.lon, lonLat2.lat)];
  var lines = new OpenLayers.Geometry.LinearRing(rec);
  var rec   = new OpenLayers.Feature.Vector(lines, null, style);
  layer.addFeatures([rec]);
}

// Return all the frameids in tuples as text.
function tuplesToFrameidsTxt(tuples) {
  var r ="";
  for (var i = 0; i < tuples.length; i++) {
    r += " "+ tuples[i][0];
  }
  return r;
}

function nodesToFrameIds(nodes){
  var result = "";
  for (var i=0; i < nodes.length; i++) {
    result += nodes[i].frameId+' ';
  }
  return result;
}

/* Search function for autocompletion based on name and perhaps frame-id.
   Used for Compounds, Pathways, Reactions, and Genes.
   By default search only the prefix of the name field but use frameids or
   do a substring search if so requested.

   Arguments: id, a HTML string identifier.
              type, a string.
              includeFrameId, true => search frame id also.
              considerSubstr, true => search substring names also.
              ov, the overview structure (initRegOverview or initCelOverview)
   Returns: array of frameids (strings).
*/
var acSearchResults = new Array ();

function acSearch(id, type, includeFrameId, considerSubstr, ov){
  var str = document.getElementById(id).value;
  if (str.length == 0) return {results:[]};

  if (ov == initRegOverview)
    return acSearchLocally(str, type, includeFrameId, considerSubstr, ov);

  // Do a search using the server.
  var t = (type) ? type.toLowerCase() : '';
  switch (t) {
  case 'compounds'      : {acCelSearchServer(str, 'Compounds', 'COMMON-NAME', includeFrameId);
			   return acSearchResults;}
  case 'structures'     : return acCelSearchServer(str, 'Compounds', 'SMILES', includeFrameId);
  case 'reactions'      : return acCelSearchServer(str, 'Reactions', 'COMMON-NAME', includeFrameId);
  case 'pathways'       : return acCelSearchServer(str, 'Pathways',  'COMMON-NAME', includeFrameId);
  case 'reactionec'     : return acCelSearchServer(str, 'Reactions', 'EC-NUMBER',   includeFrameId);
  case 'genes'          : return acCelSearchServer(str, 'Genes',     'COMMON-NAME', includeFrameId);
  case 'enzymes'        : return acCelSearchServer(str, 'Enzymes',  'COMMON-NAME', includeFrameId);
  default: alertUser('Error acSearch, unknown type '+type);
  }
  return {results:[]};
}

/* Autocompletion search using the server.

   Returns: an array of strings
*/
function acCelSearchServer(str, type, slot, includeFrameId) {
  var result  = new Array();
  var orgid   = initCelOverview.orgid;
  var url     = "/"+orgid+"/ajax-slot-search?var=result&max=200&type="+type+"&object="+slot+"&substr="+encodeURIComponent(str);
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      handleServerAnswerResults(this);

      if (this.result != null &&
	  this.result.Results != null) result = this.result.Results;

      if (includeFrameId) {
	var url = "/"+orgid+"/ajax-slot-search?var=result&max=200&type="+type+"&object=FRAME-ID&substr="+encodeURIComponent(str);
	var request = new XMLHttpRequest();
	request.onreadystatechange = function () {
	  if (this.readyState == 4 && this.status == 200) {
	    handleServerAnswerResults(this);

	    if (this.result != null &&
		this.result.Results != null) result = result.concat(this.result.Results);
	  }
	};
	request.open("GET", url, true);
	request.setRequestHeader("Accept", "text/*");
	request.send();
      }
       acSearchResults = result;}};
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function acCelSlotValue(obj, type, slot, fn) {
  var resultLabels = new Array ();
  var orgid   = initCelOverview.orgid;
  var url     = "/"+orgid+"/ajax-get-slot-values?max=200&type="+type+"&object="+obj+"&slot="+encodeURIComponent(slot);
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      simpleHandleServerAnswerResults(this);
      if (request.result != null)
	for (i=0; i<request.result.length; i++) {
	  resultLabels[i] = (request.result[i].label); };
      fn(resultLabels[0]); }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function simpleHandleServerAnswerResults(request){
  var result = null;
  showOvNotBusy();
  try {
    // The JavaScript is in responseText. The eval should assign a value to result.
    result = eval(request.responseText);
  } catch(e) {
    showServerError('(Error 5) A Web server error occurred during auto-completion', e, request.responseText);
    return;
  };
  request.result = result; }

/* The request object has received an answer from the server.

   Sort the array of strings bound to field Results in variable result.
   Pass the array back via the result field of request.
*/
function handleServerAnswerResults(request){
  var result = null;
  showOvNotBusy();
  try {
    // The JavaScript is in responseText. The eval should assign a value to result.
    eval(request.responseText);
  } catch(e) {
    showServerError('(Error 5) A Web server error occurred during auto-completion', e, request.responseText);
    return;
  };

  if (result != null && result.Results != null) result.Results.sort();
  request.result = result;
}


/*
   Autocompletion search done locally. can be used for reg or cel overview.

   Do a (substring or exact) search of objects based on their name or
   frameid using the string str. This is done
   using the frames or nodes already sent by the server. No server
   communication is done by this search function.

   Arguments: see acSearch.
   Returns: array of frameids (strings).

*/
/* REG-NET-WG */
function acSearchLocally(str, type, includeFrameId, considerSubstr, ov){
  var stringName           = document.getElementById(str).value;
  var op;
  if (considerSubstr) op = function (x) { return x >= 0 }
  else op = function (x) { return x == 0 };

    var zoomLevel = WG.GetCurrentZoomLevel(); // ov.map.zoom;
    var nodes     = (ov === initCelOverview) ? ov.zoomLevels[zoomLevel].nodes : WG.wgactive.nodeDesc;
  var s = stringName.toLowerCase();
    var t = (type) ? type.toLowerCase() : (initRegOverview.orgid != null) ? "all-genes" : '';
  var result = new Array();
  for (var i=1; i < nodes.length; i++) {
      if (nodes[i] == null) { console.log ("null frame: " + i); 
} else {
    if (nodes[i][2] && nodes[i][2].toLowerCase() != t) continue;
    if (op(nodes[i][3].toLowerCase().indexOf(s))
        && !(result.indexOf(nodes[i][3]) >= 0)) result.push(nodes[i][3]);
    if (includeFrameId && op(nodes[i][0].toLowerCase().indexOf(s))
        && !(result.indexOf(nodes[i][0]) >= 0)) result.push(nodes[i][0]);
}}
  result.sort();
  return result;
}

/* Search for a frame that has its frame-id or gene name equal to the given name.

  Arguments: stringName, a string.
             type, a string.
  Returns: array of node structures (could be empty).

*/
function searchCelNameOrFrameID(stringName, type, continuation){
  var s = stringName.toLowerCase();
  var t = type.toLowerCase();
 searchCelNameNodes(s, nodeTypeToURLtype(t), continuation);
}

function nodeTypeToURLtype(type){
  switch(type.toLowerCase()){
  case "proteins": return "protein";
  case "complexes": return "protein";
  case "genes":     return "gene";
  case "compounds": return "compound";
  case "pathways":  return "pathway";
  case "reactions": return "reaction";
  case "enzymes":   return "enzyme";
  case "all-trnas": case "trnas": case "rnas": return "rna";
  }
  return type;
}

/*  Request frameids to server based on a gene, enzyme or pathway name or frameid.
    We use the server to answer such a question since the search is not solely based
    on the name of the objects.

    Arguments: a name of an object (gene, pathway, enzyme), a string.
               type, 'gene', 'pathway', 'enzyme'
    Returns: a vector of node structures.
*/
function searchCelNameNodes(name, type, fn){
  var s         = name.toLowerCase();
  var t         = type.toLowerCase();
  var orgid     = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var url   = "/"+orgid+"/cel-overview-"+t+"-name"+(t=="gene"?"s":"")+"-to-nodes?zoomlevel="+zoomLevel+"&object="+encodeURIComponent(s);
  getRequestAsync(url, fn);
}

function equalToAName(node, name){
  var lname = name.toLowerCase();
  if (node.nas) {
    for (var i=0; i < node.nas.length; i++){
      if (node.nas[i].toLowerCase() == lname) return node.nas[i];
    }
  }
  if  (node.name && node.name.toLowerCase() == lname) return node.name;
  return false;
}

/*  Search for nodes based on queryString and type. The search is typically
    based on the queryString as a substring.

    We use the server to answer such a question. For gene type the
    server maps the genes found to frame objects (compounds, enzymes,
    reactions) in the overview.

    Arguments: stringName, a string.
               type, a string describing the type of objects to search.
                     possible values are 'enzymes', 'compounds', 'genes', 'pathways', 'reactions',
                     'reactionec'.
               fn, a continuation fn that highlights.  The fn's argument is nodes
    Returns: a vector of frame ids.
*/
function searchSubstringsCelServer(queryStringIn, type, fn){
    var queryString = queryStringIn.replace(/(<([^>]+)>)/gi, ""); // general purpose 'removeHTMLmarkup' regexp
    var t     = type.toLowerCase();
    var orgid = initCelOverview.orgid;
    var zoomLevel = WG.GetCurrentZoomLevel();
    var url;
    switch (t) {
    case 'compounds':  case 'reactions':  case 'pathways':  case 'genes':  case 'enzymes':
	url  = '/'+orgid+'/cel-overview-substr-search?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(queryString)+'&type='+t;
	break;
    case 'reactionec':
	url  = '/'+orgid+'/cel-overview-rxn-ec-search?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(queryString);
	break;
    default: alertUser("Error, function searchSubstringsCelServer was called with unknown type '"+type+"'.");
	return;
    }
    getRequestAsync(url, fn);
}

/* The request object has received an answer from the server.
   Process the responseText and returns the nodes bound to
   field result in request.
*/
function handleServerAnswerNodes(request){
  var result = null;
  showOvNotBusy();
  try {
    // The JavaScript is in responseText. The eval should assign a value to result.
    eval(request.responseText);
  } catch(e) {
    showServerError('(Error 6) A Web server error occurred when searching ', e, request.responseText);
    request.result = null;
    return;
  };

  // If the result structure has an errMsg field set to a non-null string,
  // an error occurred (given by the server) and the error message needs to
  // be displayed. There is still a possible result.
  if (result != null && result.errMsg != null && result.errMsg.length > 0) {
    var errorDialog = new YAHOO.widget.Dialog("errorDialog",
      { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
        buttons: [{text:"Dismiss", handler: function(){errorDialog.hide()}, isDefault:true }
        ]
      });
    errorDialog.setHeader("Searching Warning");
    errorDialog.setBody(result.errMsg);
    errorDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
    errorDialog.render(document.body);
  }

  request.result = (result == null) ? result : result.nodes;
}


/* All the handlers for highlighting

   These functions are referenced in the celOv.shtml file
   to handle searching and highlighting when the "highlight" button
   is clicked in the one of the many dialogues.

*/

/*
   All the following handle functions will initiate a call to the
   server to search for objects based on name, frame ids, or
   substring. The results are used to create a layer for highlighting
   on the cel map.

*/
function handleCelHighlightGeneNameOrFrameID(){
  var queryString   = document.getElementById('celGeneNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogGeneNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("Gene '"+queryString+"'", nodes, queryString, 'gnids');
  };

  searchCelNameOrFrameID(queryString, "genes", continuation);
}

function handleCelHighlightGeneSubstring(){
  var queryString   = document.getElementById('celGeneSubstringName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogGeneSubstring.hide();
  var continuation = function (nodes) {
    celHighlight("Gene '"+queryString+"'", nodes, queryString, 'gsubs');
  };
  searchSubstringsCelServer(queryString, "genes", continuation);
}


/* the user has selected a value for the regulation code. 
  Gather genes based on that selection and highlight the nodes.*/
function handleCelHighlightGeneRegulon(){
  var queryString   = document.getElementById('regulon').value;
 var q = document.getElementById('regulon').selectedOptions[0].text;
//('celGeneRegulonName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogGeneRegulon.hide();

  var continuation = function (nodes) {
    celHighlight("regulon'"+q+"'", nodes, queryString, 'gregs');
  };
  celOverviewhighlightGenebyRegulon(queryString, continuation);
  
}

/* the user has selected a value for the activators. 
  Gather reactions based on that selection and highlight the nodes.*/
function handleCelHighlightReactionActivator(){
    var SelectedOptions2 = document.getElementById('activator');
    var cnt = 0; var queryString ='';
    for (var i=0;i<SelectedOptions2.length;i++) {
	if (SelectedOptions2.options[i].selected) {
	    cnt++;
	    queryString  +=  SelectedOptions2.options[i].value + "*";
	}}
    if (!celSearchIsOk(queryString)) return;
    celDialogReactionActivator.hide();
  var continuation = function (nodes) {
    celHighlight("activator", nodes, queryString, 'ract');
  }
  celOverviewhighlightReactionbyActivator(queryString,continuation);
}
/* the user has selected a value for the inhibitors. 
  Gather reactions based on that selection and highlight the nodes.*/
function handleCelHighlightReactionInhibitor(){
  var SelectedOptions1 = document.getElementById('inhibitor');
  var cnt = 0; var queryString ='';
  for (var i=0;i<SelectedOptions1.length;i++) {
    if (SelectedOptions1.options[i].selected) {
      cnt++;
      queryString  +=  SelectedOptions1.options[i].value + "*";
    }}
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionInhibitor.hide();
  var continuation = function (nodes) {
    celHighlight("inhibitor", nodes, queryString, 'rinb');
  };
  celOverviewhighlightReactionbyInhibitor(queryString,continuation);
}

/* the user has selected a value for the cofactors. 
  Gather reactions based on that selection and highlight the nodes.*/
function handleCelHighlightReactionCofactor() {
  var SelectedOptions = document.getElementById('cofactor');
  var cnt = 0; var queryString ='';
  for (var i=0;i<SelectedOptions.length;i++) {
    if (SelectedOptions.options[i].selected) {
      cnt++;
      queryString  +=  SelectedOptions.options[i].value + "*";
    }}
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionCofactor.hide();
  var continuation = function (nodes) {
    celHighlight("cofactor", nodes, queryString, 'rcof');
  }
  celOverviewhighlightReactionbyCofactor(queryString,continuation);
}


function handleCelHighlightCompoundNameOrFrameID(){
  var queryString   = document.getElementById('celCompoundNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogCompoundNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("Compound '"+queryString+"'", nodes, queryString, 'cnids');
  };
  searchCelNameOrFrameID(queryString, "compounds", continuation);
}

function handleCelHighlightEnzymeNameOrFrameID(){
  var queryString   = document.getElementById('celEnzymeNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogEnzymeNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("Enzymes '"+queryString+"'", nodes, queryString, 'enids');
  };
  searchCelNameOrFrameID(queryString, "enzymes", continuation);
}

function handleCelHighlightEnzymeSubstring(){
  var queryString   = document.getElementById('celEnzymeSubstringName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogEnzymeSubstring.hide();
  var continuation = function (nodes) {
    celHighlight("Enzymes '"+queryString+"'", nodes, queryString, 'esubs');
  };
  searchSubstringsCelServer(queryString, "enzymes", continuation);
}


function handleCelHighlightReactionNameOrFrameID(){
  var queryString   = document.getElementById('celReactionNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("Reaction '"+queryString+"'", nodes, queryString, 'rnids');
  }
  searchCelNameOrFrameID(queryString, "reactions", continuation);
}

function handleCelHighlightReactionEnzyme(){
  var queryString   = document.getElementById('celReactionEnzyme').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionEnzyme.hide();

  var continuation = function (nodes) { 
    celHighlight("Enzymes '"+queryString+"'", nodes, queryString, 'esubs');
  };

  searchSubstringsCelServer(queryString, 'enzymes', continuation);
}

function handleCelHighlightReactionEC(){
  var queryString   = document.getElementById('celReactionEC').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionEC.hide();

  var continuation = function (nodes) {
    celHighlight("Reaction '"+queryString+"'", nodes, queryString, 'recns');
  };

  searchSubstringsCelServer(queryString, 'reactionec', continuation);
}

/* the user has selected a value for the evidence code. 
  Gather reactions based on that selection and highlight the nodes.*/

function handleCelHighlightReactionEvidence(){
  var queryString   = document.getElementById('evidence2').value;
  var q = document.getElementById('evidence2').selectedOptions[0].text;
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionEvidence.hide();

  var continuation = function (nodes) {
    celHighlight("Reaction evidence'"+q+"'", nodes, queryString, 'revis');
  };
  
  celOverviewhighlightReactionbyEvidence(queryString, continuation);
}

/* the user has selected a value for the reaction CCO. 
  Gather reactions based on that selection and highlight the nodes.*/
function handleCelHighlightReactionCCO(){
  var queryString   = document.getElementById('cco').value;
//('celGeneRegulonName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionCCO.hide();
  var continuation = function (nodes) {
    celHighlight("cco", nodes, queryString, 'rcco');
  };
  celOverviewhighlightReactionbyCCO(queryString, continuation);
}

/* the user has entered a value for the cofactor. 
  Gather reactions based on that selection and highlight the nodes.*/

function handleCelHighlightCoFactorNameOrFrameID() {
  var queryString   = document.getElementById('celCoFactorNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogCoFactorNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("CoFactors '"+queryString+"'", nodes, queryString, 'rcos');
  }
  celOverviewhighlightReactionbyCoFactorName(queryString,continuation);
}

/* the user has entered a value for the cofactor substring. 
  Gather reactions based on that selection and highlight the nodes.*/

function handleCelHighlightCoFactorSubstring() {
  var queryString   = document.getElementById('celCoFactorSubstring').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogCoFactorSubstring.hide();
  var continuation = function (nodes) {
    celHighlight("CoFactors '"+queryString+"'", nodes, queryString, 'cosub');
  };
  celOverviewhighlightReactionbyCoFactorSubstring(queryString,continuation);
}

/* the user has entered a value for the cofactor structure. 
  Gather reactions based on that selection and highlight the nodes.*/
function handleCelHighlightCoFactorStructure(){
  var queryString   = document.getElementById('celCoFactorStructure').value;
if (!celSearchIsOk(queryString)) return;
  celDialogCoFactorStructure.hide();
  var continuation = function (nodes) {
  celHighlight("CoFactors '"+queryString+"'", nodes, queryString, 'costr');
  }
  celOverviewhighlightReactionbyCoFactorStructure(queryString,continuation);
}

function celOverviewhighlightReactionbyCoFactorName(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-cofactor-name-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function celOverviewhighlightReactionbyCoFactorSubstring(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-cofactor-subs-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
   getRequestAsync(url, fn);
}

function celOverviewhighlightReactionbyCoFactorStructure(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-cofactor-str-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function handleCelHighlightActivatorNameOrFrameID(){
  var queryString   = document.getElementById('celActivatorNameOrFrameID').value;
if (!celSearchIsOk(queryString)) return;
  celDialogActivatorNameOrFrameID.hide();
  var continuation = function (nodes) {
  celHighlight("Activators '"+queryString+"'", nodes, queryString, 'acos');
  }
  celOverviewhighlightReactionbyActivatorName(queryString,continuation);
}

function handleCelHighlightActivatorSubstring() {
  var queryString   = document.getElementById('celActivatorSubstring').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogActivatorSubstring.hide();
  var continuation = function (nodes) {
    celHighlight("Activators '"+queryString+"'", nodes, queryString, 'asubs');
  };
  celOverviewhighlightReactionbyActivatorSubstring(queryString,continuation);
}

function handleCelHighlightActivatorStructure(){
  var queryString   = document.getElementById('celActivatorStructure').value;
if (!celSearchIsOk(queryString)) return;
  celDialogActivatorStructure.hide();
  var continuation = function(nodes) {
    celHighlight("Activators '"+queryString+"'", nodes, queryString, 'astr');
  }
  celOverviewhighlightReactionbyActivatorStructure(queryString,continuation);
}

function celOverviewhighlightReactionbyActivatorName(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-activator-name-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function celOverviewhighlightReactionbyActivatorSubstring(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-activator-subs-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url,fn);
}

function getRequestAsync (url,fn) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      handleServerAnswerNodes(this);
      fn(this.result); }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function postRequestAsync (url,fn,params) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      handleServerAnswerNodes(this);
      fn(this.result); }
  };
  request.open("POST", url, true);
  request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  request.send(params);
}

function celOverviewhighlightReactionbyActivatorStructure(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-activator-str-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url,fn);
}

function handleCelHighlightInhibitorNameOrFrameID(){
  var queryString   = document.getElementById('celInhibitorNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogInhibitorNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("Inhibitors '"+queryString+"'", nodes, queryString, 'rios');
  };
  celOverviewhighlightReactionbyInhibitorName(queryString,continuation);
}

function handleCelHighlightInhibitorSubstring(){
  var queryString   = document.getElementById('celInhibitorSubstring').value;
if (!celSearchIsOk(queryString)) return;
  celDialogInhibitorSubstring.hide();
  var continuation = function (nodes) {
    celHighlight("Inhibitors '"+queryString+"'", nodes, queryString, 'isubs');
  }
  celOverviewhighlightReactionbyInhibitorSubstring(queryString,continuation);
}

function handleCelHighlightInhibitorStructure(){
  var queryString   = document.getElementById('celInhibitorStructure').value;
if (!celSearchIsOk(queryString)) return;
  celDialogInhibitorStructure.hide();
  var continuation = function (nodes) {
    celHighlight("Inhibitors '"+queryString+"'", nodes, queryString, 'istr');
  };
  celOverviewhighlightReactionbyInhibitorStructure(queryString,continuation);
}

function celOverviewhighlightReactionbyInhibitorName(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-inhibitor-name-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url,fn);
}

function celOverviewhighlightReactionbyInhibitorSubstring(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-inhibitor-subs-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url,fn);
}

function celOverviewhighlightReactionbyInhibitorStructure(query,fn){
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-inhibitor-str-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url,fn);
 }

/* to get values from the form for Pathways with Curation values */

function getPathwayFormData(){
    var operator = document.getElementById('operator').value;
    var citations =document.getElementById('citations').value;
    var comments = document.getElementById('comments').value;
    var evidence = document.getElementById('evidence').value;
    handleCelHighlightPathwayCuration(operator,citations,comments,evidence);
}

/* The user selected values for the curation form. Gather the pathways based on
   values selected, and highlight the nodes for the pathways.
*/
function handleCelHighlightPathwayCuration(operator, citations, comments, evidence) {
  var queryString   = operator.concat(" ").concat(citations).concat(" ").concat(comments).concat(" ").concat(evidence);
  if (!celSearchIsOk(queryString)) return;
  celDialogPathwayCuration.hide();
  var continuation = function (nodes) {
    celHighlight("Curated Pathways", nodes, queryString, 'pcids');
  };
  celOverviewhighlightPathwayByCuration(queryString,continuation);
}

/* to get values from the form for Enzymes with Curation values */

function getFormData(){
      var operator=document.getElementById('operator1').value;
      var citations=document.getElementById('citations1').value;
      var comments = document.getElementById('comments1').value;
      var evidence = document.getElementById('evidence1').value;
    handleCelHighlightEnzymeCuration(operator,citations,comments,evidence);
}

/* The user selected values for the curation form. Gather the reactions based on
   values selected, and highlight the nodes for the reactions.*/

function handleCelHighlightEnzymeCuration(operator, citations, comments, evidence){
    var queryString   = operator.concat(" ").concat(citations).concat(" ").concat(comments).concat(" ").concat(evidence);
    if (!celSearchIsOk(queryString)) return;
  celDialogEnzymeCuration.hide();

  var continuation = function (nodes) {
    celHighlight("Curated Proteins" ,nodes,  queryString, 'rcids');
  };
  
  celOverviewhighlightEnzymeByCuration(queryString, continuation);
}


function handleCelHighlightPathwayNameOrFrameID(){
  var queryString   = document.getElementById('celPathwayNameOrFrameID').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogPathwayNameOrFrameID.hide();
  var continuation = function (nodes) {
    celHighlight("Pathway '"+queryString+"'", nodes, queryString, 'pnids');
  }
  searchCelNameOrFrameID(queryString, "pathways",continuation);
}

function handleCelHighlightPathwaySubstring() {
  var queryString   = document.getElementById('celPathwaySubstringName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogPathwaySubstring.hide();
  var continuation = function (nodes) {
    celHighlight("Pathway '"+queryString+"'", nodes, queryString, 'psubs');
  };
  searchSubstringsCelServer(queryString, "pathways",continuation);
}

/* The user selected values for the pathway evidence. Gather the pathways based on
   value selected, and highlight the nodes for the pathways.*/
function handleCelHighlightPathwayEvidence(){
  var queryString   = document.getElementById('evidence3').value;
    var q = document.getElementById('evidence3').selectedOptions[0].text;
   if (!celSearchIsOk(queryString)) return;
  celDialogPathwayEvidence.hide();
  var continuation = function (nodes) {
    celHighlight("Pathway evidence'"+q+"'", nodes, queryString, 'pevis');
  };
  celOverviewhighlightPathwaybyEvidence(queryString,continuation);
}

function handleCelHighlightReactionSubstring(){
  var queryString   = document.getElementById('celReactionSubstringName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogReactionSubstring.hide();

  var continuation = function (nodes) {
    celHighlight("Reaction '"+queryString+"'", nodes, queryString, 'rsubs');
  };
  
  searchSubstringsCelServer(queryString, "reactions", continuation);
}

function handleCelHighlightCompoundSubstring() {
  var queryString   = document.getElementById('celCompoundSubstringName').value;
  if (!celSearchIsOk(queryString)) return;
  celDialogCompoundSubstring.hide();
  var continuation = function (nodes) {
    celHighlight("Compound '"+queryString+"'", nodes, queryString, 'csubs');
  };
  searchSubstringsCelServer(queryString, "compounds", continuation);
}

/*
   Called when the highlight button is clicked from the dialog
   window.
*/
function handleCelHighlightMixing(){
  var textO   = document.getElementById('celTextMixing');
  // The complete entry by the user.
  var textStr = textO.value;
  if (!celSearchIsOk(textStr)) return;
  celPlayXnip(textStr);
}

/* Create a new layer for the mixing case and do the highlighting.

*/
function celPlayXnip(textStr) {
  // Leave it as a continuation as the searchMixingCelServer might need
  // a continuation if we find out that the async: false creates
  // too much trouble (timeouts) and we need to set async: true in searchMixingCelServer.
  var continuation = function(result){
    // It could be Omics Viewer data or plain highlighting.
    if (result && result.colors) { // Omics Viewing.
      animateOmics(result, initCelOverview);
    }
    else if (result && result.nodes && result.nodes.length > 0) {
      // Highlight.
      celHighlight("Names/Frame Ids", result.nodes, textStr, 'xnids');
    }
  }
  searchMixingCelServer(textStr, continuation);
}

/* Translate the frame ids and/or names into frame ids.
   Handle also omics expression data for the Omics Viewer.
   Each name could be followed by a value.

   Arguments: textStr, a string containing the frame ids and/or names.
   Returns: a result structure.
*/
function searchMixingCelServer(textStr,fn) {

  var handleResults =
    function (request) {
        // alert(request.responseText);
      var result = null;
      showOvNotBusy();
      try {
        // This will assign a value to result, if we got an answer from the server.
        // alert(request.responseText);
        eval(request.responseText);
      }
      catch (e) {
        showServerError('(Error 9) A Web server error occurred during the search',e,request.responseText);
        result = null;
      }

      // The result is a structure {errMsg: ..., nodes:...}
      if (result != null && result.errMsg != null && result.errMsg.length > 0) {
        var errorDialog = new YAHOO.widget.Dialog("errorDialog",
          { width: "40em", fixedcenter: true, modal: false, visible: true, draggable: true,
            zindex: 22000,
            buttons: [{text:"Dismiss", handler: function(){errorDialog.hide()}, isDefault:true }]
          });
        errorDialog.setHeader("Highlight Based on Names and Frame Ids");
        errorDialog.setBody(result.errMsg);
        errorDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
        errorDialog.render(document.body);
        // Do not highlight. Leave the dialog open such that the user
        // can edit the input text box to correct errors.
      }
      else
      if (result == null || ((result.nodes == null || result.nodes.length == 0)
                             && (result.fidColors == null || result.fidColors.length == 0) // Omics Viewer case.
                             )
          ) {
        // No nodes to highlight and no Omics data.
        var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
          { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
            buttons: [{text:"Ok", handler: function(){noHighlightingDialog.hide()},
                       isDefault:true }
            ]
          });
        noHighlightingDialog.setHeader("Highlight Warning");
        noHighlightingDialog.setBody("No object was found for this Cellular Overview based on the given names and/or frame ids.");
        noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
        noHighlightingDialog.render(document.body);
      }

      // There is no error message to display and some nodes were returned.
      // Close the user dialog window.
      if (celDialogMixing) celDialogMixing.hide();

      // Keep the whole result as it either contain nodes or more info for
      // the Omics Viewer.
      request.result = result;
    };

  showOvBusy(); // The handleResults fn will turn it off.

  var orgid     = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var url       = "/"+orgid+"/cel-overview-mixing-to-nodes?zoomlevel="+zoomLevel;
  var s = "object="+textStr;

  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      handleResults(this);
      fn(this.result); }
  };
  request.open("POST", url, true);
  request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  request.send(s);
}

/* The user can send a local file to the server to have highligthing done based on gene names.

   The file contains a gene name on each line.

   The file is sent to the server which parses it, then returns a JavaScript array
   of nodes that correspond to proteins, reactions, etc. We are using
   YUI upload mechanism to send the file.

*/
var onUploadButtonClick = function(e){
  var geneFileName = document.getElementById('geneFileName').value;
  if (geneFileName == null || geneFileName.length == 0) {
    alertUser('No gene file is provided. Please enter a gene file or cancel.');
    return;
  }
  celDialogGeneFile.hide();

  // The second argument of setForm is crucial,
  // which tells Connection Manager this is a file upload form.
  YAHOO.util.Connect.setForm('celGeneFile', true);

  var uploadHandler = {
    upload: function(o) {
      var result = null;
      var evalText;
      showOvNotBusy();
      
      try {
        // For some unknown reason, between the server and
        // the client a transformation is done that converts
        // the '<' into &lt;, etc. So apply some ad-hoc transformation
        // back into proper HTML tags.
        // Remove any html <pre ...>  </pre> inserted during transmission.
        // mt: this should no longer be necessary
        evalText = unescape((o.responseText).replace(/<pre>/,'').replace('</pre>','')).replace(/&lt;/g,'<').replace(/&gt;/g,'>');
        eval(evalText);
      } catch(e) {
        result = null;
        showServerError('(Error 7) A Web server error occurred during the upload of the file', e, evalText);
      };

      // If the result structure has an errMsg field set to a non-null string,
      // an error occurred (given by the server) and the error message needs to
      // be displayed. There is still a possible result.
      
      if (result != null && result.errMsg != null && result.errMsg.length > 0) {
        var errorDialog = new YAHOO.widget.Dialog("errorDialog",
          { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
            buttons: [{text:"Dismiss", handler: function(){errorDialog.hide()}, isDefault:true }
            ]
          });
        errorDialog.setHeader("Upload Gene File Warning");
        // Insert newlines for formatting if two warnings appear
        let errMess = result.errMsg;
        let find = "The following gene names are unknown:";
        let loc = errMess.indexOf(find);
        if (loc !== -1 && loc !== 0) {
          let afterLoc = errMess.substring(loc + find.length);
          let forStr = errMess.substring(0, loc) + "<p>" + find + afterLoc + "</p>";
          errorDialog.setBody(forStr);
        }
        else
          errorDialog.setBody(result.errMsg);
        errorDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
        errorDialog.render(document.body);
      }
      else
      if (result == null || result.nodes == null || result.nodes.length == 0) {
        var noHighlightingDialog = new YAHOO.widget.Dialog("noHighlightingDialog",
          { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
            buttons: [{text:"Ok", handler: function(){noHighlightingDialog.hide()},
                       isDefault:true }
            ]
          });
        noHighlightingDialog.setHeader("Highlight Warning");
        noHighlightingDialog.setBody("No object was found by the server based on the gene file.");
        noHighlightingDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
        noHighlightingDialog.render(document.body);
        return;
      }
      showOvNotBusy();
      // paley:Mar-21-2019 Replace 'gfile' w/ 'gnids' and combine all gene names
      // into queryString. This may give unreasonably long urls, but previous
      // scheme didn't give any useful url.
      celHighlight("Gene file "+geneFileName, result.nodes, result.geneNames.join('*'), 'gnids', result.geneNames);
    }
  };
  showOvBusy();
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  YAHOO.util.Connect.asyncRequest('POST', '/'+orgid+'/cel-overview-gene-names-to-nodes?zoomlevel='+zoomLevel,
                                  uploadHandler);
};

YAHOO.util.Event.on('uploadButton', 'click', onUploadButtonClick);

/* ::::::::::::::::::::::::::: Omics viewer ::::::::::::::::::::::::::: */

/*
   When the Omics viewer is active a timeout fn is on. It is being called
   every few seconds that the user set it in the Omics control panel.
   See fn omicsNextAnimationStep.

   All the layers (aka overlays) must be ready to be set visible on
   the overview. Therefore, if a zoom-in or -out occur during the
   time the Omics Viewer is on, it should be turned off, the set
   of Omics layer must be recalculated, etc. This resetting is typically done
   by celZoomEnd or regZoomEnd depending on which overview is shown.

   In the case of the Reg Ov, chaging the layout, or redisplaying only
   the highlighted genes must also reset the Omics layers.

   Most of what the following functions do is to let the user interact
   with the Omics control panel and maintain all various values displayed
   coherent with what the user selects.
*/


function omicsStyle(color, zoomLevel) {
  return {pointRadius: [3,3,4,4,5,6,6,7,8,9,10,10][zoomLevel],
          color: color, strokeColor: color,
          fillColor: color, fillOpacity: 0.6};
}

// The function that will get the Omics data from the server.
// paley:May-9-2019 Updated this to treat the different viewer types
// orthogonally, and submit to as many of them as are checked.
// paley:Jun-15-2020 Replace YUI ajax call w/ jquery ajax call to address bug 8316.
var submitOmicsButtonClick = function(e, ov){
    var form = document.getElementById('omicsForm');
    if (!checkOmicsFormData(form, ov)) return;
    dialogOmics.hide();

    if (form.display[0].checked) { // This diagram
	// billingt: Sep-13-2013 since omics data will be returned for all zoomlevels, the server has to have all of them generated.
	var ovs = (ov === initCelOverview) ? "cel" : "reg";
	window.name = ovs;
	if (ovs == "cel") 
            for (var x = 0; x < ov.nbZoomLevels; x++)
		ensureDescriptorZoomLevelExist(x);
	showOvBusy('<h3>Processing Data...</h3> Note that submitting a large data file might take more than 30 seconds to complete.');
        // The second argument of setForm is crucial,
        // which tells Connection Manager this is a file upload form.
	//YAHOO.util.Connect.setForm('omicsForm', true);
	var orgid = ov.orgid;
	receiveOmicsData.ov = ov;
	var zoomLevel = WG.GetCurrentZoomLevel();
	/*
	YAHOO.util.Connect.asyncRequest('POST', '/'+orgid+'/overview-expression-map-javascript?ov='+ovs+'&zoomlevel='+zoomLevel,
					receiveOmicsData);
        */
	var form = $j('#omicsForm')[0];
	var data = new FormData(form);
	data.append("ov", ovs);
	data.append("zoomLevel", zoomLevel);
	var url = '/'+orgid+'/overview-expression-map-javascript';
	$j.ajax({
	    type: "POST",
	    url: url,
	    enctype: 'multipart/form-data',
	    data: data,
	    processData: false,
	    contentType: false,
	    timeout: 4*60*1000, // milliseconds. Wait for more than two minutes.
	    success: function (response) {
		receiveOmicsResult ({responseText: response}, ov);
	    },
	    error: failOmicsRequest
	});
	    
    }
    if (form.display[1].checked) { // PPS table
        setFormURL(form, 'overview-expression-map');
        form.target='pwytable';
        form.submit();

    }
    if (form.display[2].checked) { // Pathway Collage
        setFormURL(form, 'omics-subset-overview');
        form.target='pwycollage';
        form.submit();
    }
    if (form.display[3].checked) { // Omics Dashboard
        setFormURL(form, 'omics-data-for-dashboard');
        form.target='dashboard';
        form.submit();
    }
};


let omicsData = null;

function downloadOmics(fileName) {
    if (!omicsData) {
	console.error("No omics data was loaded");
	return false;
    }
    let data = omicsData;
    let omicsFile = document.createElement("a");
    let num = Math.floor(Math.random() * 99);
    let divId = 'omicsFile' + num.toString();
    
    omicsFile.setAttribute('id', divId);
    
    let file = new Blob([JSON.stringify(data)], {type: "text/plain"});
    
    omicsFile.href = URL.createObjectURL(file);
    omicsFile.download = fileName;
    omicsFile.click();
    
    setTimeout(200, function(divId) {
	let oldId = document.getElementById(divId);
	oldId.parentNode.removeChild(divId);
    });
}

function loadOmicsFile() {
    let fileSel =  document.createElement("input");
    fileSel.setAttribute("type", "file");
    fileSel.setAttribute("id", "UploadOmics");
    
    fileSel.onchange = e => {
	let file = e.target.files[0];
	let reader = new FileReader();
	reader.readAsText(file, "UTF-8");
	reader.onload =  function() {
	    let readFile = reader.result;
	    let omicsFile = JSON.parse(readFile);
	    console.log(omicsFile);
	    animateOmics(omicsFile, initCelOverview);
	}
    }
    
    if (!document.getElementById("UploadOmics"))
	document.body.append(fileSel);
    
    document.body.onclick = e => {
	fileSel.click();
	document.body.onclick = null;
    }
}

/*
    The Omics data was sent and this fn gets call to retrieve the results of the processing of that data.

    If it is not an animation, a table of statistics is sent, then the parsed data; otherwise just the data
    with no table of statistics.

 */
 function receiveOmicsResult (o, ov) {
  var result = null;
    showOvNotBusy();
    try {
      // logMsg('receiveOmicsData Got '+o.responseText);
      eval(o.responseText);
    } catch(e) {
      showServerError('(Error 8) A Web server error occurred when processing Omics data', e, o.responseText);
      return;
    };

    // If the result structure has an errMsg field set to a non-null string,
    // an error occurred (given by the server) and the error message needs to
    // be displayed. No expression data is displayed.
    if (result == null || (result.errMsg != null && result.errMsg.length > 0)) {
      
      var errorDialog = new YAHOO.widget.Dialog("errorDialog", 
          { width: "30em", fixedcenter: true, modal: true, visible: true, draggable: false,
            buttons: [{text:"Dismiss", handler: function(){errorDialog.hide()}, isDefault:true }
            ]
          });
      errorDialog.setHeader("Submit Omics Data Error");
      if (result == null) errorDialog.setBody("No data was returned by the server.");
      else errorDialog.setBody(result.errMsg);
      errorDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
      errorDialog.render(document.body);
      return;
    }
    // Add the latest dataset to the cookie
    YAHOO.util.Connect.asyncRequest('GET', '/omics-datasets/set-recent');
    // There might be a report on the parsed Omics data. Show it in its own dialog window.
    if (result.table.length > 0) {
      // The HTML tags were hidden with a '~', change that back.
      var htmlReport = result.table.replace(/~/g,'<');
      reportTableOmicsDialog.cfg.setProperty('width',  "40em");
      reportTableOmicsDialog.cfg.setProperty('height', "350px");
      reportTableOmicsDialog.setBody(htmlReport);
      reportTableOmicsDialog.render(document.body);
      reportTableOmicsDialog.moveTo(500, 15);
      // reportDialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
      reportTableOmicsDialog.show();
    }
     if (!ov) ov = this.ov;
     omicsData = result;
    animateOmics(result, ov);
  }

/*
  This is the main entry point for receiving the Omics data and
  starts its animation.

  This object can be used by fn asyncRequest from the YAHOO library.
  It has an upload handler that will receive the JavaScript Omics data
  and starts the Omics Viewer if the data is received without an error
  message in it.

  This object works with a Yahoo asyncrequest for an upload form
  or a direct request.

*/
var receiveOmicsData = {
  ov: null,
  timeout: 4*60*1000, // milliseconds. Wait for more than two minutes.
  success: receiveOmicsResult,
  failure: failOmicsRequest,
  upload:  receiveOmicsResult
};


/* This the top level function to start the Omics Viewer given
   the data from the server. Can be used by the reg or cel overview.

   This is typically called right after receiving the Omics data
   from the server. See fn submitOmicsButtonClick.

   Open the control panel and starts the Omics animation if need
   be. Handles also the single experiment case.

   Arguments: result, structure received from the server.
                      See fn createLayersAnimation for details.
              ov, an overview structure.
   Returns: nothing, but opens the omics panel and starts animation.
*/
function animateOmics(result,ov) {
  if (ov == initCelOverview)
  animateOmicsCel(result,ov);
  else animateOmicsReg(result,ov);
}

function animateOmicsCel(result, ov){
//  var zoomLevel = WG.GetCurrentZoomLevel();
  var cutoffs    = result.cutoffs;
  var colors     = result.colors;
  var exprType   = result.expressionType;
  var log        = result.logData;
  var objectType = result.objectType;
  animateOmics.totalSteps = result.fidColors.length;
  ov.omics      = {keyColors: {colors: colors, cutoffs: cutoffs},
                   layers: new Array()};
  // Show panel to control the animation.
  animateOmics.nodes = result.nodes;
  animateOmics.maxValue = null;
  animateOmics.minValue = null;
  for(let c = 0; c < animateOmics.nodes.length; c++) {
    let data = animateOmics.nodes[c];
    let minV = data[0][1];
    let maxV = data[0][1];
    for(let r = 0; r < data.length; r++) {
      let value = data[r][1];
      if (value < minV)
	minV = value;
      else if (value > maxV)
	maxV = value;
    }
    if ((animateOmics.minValue === undefined) || (animateOmics.minValue === null))
      animateOmics.minValue = minV;
    else if (animateOmics.minValue > minV) animateOmics.minValue = minV;
    if ((animateOmics.maxValue === undefined) || (animateOmics.maxValue === null))
      animateOmics.maxValue = maxV;
    else if (animateOmics.maxValue < maxV) animateOmics.maxValue = maxV;
  }
// WG DOES THIS NOW  openControlAnimationPanel(ov, animateOmics.totalSteps);
  // billingt:Jul-24-2013 add for condition that server also returns the nodes
//  if (!(result.nodes === undefined)) {  // i.e. result.nodes has a value
//    for (var z = 0; z < result.nodes.length; z++) {      
//      animateOmics.zoomLevels[z] = {nodes: result.nodes[z]} } 
//  };
  createLayersAnimation(result, ov);
  animateOmics.ov     = ov;
  animateOmics.layers = ov.omics.layers;
  var columnNames = new Array();
  for (x = 0; x < animateOmics.layers.length; x++) columnNames[x] = animateOmics.layers[x].name; 
  WG.OmicsInit(animateOmics.nodes,
	       ov.omics.keyColors.colors,
	       [ animateOmics.minValue, animateOmics.maxValue],
	       columnNames,
	       exprType, log, objectType);
  deactivateAllHighlight(ov);
  // billingt:Oct-16-2013 Hack to make animations START apparently with correct degree of transparency
  // hopefully unnecessary for web-graphics!!!
  // for (var i = 0; i < animateOmics.layers.length; i++)
  //  animateOmicsNextStep();
  // Really animate the layers.
//  omicsStartAnimation(ov);
  // paley:Jun-21-2013 Actually, start out in Pause mode:
  // omicsPauseAnimation();
}
function animateOmicsReg(result, ov){
  var map       = ov.map;
  var zoomLevel = map.zoom;
  var cutoffs   = result.cutoffs;
  var colors    = result.colors;
  animateOmics.totalSteps = result.fidColors.length;
  ov.omics      = {keyColors: {colors: colors, cutoffs: cutoffs},
                   layers: new Array()};
  // Show panel to control the animation.
  openControlAnimationPanel(ov, animateOmics.totalSteps);
  // billingt:Jul-24-2013 add for condition that server also returns the nodes
  if (!(result.nodes === undefined)) {  // i.e. result.nodes has a value
    for (var z = 0; z < result.nodes.length; z++) {      
      animateOmics.zoomLevels[z] = {nodes: result.nodes[z]} } 
  };
  createLayersAnimation(result, ov);
  animateOmics.ov     = ov;
  animateOmics.layers = ov.omics.layers;
  deactivateAllHighlight(ov);
  // billingt:Oct-16-2013 Hack to make animations START apparently with correct degree of transparency
  for (var i = 0; i < animateOmics.layers.length; i++)
    animateOmicsNextStep();
  // Really animate the layers.
  omicsStartAnimation(ov);
  // paley:Jun-21-2013 Actually, start out in Pause mode:
  omicsPauseAnimation();
}
animateOmics.sleepSec = 4;      // Nb of seconds between each step of the animation.
animateOmics.step     = 0;      // Current step index of the animation.
animateOmics.totalSteps = 0;    // billingt:Jul-25-2013 instead of counting layers, explicitly record number of steps
animateOmics.ov       = null;   // The overview structure for the Omics Viewer.
animateOmics.layers   = null;   // An array of layer structures.
animateOmics.pause    = false;  // This is a pause requested by the user.
animateOmics.timer    = null;   // The timer object attached to the animation.
animateOmics.suspend  = false;  // It is a temporary pause not requested by the user.
animateOmics.nodes    = null;
// Each zoom level is a structure {nodes: ...}
animateOmics.zoomLevels = new Array(12);  // Maximum nb of zoom levels is 12.
animateOmics.popupStyle = 'bar'; 
animateOmics.popupLabelStyle = 'sequential';      // popup timestep label preference: column names from data or sequential steps
animateOmics.popupApply = null;           // which popups to apply new preferences to: most recent; all current; all future; all.
animateOmics.popupFontSize = 12;          //
animateOmics.popupVerticalScale = 100;    // percent of original/default popup vertical height
animateOmics.minValue = null;
animateOmics.maxValue = null;

function chartTypeChanged() {
  animateOmics.popupStyle = document.getElementById("defaultPopup").value;
}

function isOmicsOn() {
  if (animateOmics.ov) 
    return true;
  else return false;
}

/* The control animation panel is a dialog widget from which the user
   can control the animation of the omics viewer. There are buttons
   to control the speed, stop, restart, etc., the animation.
   If this is a single experiment, no buttons are provided to control
   the animation (but there is always a button to remove the Omics Viewer).

   On the left of the control buttons is a vertical key-color column
   mapping colors to expression values.

   When this function is called the omics layers have been created
   and are accessible in ov.omics.layers vectors.
*/
function openControlAnimationPanel(ov, steps) {
  if (ov == initCelOverview) 
    openControlAnimationPanelCel(ov, steps)
  else openControlAnimationPanelReg(ov, steps)
}

function openControlAnimationPanelCel(ov, steps) {
  var nbSteps = steps;

  // Create html: on the left is the key-color column;
  // on the right are the buttons (if not a single experiment) to control
  // the animation.
  var minVal = ov.omics.keyColors.cutoffs[0];
  var maxVal = ov.omics.keyColors.cutoffs[ov.omics.keyColors.cutoffs.length - 1];
  minVal = animateOmics.minValue;
  maxVal = animateOmics.maxValue;
  var valSpread = maxVal - minVal;
  var currentMaxVal = maxVal;
  var currentMinVal = minVal;
  var keyColorWidth  = 110; // in pixels
  var keyColorHeight = 160; // in pixels
  var keyColorHtml = colorsCutoffsToColorKey(ov.omics, keyColorHeight);
  var body = "<div style='width:"+keyColorWidth+"px;position:absolute;left:15px;top:40px'>"+keyColorHtml+"</div>";
  WG.Opacity(0.3);
  sliderOpBase.setValue(30,true,true,true);
  if (nbSteps > 1) {
    var maxSliderSize = 700;
    var tickSize      = 20; // in pixels. This is based on the background image.
    var sliderSize    = Math.min(maxSliderSize, (nbSteps - 1) * tickSize + 5); // in pixels
    // This is a 2-row table for the slider showing the current step of the animation.
    // The first row contains the name of the step or a number, the second row contains the slider itself with background image.
    var sliderHtml = '<center><table><tr><td style="max-width:280px"><span id="omicsStepNb"></span></td></tr><tr><td><center><div id="omicsSliderBg" class="yui-h-slider" title="Animation Step" style="width:'+sliderSize+'px;padding: 2px 2px 2px 2px"><div id="omicsSliderThumb" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-n.gif"></div></div></center></td></tr></table></center><br>';
    // There is a slider to control the opacity of the overview itself (base). The first row of this table is the title "Opacity Base",
    // the second row is the slider itself with background image.
    // billingt:Jun-11-2013 - reduce padding from 2px to 0px so that border shows all the way around slider.
    var sliderMaxBaseHtml = '<center><table><tr><td>Maximum Value Displayed</td></tr><tr><td style="border:1px solid black"><center><div id="omicsSliderMaxBase1" class="yui-h-slider" title="Maximum Value Displayed" style="width: 160px; padding: 0px 0px 0px 0px"><div id="omicsSliderMaxBaseThumb1" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-fader.gif"></div></div></center></td></tr></table></center>';
    var sliderMinBaseHtml = '<center><table><tr><td>Minimum Value Displayed</td></tr><tr><td style="border:1px solid black"><center><div id="omicsSliderMinBase1" class="yui-h-slider" title="Minimum Value Displayed" style="width: 160px; padding: 0px 0px 0px 0px"><div id="omicsSliderMinBaseThumb1" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-fader.gif"></div></div></center></td></tr></table></center>';
    var buttonsHtml = '<div style="font-size:10pt"><input type=button id="omicsBackwardButton" value="Backward" onclick="omicsBackwardAnimation()" style="width:6em"/>&nbsp;<input type=button id="omicsStartPauseButton" value="Pause" onclick="omicsPauseAnimation()" style="width:6em"/>&nbsp;<input type=button id="omicsForwardButton" value="Forward" onclick="omicsForwardAnimation()" style="width:6em"/><p><input type=button id="omicsFasterButton"  value="Faster"  onclick="omicsFasterAnimation()" style="width:6em"/>&nbsp;<input type=button id="omicsSlowerButton"  value="Slower"  onclick="omicsSlowerAnimation()" style="width:6em"/>&nbsp;<span id="omicsSpeed"></span></div>';

    var sliderMaxBase = YAHOO.widget.Slider.getHorizSlider('omicsSliderMaxBase1', 'omicsSliderMaxBaseThumb1', 0, 100, 10);
    sliderMaxBase.animate = true;
    sliderMaxBase.setValue(160,true,true,true);
    sliderMaxBase.subscribe("change", function (x) {
      currentMaxVal = (minVal + ((x/100) * valSpread));
      WG.OmicsThresholds(currentMinVal,currentMaxVal);} );

    var sliderMinBase = YAHOO.widget.Slider.getHorizSlider('omicsSliderMinBase1', 'omicsSliderMinBaseThumb1', 0, 100, 10);
    sliderMinBase.animate = true;
    sliderMinBase.subscribe("change", function (y) {
      currentMinVal = (minVal + ((y/100) * valSpread));
      WG.OmicsThresholds(currentMinVal,currentMaxVal);} );

    body += "<div style='position:absolute;right:15px;top:35px'>"+sliderHtml+buttonsHtml+sliderMaxBaseHtml+sliderMinBaseHtml+"</div>";

    controlDialogOmics.setBody(body);

    var slider = YAHOO.widget.Slider.getHorizSlider('omicsSliderBg', 'omicsSliderThumb', 0, sliderSize, tickSize);
    slider.animate = true;
    animateOmics.slider = slider;
    //
    controlDialogOmics.cfg.setProperty('width',  ((groupsEnabled && can_create_group)
                                                  ? "400"
                                                  : (Math.max(190, sliderSize)+keyColorWidth+70))
                                                  +"px");
    controlDialogOmics.cfg.setProperty('height', (Math.floor(keyColorHeight)+130+15)+"px");
  }
  else {
    // Do not recreate the base opacity slider if it already exists. Otherwise the slider will malfunction.
    // billingt:Jun-11-2013 - reduce padding from 2px to 0px so that border shows all the way around slider.
    if (!((document.getElementById('omicsSliderMaxBase2')) || (document.getElementById('omicsSliderMinBase2')))) {
      var sliderMaxBaseHtml = '<center><table><tr><td>Maximum Value Displayed</td></tr><tr><td style="border:1px solid black"><center><div id="omicsSliderMaxBase2" class="yui-h-slider" title="Maximum Value Displayed" style="width: 160px; padding: 0px 0px 0px 0px"><div id="omicsSliderMaxBaseThumb2" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-fader.gif"></div></div></center></td></tr></table></center>';
      var sliderMinBaseHtml = '<center><table><tr><td>Minimum Value Displayed</td></tr><tr><td style="border:1px solid black"><center><div id="omicsSliderMinBase2" class="yui-h-slider" title="Minimum Value Displayed" style="width: 160px; padding: 0px 0px 0px 0px"><div id="omicsSliderMinBaseThumb2" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-fader.gif"></div></div></center></td></tr></table></center>';
      body += "<div style='position:absolute;right:15px;top:35px'>"+sliderMaxBaseHtml+sliderMinBaseHtml+"</div>";
      // billingt:Jul-17-2013 doesn't work here, put it in omicsStopAnimationAndCloseControlDialog
      // controlDialogOmics.setBody(''); // to clear for new colors
      controlDialogOmics.setBody(body);
    }
    var sliderMaxBase = YAHOO.widget.Slider.getHorizSlider('omicsSliderMaxBase2', 'omicsSliderMaxBaseThumb2', 0, 100, 10);
    sliderMaxBase.animate = true;
    sliderMaxBase.setValue(160,true,true,true);
    sliderMaxBase.subscribe("change", function (x) {
      currentMaxVal = (0.01 + minVal + ((x/100) * valSpread));
      WG.OmicsThresholds(currentMinVal,currentMaxVal);} );

    var sliderMinBase = YAHOO.widget.Slider.getHorizSlider('omicsSliderMinBase2', 'omicsSliderMinBaseThumb2', 0, 100, 10);
    sliderMinBase.animate = true;
    sliderMinBase.subscribe("change", function (y) {
      currentMinVal = (minVal + ((y/100) * valSpread) - 0.01);
      WG.OmicsThresholds(currentMinVal,currentMaxVal);} );

    // billingt:Sep-19-2013 - if groups enabled, increase width enough to accommodate three buttons in footer
    //                        (see celOv.shtml, controlDialogOmicsButtons definition)
    controlDialogOmics.cfg.setProperty('width', ((groupsEnabled && can_create_group)
                                                 ? "400"
                                                 : (168+keyColorWidth+70))+"px");
    // Increase height.
    controlDialogOmics.cfg.setProperty('height', (keyColorHeight+86)+"px");
    controlDialogOmics.body.style.height =  keyColorHeight + 20 +"px";

    // This is the slider for the animation, not for the base opacity.
    animateOmics.slider = null;
    animateOmics.step   = 0;
  }
  controlDialogOmics.cfg.setProperty('xy', [100,110]);
  controlDialogOmics.show();
  showOmicsSpeed();
//  showOmicsStep(ov.omics.layers[0]);
}

function openControlAnimationPanelReg(ov, steps){
  var nbSteps = steps;

  // Create html: on the left is the key-color column;
  // on the right are the buttons (if not a single experiment) to control
  // the animation.

  var keyColorWidth  = 110; // in pixels
  var keyColorHeight = 160; // in pixels
  var keyColorHtml = colorsCutoffsToColorKey(ov.omics, keyColorHeight);
  var body = "<div style='width:"+keyColorWidth+"px;position:absolute;left:15px;top:40px'>"+keyColorHtml+"</div>";

  if (nbSteps > 1) {
    var maxSliderSize = 700;
    var tickSize      = 20; // in pixels. This is based on the background image.
    var sliderSize    = Math.min(maxSliderSize, (nbSteps - 1) * tickSize + 5); // in pixels
    // This is a 2-row table for the slider showing the current step of the animation.
    // The first row contains the name of the step or a number, the second row contains the slider itself with background image.
    var sliderHtml = '<center><table><tr><td style="max-width:280px"><span id="omicsStepNb"></span></td></tr><tr><td><center><div id="omicsSliderBg" class="yui-h-slider" title="Animation Step" style="width:'+sliderSize+'px;padding: 2px 2px 2px 2px"><div id="omicsSliderThumb" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-n.gif"></div></div></center></td></tr></table></center><br>';
    // There is a slider to control the opacity of the overview itself (base). The first row of this table is the title "Opacity Base",
    // the second row is the slider itself with background image.
    // billingt:Jun-11-2013 - reduce padding from 2px to 0px so that border shows all the way around slider.
    var sliderOpBaseHtml = '<center><table><tr><td>Control Opacity of Overview</td></tr><tr><td style="border:1px solid black"><center><div id="omicsSliderOpacityBase1" class="yui-h-slider" title="Control Opacity of Overview" style="width: 160px; padding: 0px 0px 0px 0px"><div id="omicsSliderOpBaseThumb1" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-fader.gif"></div></div></center></td></tr></table></center>';
    var buttonsHtml = '<div style="font-size:10pt"><input type=button id="omicsBackwardButton" value="Backward" onclick="omicsBackwardAnimation()" style="width:6em"/>&nbsp;<input type=button id="omicsStartPauseButton" value="Pause" onclick="omicsPauseAnimation()" style="width:6em"/>&nbsp;<input type=button id="omicsForwardButton" value="Forward" onclick="omicsForwardAnimation()" style="width:6em"/><p><input type=button id="omicsFasterButton"  value="Faster"  onclick="omicsFasterAnimation()" style="width:6em"/>&nbsp;<input type=button id="omicsSlowerButton"  value="Slower"  onclick="omicsSlowerAnimation()" style="width:6em"/>&nbsp;<span id="omicsSpeed"></span></div>';

    var sliderOpBase = YAHOO.widget.Slider.getHorizSlider('omicsSliderOpacityBase1', 'omicsSliderOpBaseThumb1', 0, 100, 10);
    sliderOpBase.animate = true;
    ov.map.baseLayer.setOpacity(0.3);
    sliderOpBase.subscribe("change", function (x) {ov.map.baseLayer.setOpacity(x/160+0.1);});

    body += "<div style='position:absolute;right:15px;top:35px'>"+sliderHtml+buttonsHtml+sliderOpBaseHtml+"</div>";

    controlDialogOmics.setBody(body);

    var slider = YAHOO.widget.Slider.getHorizSlider('omicsSliderBg', 'omicsSliderThumb', 0, sliderSize, tickSize);
    slider.animate = true;
    animateOmics.slider = slider;
    //
    controlDialogOmics.cfg.setProperty('width',  ((groupsEnabled && can_create_group)
                                                  ? "400"
                                                  : (Math.max(190, sliderSize)+keyColorWidth+70))
                                                  +"px");
    controlDialogOmics.cfg.setProperty('height', (Math.floor(keyColorHeight)+130)+"px");

   // billingt:Jun-11-2013 
   // somehow the height gets set to a fractional value (e.g. 146.78345px)
   // that causes the lower border to be overdrawn by this one.  Seem to be a one pixel error.
   // billingt:Jul-24-2013 Now seem unnecessary?
/*   var str = controlDialogOmics.body.getStyle('height');
   var idx = str.search("px");
   var newstr = Math.floor(eval(str.substr(0, idx)))+"px";
   controlDialogOmics.body.style.height = newstr;
*/
  }
  else {
    // Do not recreate the base opacity slider if it already exists. Otherwise the slider will malfunction.
    // billingt:Jun-11-2013 - reduce padding from 2px to 0px so that border shows all the way around slider.
    if (!(document.getElementById('omicsSliderOpacityBase2'))) {
      var sliderOpBaseHtml = '<center><table><tr><td><div style="width: 168px">Control Opacity of Overview</div></td></tr><tr><td style="border:1px solid black"><center><div id="omicsSliderOpacityBase2" class="yui-h-slider" title="Control Opacity of Overview" style="width: 160px; padding: 0px 0px 0px 0px"><div id="omicsSliderOpBaseThumb2" class="yui-slider-thumb"><img src="/yui/build/slider/assets/thumb-fader.gif"></div></div></center></td></tr></table></center><br>';
      body += "<div style='position:absolute;right:15px;top:35px'>"+sliderOpBaseHtml+"</div>";
      // billingt:Jul-17-2013 doesn't work here, put it in omicsStopAnimationAndCloseControlDialog
      // controlDialogOmics.setBody(''); // to clear for new colors
      controlDialogOmics.setBody(body);
    }

    var sliderOpBase = YAHOO.widget.Slider.getHorizSlider('omicsSliderOpacityBase2', 'omicsSliderOpBaseThumb2', 0, 100, 10);
    sliderOpBase.animate = true;
    ov.map.baseLayer.setOpacity(0.3);
    sliderOpBase.subscribe("change", function (x) {ov.map.baseLayer.setOpacity(x/160+0.1);});

    // billingt:Sep-19-2013 - if groups enabled, increase width enough to accommodate three buttons in footer
    //                        (see celOv.shtml, controlDialogOmicsButtons definition)
    controlDialogOmics.cfg.setProperty('width', ((groupsEnabled && can_create_group)
                                                 ? "400"
                                                 : (168+keyColorWidth+70))+"px");
    // Increase height.
    controlDialogOmics.cfg.setProperty('height', (keyColorHeight+86)+"px");
    controlDialogOmics.body.style.height =  keyColorHeight +"px";

    // This is the slider for the animation, not for the base opacity.
    animateOmics.slider = null;
    animateOmics.step   = 0;
  }
  controlDialogOmics.cfg.setProperty('xy', [100,110]);
  controlDialogOmics.show();
  showOmicsSpeed();
//  showOmicsStep(ov.omics.layers[0]);
}

/* billington:May-28-2020 
   called to initialize omics popup preferences
*/
function initOmicsPopupPreferences () {
  var ov = animateOmics.ov;
  var orgid = ov.orgid;
  var ovStr = (ov == initCelOverview) ? "cel" : "reg";
    var url = "/"+orgid+"/rawOmicsPopupPreferences.html?ov="+ovStr;
    var continuation = function () {
	initOmicsPopupPrefs ();
    };
    finishInitOmicsPopupPreferences (url,continuation);
}

function finishInitOmicsPopupPreferences (url,fn) {
    var text    = null;
    var request = new XMLHttpRequest();
    request.onreadystatechange = function () {
	if (this.readyState == 4 && this.status == 200) {
	    eval(this.responseText);
	    fn(); }
    };
    request.open("GET", url, true);
    request.setRequestHeader("Accept", "text/*");
    request.send();
}

/* billingt:Sep-19-2013 
   called by selecting button in omics control panel (see celOv.shtml)
*/
function omicsDisplayPreferences() {
  var ov = animateOmics.ov;
  deActivateMouseTracking(ov);
  var orgid = ov.orgid;
  var ovStr = (ov == initCelOverview) ? "cel" : "reg";
  var url = "/"+orgid+"/omicsPopupPreferences.html?ov="+ovStr;
  var continuation =  function () {
    execSetupOmicsPreferencesForm();
    viewOmicsPreferencesDialog.cfg.setProperty('xy', [120,130]);
    viewOmicsPreferencesDialog.show();
  };
  setOmicsPreferencesDialogBody(url,continuation);
 }

function setOmicsPreferencesDialogBody(url,fn) {
  var text    = null;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      viewOmicsPreferencesDialog.setBody(this.responseText);
      fn(); }
    };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}


function cancelOmicsPreferences() {
  var ov = animateOmics.ov;
  activateMouseTracking(ov);
  viewOmicsPreferencesDialog.hide()
}

/* billingt:Sep-19-2013 
*/
function getRadioValue(name) {
    var value = null;
    var radios = document.getElementsByName(name);
    for (var i = 0; i < radios.length; i++)
        if (radios[i].checked) {
            value = radios[i].value;
            break; }
    return value;
}

function checkIntegerRange(fieldname, value, v1, v2) {
  var intValue = parseInt(value);
    if (value == '') {
    alertUser ('You must supply a value for ' + fieldname)
    return null;
  }
  else if (isNaN(intValue) || !((intValue >= v1) && (intValue <= v2))) {
    alertUser ('"'+value+'" in '+fieldname+' is not a valid integer between '+v1+' and '+v2+'.');
    return null;
  }
  else return intValue
}

function saveOmicsPreferences() {
  var originalLabelStyle = animateOmics.popupLabelStyle;
  var originalVerticalScale = animateOmics.popupVerticalScale;
  var originalPopupStyle = animateOmics.popupStyle;
  var originalFontSize = animateOmics.popupFontSize;
  var popupStyle = getRadioValue('PopupStyle');
  var popupStyleIdx = (popupStyle == 'bar') ? 0 : (popupStyle == 'plot') ? 1 : 2;
  var labelStyle = getRadioValue('LabelStyle');
  var apply = getRadioValue('apply');
  var fontSize = document.getElementById('FontSize').value;
  if (!checkIntegerRange('size of text', fontSize, 8, 20)) {
    document.getElementById('FontSize').value = originalFontSize;
    return; }
  var verticalScale = document.getElementById('VerticalScale').value;
  if (!checkIntegerRange('vertical scale', verticalScale, 50, 500)) {
    document.getElementById('VertialSize').value = originalVerticalScale;
    return; }
  // save preferences for session, if appropriate
  animateOmics.popupStyle = popupStyle;
  animateOmics.popupLabelStyle = labelStyle;
  animateOmics.popupFontSize = parseInt(fontSize);
  animateOmics.popupVerticalScale = parseInt(verticalScale);
  animateOmics.popupApply = apply;
  // modify existing popup(s), if appropriate
  if (apply == 'recent')
    WG.OmicsUpdateStyle('recent');
  else if (apply != 'future')
    WG.OmicsUpdateStyle('all');
  if ((apply == 'recent') || (apply == 'current')) {
    animateOmics.popupStyle = originalPopupStyle;
    animateOmics.popupLabelStyle = originalLabelStyle;
    animateOmics.popupVerticalScale = originalVerticalScale;
    animateOmics.popupFontSize = originalFontSize; }
  if ((apply == 'all') || (apply == 'future')) {
    saveOmicsPrefsToServer(popupStyle,                // popupStyle :: [ 'bar' | 'plot' | 'heat' ]
			   labelStyle,                // labelStyle :: [ 'columns' | 'sequential' ]
			   fontSize,verticalScale); } // fontSize, verticalScale :: string of interger value
  viewOmicsPreferencesDialog.hide();
  activateMouseTracking(animateOmics.ov, 300);
}

function saveOmicsPrefsToServer(popupStyle,                // popupStyle :: [ 'bar' | 'plot' | 'heat' ]
				labelStyle,                // labelStyle :: [ 'columns' | 'sequential' ]
				fontSize,verticalScale) {  // fontSize, verticalScale :: string of integer value
  let url = "/save-omics-prefs?popup-style=" + popupStyle + "&label-style=" + labelStyle + "&font-size=" + fontSize + "&vertical-scale=" + verticalScale;
  YAHOO.util.Connect.asyncRequest('GET', url);}

function execSetupOmicsPreferencesForm() {
  var init = document.getElementById('initPopupForm');
  if(init.value) {
    try {
      // This initializes the form with default or user preference values.
      eval(init.value);
    }
    catch(e) {}
  }
}

function setupOmicsPreferencesForm(bar, plot, heat, columns, sequential, verticalScale, fontSize, recent, current, future, all) {
// setup values from previous used, if existing, or defaults
  var form = document.getElementById('initPopupForm');
  var userLoggedInP;
  isUserLoggedIn(function(x) {userLoggedInP = (x) ? true : false;});
  let useStoredValuesP = (userLoggedInP && ((animateOmics.popupApply == 'future') || (animateOmics.popupApply == 'all')));
  if ((animateOmics.popupStyle) && (!useStoredValuesP))
    document.getElementById(animateOmics.popupStyle).checked = true;
  else {
    if (bar == 'T') document.getElementById('bar').checked = true;
    if (plot == 'T') document.getElementById('plot').checked = true;
    if (heat == 'T') document.getElementById('heat').checked = true; }

  if ((animateOmics.popupLabelStyle) && (!useStoredValuesP))
    document.getElementById(animateOmics.popupLabelStyle).checked = true;
  else {
  if (sequential == 'T') document.getElementById('sequential').checked = true;
    if (columns == 'T') document.getElementById('columns').checked = true; }

  document.getElementById('FontSize').value = (useStoredValuesP) ? parseInt(fontSize) : animateOmics.popupFontSize;
  document.getElementById('VerticalScale').value = (useStoredValuesP) ? parseInt(verticalScale) : animateOmics.popupVerticalScale;

  if (animateOmics.popupApply)
    document.getElementById(animateOmics.popupApply).checked = true;
  else {
    if (recent == 'T') document.getElementById('recent').checked = true;
    if (current == 'T') document.getElementById('current').checked = true;
    if (future == 'T') document.getElementById('future').checked = true;
    if (all == 'T') document.getElementById('all').checked = true; }
}

function omicsDataToGroup () {
  window.open("/omics-data-to-group");
}

function omicsDataToDashboard () {
  window.open("/dashboard/dashboard.html");
}
/* Not for WG
/* Create a HTML vertical stack of colors representing a mapping from
   colors to values. Used for the omics viewer.

   Arguments: omics, an omics structure.
              height, height of the stack of colors in pixel.
   Returns: a HTML string;
*/
/* Not for WG
function colorsCutoffsToColorKey(omics, maxHeight){
  var cutoffs = omics.keyColors.cutoffs; // from low to high values.
  var colors  = omics.keyColors.colors;  //
  if (colors.length == 0) return "";
  var n = colors.length; // cutoffs.length is one less than colors.length
  var heightColor = Math.min(Math.floor(maxHeight/n), 20); // color boxes shorter or equal to width
  // Generate a stack of small rectangles: typically, red at top, yellow at bottom.
  var s = "",
      h = 0;
  for (var i=n-1; i >= 0; i--){
    s += "<div style='white-space:nowrap'/><div style='width:20px;height:"+heightColor+"px;background-color:"+colors[i]+"'></div>";
    if (h != 0) // 20) {
    {
      s += "<span style='position:absolute;left:20px;top:"+((n-1-i)*heightColor-9)+"px;white-space:nowrap;height:20px'><b>&ndash;&nbsp;</b>"+formatCutoffValue(cutoffs[i])+"</span></div>";
      h = h - 20;
    }
    else s += "</div>"
    h += heightColor;
  }
  return s;
}
*/
/* Returns a formating string of value v. Always provide exactly
   three digits after '.', and always a sign '+' or '-' in front of the number.

   Examples:   2.1  => '+2.100', 2 => '+2.000', -4.33333 => '-4.333'

   Takes care of exponential notation such as 2.2e-9, which gives '+2.200e-9'.
   Used for the Omics color key.

*/
/* Not for WG
function formatCutoffValue(v, n){
  var s   = v.toString();
  var exp = '';
  var ie  = s.indexOf('e');
  if (ie >= 0) { // an exp notation.
    exp = s.substring(ie);   // starts from 'e'
    s   = s.substring(0,ie); // does not include 'e'
  }
  if (s.indexOf('-') < 0) s = '+'+s;
  var i = s.indexOf('.');
  if (i < 0) s += '.000';
  else s = (s+'000').substring(0,i+4);
  return s+exp;
}

// Return true if a single expriment (no animation) is possible.
function omicsSingleExperimentPossible(){
  var layers = animateOmics.layers;
  if (!layers || layers.length > 1) return false;
  return true;
}
*/
/*
   Starts to animate Omics expression data. The animate structure contains
   the data and all parameters.
*/



function showOneTimeStepOmics(timeStep) {
  WG.OmicsHighlight(timeStep);
}


// Suspend the animation if it is running and make the current step invisible.
function suspendOmicsAnimation(){
  if (!animateOmics.layers) return;
  animateOmics.suspend = true;
}

// Resume the animation and make the current step visible.
function resumeOmicsAnimation(){
  if (!animateOmics.layers) return;
  animateOmics.suspend = false;
  animateOmicsCurrentStep();
}

/* Stop the animation by deactivating the current highlighted layer.
   The Omics data is not destroyed. It is similar to a pause
   but here no highlighted nodes are shown.
*/
function omicsStopAnimation(){
  animateOmics.pause = true;
  var layers = animateOmics.layers;
  if (!layers || layers.length == 0) return;
  console.log('WG.RemoveOmicsHighlights();');
//  var i = animateOmics.step;
//  layers[i].layer.setVisibility(false);
}

function omicsStopAnimationReg(){
  animateOmics.pause = true;
  var layers = animateOmics.layers;
  if (!layers || layers.length == 0) return;
  var i = animateOmics.step;
  layers[i].layer.setVisibility(false);
}


/*
   The user requested to close the Omics Viewer.
   Check that it is indeed what is wanted before proceeding.

*/
function removeOmicsViewer(){
  if (animateOmics.ov == initCelOverview)
  askBeforeExec ("Are you sure you want to stop the Omics Viewer? This will also remove all Omics Data from the Overview.",
                 "Remove Omics Viewer", omicsStopAnimationAndCloseControlDialog)
  else 
    askBeforeExec ("Are you sure you want to stop the Omics Viewer? This will also remove all Omics Data from the Overview.",
                   "Remove Omics Viewer", omicsStopAnimationAndCloseControlDialogReg);
}

/* Stop animation, remove all layers associated with the
   overview data, and close control panel.
   This operation completely remove all Omics data from
   the browser.
*/
function omicsStopAnimationAndCloseControlDialog(){
//  omicsStopAnimation();
//  controlDialogOmics.hide();
//  controlDialogOmics.setBody(""); // billingt:Jul-17-2013 empties body so new colors can be shown next time.
  WG.Opacity(1.0);
  sliderOpBase.setValue(100,true,true,true);
  destroyAllOmicsLayers(true);
  removeAllCelToolTips();
}

function omicsStopAnimationAndCloseControlDialogReg(){
  omicsStopAnimationReg();
  controlDialogOmics.hide();
  controlDialogOmics.setBody(""); // billingt:Jul-17-2013 empties body so new colors can be shown next time.
  animateOmics.ov.map.baseLayer.setOpacity(1.0);
  destroyAllOmicsLayersReg(true);
  removeAllCelToolTips();
}

// Reduce the time by one second between each animation step.
// Typically called when user click the button "Faster".
function omicsFasterAnimation(){
  var s = animateOmics.sleepSec;
  if (s > 1) s--;
  animateOmics.sleepSec = s;
  animateOmics.nbSecsLeft--;
  showOmicsSpeed();
}

// Increase the time by one second between each animation step.
// Typically called when user click the button "Slower".
function omicsSlowerAnimation(){
  var s = animateOmics.sleepSec;
  if (s < 30) s++;
  animateOmics.sleepSec = s;
  animateOmics.nbSecsLeft++;
  showOmicsSpeed();
}

function animateOmicsNextStep(){
  var i = animateOmics.step;
  i++;
  if (i >= animateOmics.layers.length) i = 0;
  animateOmics.step = i;
  animateOmicsCurrentStep();
  var ov = animateOmics.ov;
  checkTooltip(ov);
}

function animateOmicsPreviousStep(){
  var i = animateOmics.step;
//  animateOmics.layers[i].layer.setVisibility(false);
  i--;
  if (i < 0) i = animateOmics.layers.length - 1;
  animateOmics.step = i;
  animateOmicsCurrentStep();
  var ov = animateOmics.ov;
  checkTooltip(ov);
}

// Show the current layer, make sure the slider is at the right step.
function animateOmicsCurrentStep(){
  omicsShowCurrentStep();
  omicsUpdateStepSlider();
}

// Show the current layer. This is the main function
// to show all highlighted objects on the Overview.
function omicsShowCurrentStep(){
  var i = animateOmics.step;
  showOmicsStep(animateOmics.layers[i]);
  // This makes the entire set of highlighing for a Omics step visible.
  showOneTimeStepOmics(i);
}

function omicsUpdateStepSlider(){
  var i = animateOmics.step;
  if (animateOmics.slider != null) {
    animateOmics.slider.setValue(i*20, true, true, true);
  }
}

// Update the speed value displayed for the user.
function showOmicsSpeed(){
  span = document.getElementById('omicsSpeed');
  if (!span) return; // It could be a single experiment with no animation.
  var n = animateOmics.sleepSec;
  s = n+"&nbsp;second"+((n > 1)?"s":"")+"/step";
  span.innerHTML = s;
}

// Update the step number near the slider.
function showOmicsStep(oneLayer){
  var stepName = oneLayer.name;
  var span = document.getElementById('omicsStepNb');
  // Display either a column name or a number.
  if (span) span.innerHTML = stepName;
}

/*  Add all the layers necessary for the Omics Viewer.
    The layers are created such that they work at any zoom level.

    Arguments: result, a structure sent by the server to represent the colors
                       for each object in the Overview. The structure has the field
                       fidColors which is an array of variable length arrays. Each
                       array is for one time point. In each time point array
                       are two values, a frame-id and a color as an integer.
               ov, the Cellular or Regulatory init structure.

    Returns: an array of layer structures.
*/
function createLayersAnimation(result, ov){
  var zoomLevel = WG.GetCurrentZoomLevel();
  var fidColors = result.fidColors;
  var headers   = result.headers;
  var colnums   = result.colNums;
  // Create one highlight layer for each animation step.
  for (var i=0; i < fidColors.length ; i++){
    // billingt:Aug-2-2013 added parameter i at end of call to addOmicsHighlightLayer, so we know which omics layer
    addOmicsHighlightLayer(fidColors[i], 
                           (headers && headers[i]) ? headers[i] : "Step "+colnums[i], // billingt:Jul-20-2016 brg-rt#6913
                           ov.orgid,
                           ov,
                           i,
                           colnums[i]);
  }
}

// Create the dialog window to let the user upload Omics data.
function omicsViewer(ov, source) {
  if (animateOmics.ov == initCelOverview) {
    //jah -- don't to remove omics data if omics panel already closed
    if (WG.OmicsPanelIsOpen()) {
      askBeforeExec("This operation will remove the current omics data from the Overview. Do you want to proceed?",
		    "Remove Current Omics Data",
		    function(){
		      omicsStopAnimationAndCloseControlDialog(); 
		      if (source == 'group')
			omicsViewerGroupDialog(ov);
		      else if (source) 
			omicsViewerDbDialog(ov, source);
		      else omicsViewerDialog(ov);});}
        else {
      if (source == 'group') {
	omicsViewerGroupDialog(ov);
      } else {
	if (source) {
	  omicsViewerDbDialog(ov, source); 
	} else omicsViewerDialog(ov);
      }};
  } else {
    if ((animateOmics.ov != null) && (animateOmics.ov != initCelOverview)) {
      askBeforeExec("This operation will remove the current omics data from the Overview. Do you want to proceed?",
		    "Remove Current Omics Data",
		    function(){
		      omicsStopAnimationAndCloseControlDialogReg(); 
		      if (source == 'group')
			omicsViewerGroupDialog(ov);
		      else if (source) 
			omicsViewerDbDialog(ov, source);
		      else omicsViewerDialog(ov);});
    }
    else {
      if (source == 'group') {
	omicsViewerGroupDialog(ov);
      } else {
	if (source) {
	  omicsViewerDbDialog(ov, source); 
	} else omicsViewerDialog(ov);
      }}}}

/*
   Rebind this to set the actual function of the "Submit" button on dialogOmics form
*/
var omicsSubmitHandler;
/*
   this is the function called when user clicks "Submit" button on dialogOmics form - see celOv.shtml 
*/
function handleOmicsSubmit() { omicsSubmitHandler();}

/*
   Open up a dialog to upload the omics data. Works for
   regulatory and cellular overviews.

   Arguments: ov, an init structure of the overview.
*/
function omicsViewerDialog(ov) {
    if (omicsFormLoadedP()) {
	dialogOmics.show();
    }
    else {
	// Get the dynamically generated HTML page from server. This page might depends
	// on the user preferences when the user is logged in. So it needs to be
	// generated every time the panel is opened.
	// paley:May-8-2019 No, we don't want to regenerate the dialog every
	// time, because we want our selections to be sticky!
	var orgid   = ov.orgid;
	var ovStr   = (ov == initCelOverview) ? "cel" : "reg";
	var url     = "/"+orgid+"/expressionShort.html?ov="+ovStr;
	var continuation = function () {
	    omicsSubmitHandler = function(){submitOmicsButtonClick(false,ov)}; // local bind of global var
	    dialogOmics.show();
	    execSetupOmicsForm();
	}; 
	setOmicsViewerDialogBody(url,continuation);
    }
}

function omicsFormLoadedP () {
    return ((document.getElementById('omicsForm')) ? true : false);
}

// Retrieve the dialog body from the specified url, and insert into the dialog.
function setOmicsViewerDialogBody(url, fn) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      dialogOmics.setBody(this.responseText);
      fn(); }
    };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function omicsQuickHelpDialogOpen(){
  omicsQuickHelpDialog.show();
}


// :::::: Omics form setup, verification, and submit :::::::::


function execSetupOmicsForm(){
  var init = document.getElementById('initForm');
  if(init.value) {
    try {
      // This initializes the form with default or user preference values.
      eval(init.value);
    }
    catch(e) {}
  }
}

/*
   Setup the form with initial data. This might hide or
   make visible some parts of the form and filled out
   various text fields.

*/

function setupOmicsForm(genes, proteins, compounds, reactions, noclass,
                        logData, relative, column1, column2, maxcutoff,
                        threeColor, tableThreshold, loggedIn){
  /*
  alert(genes+' '+ proteins+' '+ compounds+' '+ reactions+' '+ noclass+' '+
        logData+' '+ relative+' '+ column1+' '+ column2+' '+ maxcutoff+' '+
        threeColor+' '+ tableThreshold+' '+ loggedIn);
  */

  var form = document.getElementById('omicsForm');

  // NOTE: can't set datafile value because of security reasons: user must select file.

  if (genes     == 'T') form['class'].options[0].selected = true;
  if (proteins  == 'T') form['class'].options[1].selected = true;
  if (compounds == 'T') form['class'].options[2].selected = true;
  if (reactions == 'T') form['class'].options[3].selected = true;
  if (noclass   == 'T') form['class'].options[4].selected = true;

  if (column1) {
    form.column1.value = column1; }
  else form.column1.value = checkOmicsFormData.column1;
  form.log.selectedIndex = (logData  == 'T') ? 0 : 1; // 0-centered or 1-centered values.

  var relativeIndex = (relative == 'T') ? 1 : 0;
  var colorScheme = (threeColor == 'T') ? 2 : (maxcutoff == 'NIL') ? 0 : 1;

  colorSchemeSelected(form, colorScheme, maxcutoff, tableThreshold);
  setupRelative(form,      relativeIndex);
  numColumnsSelected(form, column2);
  createOmicsHelpTooltips();
}

function setupRelative(form, relative){
  if (relative) form.expressiontype.selectedIndex = relative;
  var i = form.expressiontype.selectedIndex;
  var r = document.getElementById("relative");
  var r2 = document.getElementById("relative2");
  if (i == 1) { r.style.display = 'inline';
                r2.style.display = 'inline';
                  numColumnsSelected(form);
              }
  else {r.style.display = 'none';
        r2.style.display = 'none';
        var c2 = document.getElementById("column2section");
        c2.style.display = 'none';
       }
}

function numColumnsSelected(form, column2){
    var i  = (column2) ? 1 : form.numcolumns.selectedIndex;
    var c2 = document.getElementById("column2section");
    var c2Text = document.getElementById("c2Text");
    var c2TextNo = document.getElementById("c2TextNo");
    if (i == 0) {
	c2.style.display = 'none';
	if (c2Text) c2Text.style.display = 'none';
	if (c2TextNo) c2TextNo.style.display = 'inline';
    }
    if (i == 1) {
	c2.style.display = 'inline';
	if (c2Text) c2Text.style.display = 'inline';
	if (c2TextNo) c2TextNo.style.display = 'none';
    }
    if (column2) form.column2.value = column2;
}

function colorSchemeSelected(form, selection, maxcutoff, tableThreshold){
  var i  = (selection) ? selection : form.color.selectedIndex;
  var t1 = document.getElementById("threshold"); 
  var t2 = document.getElementById("maxcutoff"); // see www.lisp *expressionShort.html-body* definition
  if (i == 0 || i == 2) { t1.style.display = 'none';  t2.style.display = 'none';}
  if (i == 1 || i == 3)  { t1.style.display = 'none';  t2.style.display = 'inline';
                           t2.value = (maxcutoff == 'NIL') ? '' : maxcutoff;}
  if (i == 4) { t1.style.display = 'inline'; t2.style.display = 'none';
                t2.value = (tableThreshold == 'NIL') ? '' : tableThreshold;
              }
}

function viewersChangedCallback(form) {
    document.getElementById('tableThreshold').style.display = (form.display[1].checked || form.display[2].checked) ? 'block' : 'none';
}

function pasteView(){
  document.getElementById('fileSection').style.display='none';
  document.getElementById('pasteSection').style.display='block';
  document.getElementById('datafile').value='';
}

function fileView(){
  document.getElementById('pasteSection').style.display='none';
  document.getElementById('fileSection').style.display='block';
  document.getElementById('datatext').value='';
}

function createOmicsHelpTooltips(){
  var helpDivs = document.getElementById('helpTextDiv').children;
  for (var i=0; i<helpDivs.length; i++) {
    var id = helpDivs[i].id;
    var text = helpDivs[i].innerHTML;
    var iconEl = document.getElementById(id+'Icon');
    if (iconEl) {
      var tooltip = new YAHOO.widget.Tooltip(id+'TT', {
          context: iconEl,
          text: text,
          zIndex: 25000,
          width: '400px',
          preventoverlap: true,
          autodismissdelay: 60000
        });
    }
  }
}

function insertExampleData(type) {
  var url="/ajax-example-omics-ids?orgid=" + orgID() + "&type=" + type;
  var callback = {
    success: function (oResponse) {
      var lines = JSON.parse(oResponse.responseText);
      if (lines) {
        var text = "# This is randomly generated data to illustrate the acceptable input format.\n# Lines beginning with # are comment lines.\n# In general, the first column contains identifiers of some sort, and subsequent\n# columns contain data values.  Columns are tab-delimited.\n";
        for (var i=0; i<lines.length; i++) {
          var line = lines[i];
          if (line[0] == '#') text += '#\n' + line + '\n'; // comment line
          else {
            text += line;
            for (var j=0; j<3; j++) {
              // random number between -10 and 10
              var datum = Math.random() * 20 - 10;
              text += '\t' + datum.toFixed(3);
            }
            text += '\n';
          }
        }
        document.getElementById('datatext').value=text;
        document.getElementById('col0class').selectedIndex = (type =='m') ? 2:0;
          
      }
    }
  };
  YAHOO.util.Connect.asyncRequest('GET', url, callback);
}

function validIntegerCheck(field, fieldname) {
  var row = parseInt(field.value);
  if (field.value == '') {
    alertUser ('You must supply a value for ' + fieldname)
    return null;
  }
  else if (isNaN (row) || (row <= 0)) {
    alertUser ('"' + field.value + '" in ' + fieldname + ' is not a valid integer.');
    return null;
  }
  else return row;
}

function validNumberCheck(field, fieldname) {
  var row = parseFloat(field.value);
  if (field.value == '') {
    alertUser ('You must supply a value for ' + fieldname)
    return null;
  }
  else if (isNaN (row) || (row <= 0)) {
    alertUser ('"' + field.value + '" in ' + fieldname + ' is not a valid number.');
    return null;
  }
  else return row;
}

function forceConstraintsNumcolumns(thisForm) {
  if (thisForm.numcolumns == '1') {
    thisForm.column2.value = '';
  }
  else {
    thisForm.expressiontype.selectedIndex = 1;
  }
}

function enforceConstraintsExpressiontype(thisForm) {
  if (thisForm.expressiontype.selectedIndex == 0) {
    thisForm.numcolumns.selectedIndex = 0;
  }
}

function enforceConstraintsColumn2(thisForm) {
  if (thisForm.numcolumns.selectedIndex == 0) {
        thisForm.column2.value = '';
  }
}


// Returns false if the form has an error.
function checkOmicsFormData(form, ov) {

  if ((form.datafile.value == '')&&(form.datatext.value == '')) {
    alertUser ('You must supply a file or text containing experimental data.');
    return false;
  }

    if (!(form.column1.value == '*' || validIntegerCheck(form.column1, 'data column 1'))) return false;
  checkOmicsFormData.column1 = form.column1.value;

  if (form.numcolumns[0].selected && !isNaN(parseInt(form.column2.value))) {
    //alertUser ('You have chosen to use a single data column, yet two columns have been specified.');
    //return false;
    form.column2.value = '';
  }

  if (form.numcolumns[1].selected && !validIntegerCheck(form.column2, 'data column 2')){
    return false;
  }

  if (form.numcolumns[1].selected &&
      validIntegerCheck(form.column1) == validIntegerCheck(form.column2)){
    alertUser ('Cannot specify same data column for both numerator and denominator.');
    return false;
  }

    if (!(form.display[0].checked || form.display[1].checked || form.display[2].checked || form.display[3].checked)) {
	alertUser ('You must specify at least one place to display the data.');
	return false;
    }

  if ((form.display[1].checked || form.display[2].checked) && !validNumberCheck(form.tablethreshold, 'the number of pathways'))
    return false;

  if (form.color[0].selected || form.color[2].selected
      || (form.color[1].selected && validNumberCheck(form.maxcutoff,  'the maximum color cutoff field'))
      || (form.color[3].selected && validNumberCheck(form.maxcutoff,  'the maximum color cutoff field'))
      || (form.color[4].selected && validNumberCheck(form.threshold, 'the three-color threshold field'))
      ) {
    return true;
  }
  else return false;
}
checkOmicsFormData.column1  = null;


function setFormURL(form, command) {
  form.action = '/'+orgID()+'/'+ command;
}

// ::::::::::::::::::::: Generating a URL from highlighted Objects :::::::::::::::::

/*
   The general syntax of the generated URL for the cellular overview is

   <host>/<orgid>/cel-overview-open?zoomLevel=<n>&ids="..."&values="..."

   For the Regulatory Overview it is

   <host>/<orgid>/reg-overview-open?zoomLevel=<n>&ids="..."&values="..."

  o The <host> is the current base host name including any port
    number if present.
  o The <orgid> is a database unique identifier (e.g., ECOLI).
  o The <n> is an integer (e.g., 4). If the value is larger
  o The parameters zoomLevel and values are optional. If no zoomLevel is provided
    zoomLevel 0 will be assumed.
  o ids is a list of frame ids separated by commas.
  o values is a list of numerical values (integers, decimal, floating points).
  o The number of ids and values should match. If the number of values is shorter,
    the lowest values provided will be used. If the number of values is to long,
    the list of values is truncated to match the length of the list of ids.
  o If no values are provided this is a highlighting operation.
  o If values are provided, this a single experiment Omics Viewer URL.

*/


// TBD.
function genRegURL(){

}

/*
   Generate a URL for the current Cellular Overview. The URL
   contains the orgid, the zoom level, the highlighting.

*/
function genCelURL() {
  // var urlStr = genCelURLFromFrameids();
  var urlStr = genCelURLFromQueries();
  var e = document.getElementById('genURL');
  if (urlStr.length > 2000)
    alertUser("The generated URL has more than 2000 characters. This might cause some browsers to truncate it when used.");
  e.innerHTML = "<a href=\""+urlStr+"\">"+urlStr+"</a>";
}

/*
  For highlighted objects, this function often generates
  a much more compact URL compared to the function genCelURLFromFrameids.

*/
function genCelURLFromQueries() {
  /* Gather all the Highlighting operations done.

  The operation types are:

     rnids: reaction names or frame ids.
     rsubs: reaction substrings.
     recns: reaction EC numbers.
     pnids: pathway names or frame ids.
     psubs: pathway substrings.
     gnids: gene name or frame ids.
     gsubs: gene substrings.
     enids: enzyme names or frameids.
     esubs: enzyme substrings.
     cnids: compound names or frame ids.
     csubs: compound substrings.
     xnids: a mix of names and frame ids with or without Omics Viewer values.
     pcids: pathway frame ids based on curation status.
     rcids: reactions based on curation status.
     revis: reactions based on evidence selected.
     rcco:  reactions by cellular location
     pevis: pathways based on evidence selected.
     gregs: genes based on regulation selected.
     greps: genes on a replicons.
     coreg: reactions corresponding to the core genes of a pan-genome.
     uniqg: reactions corresponding to the unique genes of a pan-genome.
     rcos:  enzymes with cofactor by name
     rcof:  enzymes with cofactor by name (is this the same as rcos?)
     cosub: enzymes with cofactor by substring
     costr: enzymes with cofactor by structure
     ract:  enzymes with activator by name
     acos:  enzymes with activator by name (is this the same as ract?)
     asubs: enzymes with activator by substring
     astr: enzymes with activator by structure
     rios:  enzymes with inhibitor by name
     rinb:  enzymes with inhibitor by name
     rsubs: enzymes with inhibitor by substring
     istr: enzymes with inhibitor by structure
     shared: reactions shared with other organisms
     nshared: reactions not shared with other organisms

  */

  /* The highlighted objects, not with Omics values */
    var zoomLevel = WG.GetCurrentZoomLevel();
    var baseStr   = window.location.host;
    var orgid     = initCelOverview.orgid;
    var strParms = genCelURLQueryParms();
    return "http://"+baseStr+"/overviewsWeb/celOv.shtml?zoomlevel="+zoomLevel+"&orgid="+orgid+strParms;
}

/* paley:Mar-19-2019 Split this out from genCelURLFromQueries so it can be used
   both for generating bookmarks and for pathway collages.
 */
function genCelURLQueryParms() {
    var strParms = "";
    if (initCelOverview.layers)
	for(var i=0; i < initCelOverview.layers.length ; i++){
	    var oneLayer = initCelOverview.layers[i];
	    // Only visible layers are used.
	    if (oneLayer.visible == true && oneLayer.nodes) {
		strParms += "&"+oneLayer.op+"=";
		strParms += encodeURIComponent(oneLayer.queryString);
	    }
	}
    return strParms;
}
   
/*
  For highlighted objects, this function generates a compact URL.
  It also keeps the relationships arrows.
  TBD

*/
function genRegURLFromQueries() {

}

/*
   If the URL has parameters in it to highlight, replay the
   operations. The replay must be done in the order given.
   The zoom level parameter is not handled here as it was
   already processed when the page was loaded.

*/
function replayCelOperationsURL(){
  var vars = getAllURLVars();
  //alert("vars: "+vars+" length "+vars.length);
  for (var i=0; i < vars.length; i++) {
    switch (vars[i][0]) {
    case "rnids": case "rsubs":
    case "recns": case "pnids":
    case "psubs": case "gnids":
    case "gsubs": case "enids":
    case "esubs": case "cnids":
    case "csubs": case "xnids":
    case "pcids": case "rcids":
    case "revis": case "pevis":
    case "gregs": case "greps":
    case "coreg": case "uniqg":
    case "rcof" : case "rinb":
    case "ract" : case "rcos":
    case "cosub": case "costr":
    case "acos" : case "asubs":
    case "astr" : case "rios" :
    case "isubs" : case "istr" :
    case "omics":  case "rcco" :
    case "shared": case "nshared":
      replayCelOneParm(vars[i]);
      break;
    case "znids" :
      replayCelZParm(vars[i]);
      break;
       default: break;
    }
  }
}

/*
   Returns the nodes applying the search operation op
   with given query string. Do a query to the server via a search function.

   Arguments: op, a string ("rnids", ...)
              queryString, a string.

   Returns: array of nodes.
*/
function celGetNodesQuery(op, queryString, oneLayer,fn) {
  switch(op) {
  case "rnids":
    searchCelNameOrFrameID(queryString, "reactions", fn);
    break;
  case "rsubs":
    searchSubstringsCelServer(queryString, "reactions", fn);
    break;
  case "recns":
    searchSubstringsCelServer(queryString, 'reactionec', fn);
    break;
  case "pnids":
    searchCelNameOrFrameID(queryString, "pathways", fn);
    break;
  case "psubs":
    searchSubstringsCelServer(queryString, "pathways", fn);
    break;
  case "gnids":
    searchCelNameOrFrameID(queryString, "genes", fn);
    break;
  case "gsubs":
    searchSubstringsCelServer(queryString, "genes", fn);
    break;
  case "enids":
    searchCelNameOrFrameID(queryString, "enzymes", fn);
    break;
  case "esubs":
    searchSubstringsCelServer(queryString, "enzymes", fn);
    break;
  case "cnids":
    searchCelNameOrFrameID(queryString, "compounds", fn);
    break;
  case "csubs":
    searchSubstringsCelServer(queryString, "compounds", fn);
    break;
  case "pcids":
    celOverviewhighlightPathwayByCuration (queryString, fn);
    break;
  case "rcids":
    celOverviewhighlightEnzymeByCuration (queryString, fn);
    break;
  case "revis":
    celOverviewhighlightReactionbyEvidence (queryString, fn);
    break;
  case "pevis":
    celOverviewhighlightPathwaybyEvidence (queryString, fn);
    break;
  case "gregs":
    celOverviewhighlightGenebyRegulon (queryString, fn);
    break; 
  case "rcco":
    celOverviewhighlightReactionbyCCO (queryString, fn);
    break;
  case "greps":
    celOverviewHighlightAllGenesInReplicons1(fn, queryString);
    break;
  case "coreg":
    celOverviewHighlightCoreGenesInPanGenome(fn);
    break;
  case "uniqg":
    celOverviewHighlightUniqueGenesInPanGenome(fn);
    break;
  case "rcof":
    celOverviewhighlightReactionbyCofactor (queryString, fn);
    break;
  case "rinb":
    celOverviewhighlightReactionbyInhibitor (queryString, fn);
    break;
  case "ract":
    celOverviewhighlightReactionbyActivator (queryString, fn);
    break;
  case "rcos":
    celOverviewhighlightReactionbyCoFactorName (queryString, fn);
    break;
  case "cosub":
    celOverviewhighlightReactionbyCoFactorSubstring (queryString, fn);
    break;
  case "costr":
    celOverviewhighlightReactionbyCoFactorStructure (queryString, fn);
    break;
  case "acos":
    celOverviewhighlightReactionbyActivatorName (queryString, fn);
    break;
  case "astr":
    celOverviewhighlightReactionbyActivatorStructure (queryString, fn);
    break;
  case "asubs":
    celOverviewhighlightReactionbyActivatorSubstring (queryString, fn);
    break;
  case "rios":
    celOverviewhighlightReactionbyInhibitorName(queryString, fn);
    break;
  case "isubs":
    celOverviewhighlightReactionbyInhibitorSubstring(queryString, fn);
    break;
  case "istr":
    celOverviewhighlightReactionbyInhibitorStructure(queryString, fn);
    break;
  case "shared": case "nshared":
    celOverviewhighlightSpeciesComparison(op, fn, queryString);
    break;
  case "gfile":
    searchGeneNamesCelServer(oneLayer, fn);
    break;
  case "xnids":
    // This case mixes nodes and names of different types:
    // compounds, reactions, genes, enzymes, pathways.
    searchMixingCelServer(queryString, fn);
    // Need the Omics case TBD.
    break;
  case "znids":
    znidNodes(queryString, fn);
    break;
  case "omics":
    fn(null);
    break;
  default: alertUser('celGetNodesQuery: unknown operation '+op+' for query '+queryString);
  }
}

/*
  Apply the parameter parm which is a highlighting operation.
  This will create a new highlight layer.
  The given parameter string may have several values separated
  by commas, e.g., rnids=hydro,hydra.

  Arguments: parm is a vector of two strings.
             The first string is the name of the parameter, which
             is the operation to highlight (aka search),
             the second the value of the parameter (aka string to search).

*/
function replayCelOneParm(parm) {
  var op = parm[0]; // The name of the parm says what to do.
  var queryStrings = parseParm(parm[1]); // The string next to "<op>=" may have several values.

  //alert(queryStrings);
  for (var k=0; k < queryStrings.length; k++){
    var queryString = queryStrings[k];
    // For "omics" operation, there is no nodes at the moment.
    var continuation = function (nodes) {
      switch (op) {
      case "rnids":
	celHighlight("Reaction '"+queryString+"'", nodes, queryString, 'rnids');
	break;
      case "rsubs":
	celHighlight("Reaction '"+queryString+"'", nodes, queryString, 'rsubs');
	break;
      case "recns":
	celHighlight("Reaction '"+queryString+"'", nodes, queryString, 'recns');
	break;
      case "pnids":
	celHighlight("Pathway '"+queryString+"'", nodes, queryString, 'pnids');
	break;
      case "psubs":
	celHighlight("Pathway '"+queryString+"'", nodes, queryString, 'psubs');
	break;
      case "gnids":
	celHighlight("Gene '"+queryString+"'", nodes, queryString, 'gnids');
	break;
      case "gsubs":
	celHighlight("Gene '"+queryString+"'", nodes, queryString, 'gsubs');
	break;
      case "enids":
	celHighlight("Enzymes '"+queryString+"'", nodes, queryString, 'enids');
	break;
      case "esubs":
	celHighlight("Enzymes '"+queryString+"'", nodes, queryString, 'esubs');
	break;
      case "cnids":
	celHighlight("Compound '"+queryString+"'", nodes, queryString, 'cnids');
	break;
      case "csubs":
	celHighlight("Compound '"+queryString+"'", nodes, queryString, 'csubs');
	break;
      case "pcids" :
	celHighlight("Curated Pathways", nodes, queryString, 'pcids');
        break;
      case "rcids" :
	celHighlight("Curated Reactions", nodes, queryString, 'rcids');
        break;
      case "revis" :
	celHighlight("Reaction evidence", nodes, queryString, 'revis');
        break;
      case "pevis" :
	celHighlight("Pathway evidence", nodes, queryString, 'pevis');
	break; 
      case "gregs":
	celHighlight("regulon", nodes, queryString, 'regulons');
	break;
      case "rcco":
	celHighlight("cco", nodes, queryString, 'rcco');
	break;	
      case "coreg":
	celHighlight('Pan-Genome Core', nodes , '', 'coreg');
	break;
      case "uniqg":
	celHighlight('Pan-Genome Unique', nodes, '', 'uniqg');
	break;
      case "rcof":
	celHighlight("cofactor", nodes, queryString, 'rcof');
	break;
      case "rinb":
	celHighlight("inhibitor", nodes, queryString, 'rinb');
	break;
      case "ract":
	celHighlight("activator", nodes, queryString, 'ract');
	break;
      case "rcos":
	celHighlight("CoFactors '"+queryString+"'", nodes, queryString, 'rcos');
	break;
      case "cosub":
	celHighlight("CoFactors '"+queryString+"'", nodes, queryString, 'cosub');
	break;
      case "costr":
	celHighlight("CoFactors '"+queryString+"'", nodes, queryString, 'costr');
	break;
      case "astr":
	celHighlight("Activators '"+queryString+"'", nodes, queryString, 'astr');
	break;
      case "acos":
	celHighlight("Activators '"+queryString+"'", nodes, queryString, 'acos');
	break;
      case "asubs":
	celHighlight("Activators '"+queryString+"'", nodes, queryString, 'asubs');
	break;
      case "rios":
	celHighlight("Inhibitors '"+queryString+"'", nodes, queryString, 'rios');
	break;
      case "isubs":
	celHighlight("Inhibitors '"+queryString+"'", nodes, queryString, 'isubs');
	break;
      case "istr":
	celHighlight("Inhibitors '"+queryString+"'", nodes, queryString, 'istr');
	break;
      case "greps":
        for (var i = 0 ; i < nodes.length; i++) {
	  celHighlight(nodes[i].nas , nodes[i].nodes, queryString, 'greps');
	}
	//  celOverviewHighlightAllGenesInReplicons();
	break;
      case "shared": case "nshared":
	celHighlight("Species Comparison '"+queryString+"'", nodes, queryString,op);
	break;
      case "xnids":
	// This case mixes nodes and names of different types:
	// compounds, reactions, genes, enzymes, pathways.
	celPlayXnip(queryString);
	break;
      case "omics":
	// This is for the Omics viewer where the JavaScript data is in a file
	// on the server.
	showOvBusy();
	var parms = String(document.location).split('?');
	var newParms = parms[1];

	if (!newParms) {
          alertUser('Error, omics request has no parameters at all: '+String(document.location));
          return;
	}
	receiveOmicsData.ov = initCelOverview;
	var orgid = orgID();
	var url = "/"+orgid+"/overview-expression-load-omics-from-server?"+newParms;
	YAHOO.util.Connect.asyncRequest('GET', url, receiveOmicsData);
	break;
      default: break;
      } };
    celGetNodesQuery(op, queryString, null, continuation)
  }
}

var jsonp = typeof(JSON) != "undefined";
function jsonparse(s) {
  if (jsonp) {
    return JSON.parse(s);
  }
  else {
    // PKM!
    return eval("[" + s + "]")[0];
  }
}


// For handling ZNIDS parameter, which works a little differently.  In this case queryString is a JSON string.
function replayCelZParm(parm) {
  var op = parm[0]; // The name of the parm says what to do.
  if (op != "znids") alertUser('Internal error for znids');
  var queryString = parm[1];
  var query = jsonparse(queryString);
  var label = query['label'];
  // these options aren't implemented yet, might be useful in the future
  //  var color = query['color'];
  //  var type = query['type'];
  var continuation = function (nodes) {
    celHighlight(label, nodes, queryString, op, null);
  };
  znidNodes(queryString, continuation);
}

function znidNodes(queryString, fn) {
  var query = jsonparse(queryString);
  var group = query['group'];
  var ids = query['ids'];
  var zoom = WG.GetCurrentZoomLevel();
  if (group) {
    var continuation = function (ids) {
      getCelNodesServer(ids.join(';'), 
			function(result) {
			  fn(result);
			},
			zoom);
    }
    getGroupIDs(group, query['col'], continuation);
  }
  else {
  getCelNodesServer(ids.join(';'), 
		    function(result) {
                      fn(result);
                    },
		    zoom);
  }}


// group: group id string
  function getGroupIDs(group, col, fn) {
    var url = "/get-group-ids"
    var request = new XMLHttpRequest();
    var parms = "group="+group+"&col="+col;
    request.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
	fn(eval(this.responseText));
      } };
    request.open("POST", url, true);
    request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    request.send(parms);
  }


function addGenURLToFavorites(){
  var url = document.getElementById('genURL');
  addToFavorites(url);
}

function addToFavorites(url){
  if (window.external &&
      typeof(window.external.AddFavorite) == 'function') // IE
    window.external.AddFavorite(url, "Cellular Overview");
  else alertUser("Sorry, your browser doesn't support this automatic functionality. Instead, drag the bookmark above to your bookmark toolbar or your favorite folder.");
}

// Arguments: a string of comma separated terms
// Returns: an array of strings.
function parseParm(value){
  if (typeof(value) == 'string') {
    var values = value.split(',');
    return values;
  }
  return [];
}

// Returns an array of arrays of two elements [varName, value]
function getAllURLVars(){
  var urlInTwo = String(document.location).split('?');
  if(urlInTwo[1]) {
    var vars = new Array();
    var urlVars = urlInTwo[1].split('&');
    for (var i=0; i < urlVars.length; i++) {
      if (urlVars[i]) {
        var urlVarPair = urlVars[i].split('=');
        if (urlVarPair[0] && urlVarPair[1])
          vars.push([urlVarPair[0],decodeURIComponent(urlVarPair[1])]);
      }
    }
    return vars;
  }
  return [];
}

/* Get the value of variable varName in the URL.
   Return null if that variable is not present.
*/
function getUrlVar(varName){
  var urlInTwo = String(document.location).split('?');
  if(urlInTwo[1]) {
    var urlVars = urlInTwo[1].split('&');
    for (var i=0; i < urlVars.length; i++) {
      if (urlVars[i]) {
        var urlVarPair = urlVars[i].split('=');
        if (urlVarPair[0] && urlVarPair[0] == varName) return urlVarPair[1];
      }}}
  return null;
}

/*
   Show a message in a dialog that is coming from the server.
   This could be an internal 500 error from the server.

*/
function showServerError(msg, e, evalText){
   showOvNotBusy();
   showError(msg,
             'The browser says "'+e+'".<br>The data received from the server is: '+evalText,
             'Server Error');
}

function showWarning(msg, headerText){
  showOvNotBusy();
  var dialog = new YAHOO.widget.Dialog("warningDialog",
      { width: "50em", fixedcenter: true, modal: true, visible: true, draggable: true,
        buttons: [{text:"Dismiss", handler: function(){dialog.hide()}, isDefault:true }]
      });
  dialog.setHeader(headerText);
  dialog.setBody(msg);
  dialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
  dialog.render(document.body);
}


/*
    Show an error message using a Yahoo dialog window.
    The dialog as a short and long text. The long text is shown only if
    the user click a button.
 */
function showError(shortMsg, longMsg, headerText){
  showOvNotBusy();
  var dialog = new YAHOO.widget.Dialog("errorDialog",
      { width: "50em", fixedcenter: true, modal: false, visible: true, draggable: true,
        buttons: [{text:"Dismiss", handler: function(){dialog.hide()}, isDefault:true },
                  {text:"Show Details", handler: function(){dialog.setBody(longMsg); dialog.render(document.body);}}
                 ]
      });
  dialog.setHeader(headerText);
  dialog.setBody(shortMsg);
  dialog.cfg.setProperty("icon", YAHOO.widget.Dialog.ICON_WARN);
  dialog.render(document.body);
}

// ::::::::::::::::::::: Dialog for Retrieving Omics Data from a DB :::::::::::

var omicsDbMetadata = null;
var omicsDbMetadataAssocArray = null;
var selectedOmicsDataset = null;
var datasetDetailPanel = null;

/* Pop up the dialog for requesting omics experiment data from the specified
   datasource.
 */
function omicsViewerDbDialog(ov, datasource) {
  var speciesName = orgNameFromOrgID(ov.orgid).split(" ").slice(0,2).join(" ");
  var url = "omics-db.html";
  var continuation = function () {
    if (datasource == 'cookie') {
      document.getElementById('datasetQuery').style.display = 'none';
      submitDatasetQuery(true);
    }
    else {
      document.getElementById('datasourceName').innerHTML = datasource;  
      document.getElementById('datasource').value = datasource;
      document.getElementById('omicsDialogOrgName').innerHTML = speciesName;
    }
    var celov = (ov === initCelOverview);
    document.getElementById('ov').value = celov ? "cel":"reg";
    // The option for a table of pwys should only be available for celov
    if (!celov) document.getElementById('displayDiv').style.display = 'none';
    initDetailPanel();
    omicsSubmitHandler = function(){submitDbOmics(ov)};
    dialogOmics.show();
  };
  setOmicsViewerDialogBody(url, continuation);
}

function initDetailPanel () {
  var id = 'detailPanel';
  if (!document.getElementById(id)) {
    var div = document.createElement('div');
    div.id = id;
    div.display = 'block';
    document.body.appendChild(div);
    datasetDetailPanel = new YAHOO.widget.Panel("datasetDetailPanel", {width:"600px", visible:false, constraintoviewport:true, zIndex:30000});
    datasetDetailPanel.render(id);
    // Not sure why this is needed, but it is or else the panel remains invisible:
    document.getElementById('datasetDetailPanel').style.display = 'block';
  }
}

function getUniqueDatasetId (dataset) {
  return dataset.dsId + ' ' + dataset.id;
}

function buildOmicsDbMetadataAssocArray () {
  omicsDbMetadataAssocArray = new Array();
  for (var i=0; i< omicsDbMetadata.length; i++) {
    var dataset = omicsDbMetadata[i];
    omicsDbMetadataAssocArray[getUniqueDatasetId(dataset)] = dataset;
  }
}

function getOmicsDataset(uniqueId) {
  return omicsDbMetadataAssocArray[uniqueId];
}

/* Submit the query to retrieve available datasets and handle the response.
   Args:
     fromCookie: boolean, true if the set of datasets should come from the 
                 recent datasets cookie.
 */
function submitDatasetQuery(fromCookie) {
  var url;
  if (fromCookie)
    url = "/omics-datasets/get-recent";
  else {
    var datasource = document.getElementById('datasource').value;
    var keyword = document.getElementById('keyword').value;
    url = "/ajax-get-omics-metadata?ds=" + datasource + "&orgid=" + orgID();
    if (keyword) url = url + "&keyword=" + keyword;
  }
  var loadingIconDiv = document.getElementById('loadingIcon');
  var callback = {
    success: function(oResponse) {
      loadingIconDiv.style.display = 'none';
      var oResults;
      if (oResponse.responseText)
        oResults = eval("(" + oResponse.responseText + ")");
      if((oResults) && (oResults.length)) omicsDbMetadata = oResults;
      else omicsDbMetadata = [];
      buildOmicsDbMetadataAssocArray();
      selectedOmicsDataset = null;
      updateOmicsViewerDbDialogForQueryResponse(fromCookie);
    },
    failure: function(oResponse) {
      loadingIconDiv.style.display = 'none';
      failOmicsRequest(oResponse);
    }
  };
  loadingIconDiv.style.display = 'block';
  YAHOO.util.Connect.asyncRequest('GET', url, callback);
}

/* Pop up the panel that shows experiment details
 */
function showDatasetDetails() {
  var text = "";
  if (selectedOmicsDataset) {
    var dsName = selectedOmicsDataset.dsName || selectedOmicsDataset.dsId;
    var acc = selectedOmicsDataset.acc;
    var title = selectedOmicsDataset.title;
    var org = selectedOmicsDataset.org;
    var desc = selectedOmicsDataset.desc;
    var cit = selectedOmicsDataset.cit;
    var cols = selectedOmicsDataset.columns;
    var datatype = (selectedOmicsDataset.abs) ? "Intensities" : "Log Ratios";
    var prefix = "<tr><td><b>";
    var divider = "</b></td><td>";
    var suffix = "</td></tr>";
    text = "<table>";
    text += prefix + "Database" + divider + dsName + suffix;
    if (acc) 
      text += prefix + "Accession" + divider + acc + suffix;
    else
      text += prefix + "ID" + divider + selectedOmicsDataset.id + suffix;
    text += prefix + "Title" + divider + title + suffix;
    text += prefix + "Organism" + divider + org + suffix;
    if (desc) text += prefix + "Description" + divider + desc + suffix;
    text += prefix + "Data Type" + divider + datatype + suffix;
    if (cit) text += prefix + "Publication" + divider + cit + suffix;
    if (cols) {
      text += prefix + "Columns" + divider;
      for (var i=0; i<cols.length; i++) {
        text += cols[i].id + ": " + cols[i].name + "<br>";
      }
      text += suffix;
    }
    text += "</table>";
  }
  datasetDetailPanel.setBody(text);
  datasetDetailPanel.show();
}

function datasetHeader (dataset, includeDatasource) {
  var header = (dataset.acc || dataset.id) + ": ";
  if (includeDatasource) header = dataset.dsId + " " + header;
  if (dataset.firstAuthor) header += dataset.firstAuthor + " ";
  header += dataset.title;
  if (header.length > 105) header = header.slice(0,100) + "...";
  return header;
}

function columnHeader (column) {
  var header = column.id + ": " + column.name;
  if (header.length > 105) header = header.slice(0,100) + "...";
  return header;
}

/* After the query for available datasets is submitted and the metadata is
   returned, this fn updates the dialog accordingly.
   Args:
     fromCookie: boolean, true if the set of datasets came from the recent
                 datasets cookie.
 */
function updateOmicsViewerDbDialogForQueryResponse(fromCookie) {
  selectedOmicsDataset = null;
  document.getElementById('datasetSelectedDiv').style.display = 'none';
  if (fromCookie && omicsDbMetadata.length == 0)
    document.getElementById('datasetCountDiv').innerHTML = 'You have no recent GEO datasets.';
  else
    document.getElementById('datasetCount').innerHTML = omicsDbMetadata.length;
  document.getElementById('datasetCountDiv').style.display = 'block';
  var datasetEl = document.getElementById('datasetSelector');
  for (var i=datasetEl.length-1; i>=0; i--) datasetEl.remove(i);
  if (omicsDbMetadata.length>0) {
    datasetEl.size = Math.min(10, omicsDbMetadata.length);
    for (var i=0; i<omicsDbMetadata.length; i++) {
      var dataset = omicsDbMetadata[i];
      var option = createOption(datasetHeader(dataset, fromCookie), 
                                getUniqueDatasetId(dataset));
      datasetEl.add(option, datasetEl.options[i]);
    }
    if (omicsDbMetadata.length == 1) {
      selectDataset(omicsDbMetadata[0]);
      datasetEl.selectedIndex = 0;
    }
    document.getElementById('datasetSelectorDiv').style.display = 'block';
  }
  else {
    document.getElementById('datasetSelectorDiv').style.display = 'none';
  }
}

function selectDataset(dataset) {
  selectedOmicsDataset = dataset;
  var column1El = document.getElementById('col1');
  var column2El = document.getElementById('col2');
  var columns = dataset.columns;
  for (var i=column1El.length-1; i>=0; i--) column1El.remove(i);
  for (var i=column2El.length-1; i>=0; i--) column2El.remove(i);
  if (columns.length > 0) {
    column1El.size = Math.min(10, columns.length);
    column2El.size = Math.min(10, columns.length);
    for (var i=0; i<columns.length; i++) {
      var col = columns[i];
      var header = columnHeader(col);
      column1El.add(createOption(header, col.id), column1El.options[i]);
      column2El.add(createOption(header, col.id), column2El.options[i]);
    }
    document.getElementById('animation').selectedIndex = 0;
    animationSelected(0);
    document.getElementById('multiDataColumnDiv').style.display = 'block';
  }
  else {
    document.getElementById('multiDataColumnDiv').style.display = 'none';
  }
  document.getElementById('datasetSelectedDiv').style.display = 'block';
}

function animationSelected(value) {
  var column1El = document.getElementById('col1');
  if (value == 1) {
    document.getElementById('ratioDiv').style.display = 'none';
    document.getElementById('col2Div').style.display = 'none';
    document.getElementById('col1Header').innerHTML = 'Select Columns:';
    column1El.multiple = true;
    var allSelected = new Array();
    for (var i=0; i<column1El.options.length; i++) {
      var option = column1El.options[i];
      allSelected[option.value] = option.selected;
      option.onclick = function() { 
        allSelected[this.value] = !allSelected[this.value];
        for (var j=0; j<column1El.options.length; j++) {
          column1El.options[j].selected = allSelected[column1El.options[j].value];
        }
      };
    }
  }
  else {
    document.getElementById('numcolumns').selectedIndex = 0;
    column1El.multiple = false;
    for (var i=0; i<column1El.options.length; i++)
      column1El.options[i].onclick = null;
    document.getElementById('ratioDiv').style.display = 'block';
    ratioSelected(1);
  }
}

function ratioSelected(value) {
  if (value == 2) {
    document.getElementById('col2Div').style.display = 'block';
    document.getElementById('col1Header').innerHTML = 'Numerator Column:';
  }
  else {
    document.getElementById('col2Div').style.display = 'none';
    document.getElementById('col1Header').innerHTML = 'Select Column:';
  }
}


function downloadDataset() {
  var link = selectedOmicsDataset.uri;
  if (link) window.open(link);
}

function submitDbOmics (ov) {
  if (!(selectedOmicsDataset && document.getElementById('col1').selectedIndex>-1)) {
      alertUser ('You must select a dataset and column.');
      return false;
    }
  if (document.getElementById('displayType').selectedIndex>0 && 
      !validNumberCheck(document.getElementById('tableThreshold'), 'pathway table threshold'))
    return false;
  dialogOmics.hide();
  showOvBusy('<h3>Retrieving Data...</h3>  Note that retrieving a large dataset might take more than 30 seconds to complete.');
  var displayType = document.getElementById('displayType');
  if (displayType[1].selected) {
    // Table of pathways requested
    window.open(dbOmicsPwyTableRequest(), '_self');
  }
  else {
    receiveOmicsData.ov = ov;
    YAHOO.util.Connect.asyncRequest('GET', dbOmicsRequest(), receiveOmicsData);
    if (displayType[2].selected) {
      // Table of pwys requested in addition to regular display, in new tab
      window.open(dbOmicsPwyTableRequest(), '_blank');
    }
  }
}

/* Generate the url for retrieving the actual omics data
 */
function dbOmicsRequest () {
  var ov = document.getElementById('ov').value;
  return '/ajax-get-omicsdb-data-js?ov=' + ov + dbOmicsUrlParams();
}

/* Generate the url for the table of pathways
 */
function dbOmicsPwyTableRequest () {
  var tableThreshold = document.getElementById('tableThreshold').value;
  return '/omics-db-pathway-table?table=' + tableThreshold + dbOmicsUrlParams();
}

function dbOmicsUrlParams () {
  var req = commonOmicsUrlParams(true);
  req += '&dataset=' + selectedOmicsDataset.acc;
  req += '&id=' + selectedOmicsDataset.id;
  req += '&dsid=' + selectedOmicsDataset.dsId;
  return req;
}

// These are url params used both when getting data from an external database
// and from a group.
function commonOmicsUrlParams (allow2columns) {
  var req = '&orgid=' + orgID();
  var col1 = document.getElementById('col1').options;
  for (var i=0; i<col1.length; i++) {
    if (col1[i].selected) req += '&col1=' + col1[i].value;
  }
  if (allow2columns) {
    var numcolumns = document.getElementById('numcolumns');
    req += '&numcolumns=' + numcolumns.options[numcolumns.selectedIndex].value;
    var col2 = document.getElementById('col2');
    if (col2.selectedIndex >= 0) 
      req += '&col2=' + col2.options[col2.selectedIndex].value;
  }
  var color = document.getElementById('color');
  if (color) req += '&color=' + color.options[color.selectedIndex].value;
  var threshold = document.getElementById('thresholdv');
  if (threshold && threshold.value) req += '&threshold=' + threshold.value;
  var maxcutoff = document.getElementById('maxcutoffv');
  if (maxcutoff && maxcutoff.value) req += '&maxcutoff=' + maxcutoff.value;
  return req;
 }

/* Currently the SOAP errors don't generate useful error msgs -- once they do,
   we may want to actually print the error msg here. */
function failOmicsRequest (oResponse) {
    showOvNotBusy();
    var oResults;
    try {
	oResults = eval("(" + oResponse.responseText + ")");
	if (oResults && oResults.error) alert(oResults.error);
	else alert ("Request failed.  Please try again.");
    }
    catch (err) {
	alert ("Request failed.");
    }
}
// ::::::::::::::::: Dialog for Retrieving Omics Data from a Group :::::::::::

var omicsGroupColumns = null;

// Pop up the dialog for requesting omics experiment data from a group
function omicsViewerGroupDialog(ov) {
  var url = "omics-group.html";
  var continuation = function () {
    var celov = (ov === initCelOverview);
    document.getElementById('ov').value = celov ? "cel":"reg";
    // The option for a table of pwys should only be available for celov
    if (!celov) document.getElementById('displayDiv').style.display = 'none';
    populateGroupSelectorDiv();
    omicsSubmitHandler = function(){submitGroupOmics(ov)};
    dialogOmics.show();
  }
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      var results = eval("(" + this.responseText + ")");
      omicsGroupColumns = ((results) && (results.length)) ? results : [];
      if (omicsGroupColumns.length == 0)
	alert("You have no recently visited SmartTable for this organism potentially containing omics data.  Try visiting your SmartTable of interest first.");
      else setOmicsViewerDialogBody(url, continuation); 
    }
  };
  request.open("GET", "/get-groups-list?orgid=" + ov.orgid, true);
  request.setRequestHeader("Accept", "application/json" );
  request.send();
}

// Populate the group selector with all the available groups, and preselect
// the first one.
function populateGroupSelectorDiv() {
  document.getElementById('datasetSelectedDiv').style.display = 'none';
  var datasetEl = document.getElementById('group');
  for (var i=datasetEl.length-1; i>=0; i--) datasetEl.remove(i);
  for (var i=0; i<omicsGroupColumns.length; i++) {
    var dataset = omicsGroupColumns[i];
    var option = createOption(dataset.title, dataset.id);
    datasetEl.add(option, datasetEl.options[i]);
  }
  selectGroup(omicsGroupColumns[0].id);
  datasetEl.selectedIndex = 0;
}

/* When a group is selected in the dialog, populate the different column fields
   with the columns from that group.  By default, we select the first column
   as containing the identifiers, and the second as the data column.

   Argument: groupId: a string, the group identifier
 */
function selectGroup(groupId) {
    var group;
    for (var i=0; i< omicsGroupColumns.length; i++)
	if (omicsGroupColumns[i].id == groupId) group = omicsGroupColumns[i];
    var column0El = document.getElementById('col0');
    var column1El = document.getElementById('col1');
    var column2El = document.getElementById('col2');
    var columns = group.columns;
    for (var i=column0El.length-1; i>=0; i--) column0El.remove(i);
    for (var i=column1El.length-1; i>=0; i--) column1El.remove(i);
    for (var i=column2El.length-1; i>=0; i--) column2El.remove(i);
    for (var i=0; i<columns.length; i++) {
	var col = columns[i];
	column0El.add(createOption(col.name, col.id), column0El.options[i]);
	column1El.add(createOption(col.name, col.id), column1El.options[i]);
	column2El.add(createOption(col.name, col.id), column2El.options[i]);
    }
    column0El.selectedIndex = 0;
    column1El.selectedIndex = 1;
    column2El.selectedIndex = 1;
    var multiValue = (group.appdata && columns.length>2) ? 1 : 0;
    document.getElementById('animation').selectedIndex = multiValue;
    animationSelected(multiValue);
    if (group.appdata) {
	var relVal = (group.appdata.rel) ? 0 : 1;
	document.getElementById('relative').selectedIndex = relVal;
	relVsAbsSelected(relVal);
	if (group.appdata.rel) {
	    var logVal = (group.appdata.log) ? 0 : 1;
	    document.getElementById('log').selectedIndex = logVal;
	}
	if (columns.length > 2) {
	    for (var i=2; i<columns.length; i++) {
		column1El.options[i].selected = true;
		column1El.selectedIndex[column1El.selectedIndex.length] = columns[i].id;
	    }
	}
    }
    document.getElementById('datasetSelectedDiv').style.display = 'block';
}


function submitGroupOmics (ov) {
  if (!(document.getElementById('group').selectedIndex>-1 && document.getElementById('col1').selectedIndex>-1 && document.getElementById('col0').selectedIndex>-1)) {
      alertUser ('You must select a SmartTable and columns.');
      return false;
    }
  if (document.getElementById('displayType').selectedIndex>0 && 
      !validNumberCheck(document.getElementById('tableThreshold'), 'pathway table threshold'))
    return false;
  dialogOmics.hide();
  showOvBusy('<h3>Retrieving Data...</h3>  Note that retrieving a large dataset might take more than 30 seconds to complete.');
  var displayType = document.getElementById('displayType');
  if (displayType[1].selected) {
    // Table of pathways requested
    window.open(groupOmicsPwyTableRequest(), '_self');
  }
  else {
    receiveOmicsData.ov = ov;
    YAHOO.util.Connect.asyncRequest('GET', groupOmicsRequest(), receiveOmicsData);
    if (displayType[2].selected) {
      // Table of pwys requested in addition to regular display, in new tab
      window.open(groupOmicsPwyTableRequest(), '_blank');
    }
  }
}

function relVsAbsSelected(value) {
  if (value == 1) {
    document.getElementById('ratioDiv').style.display = 'none';
    document.getElementById('logDiv').style.display = 'none';
  }
  else {
    document.getElementById('ratioDiv').style.display = 'block';
    document.getElementById('logDiv').style.display = 'block';
  }
  ratioSelected(1);
}


/* Generate the url for retrieving the actual omics data
 */
function groupOmicsRequest () {
  var ov = document.getElementById('ov').value;
  return '/ajax-get-omics-group-data-js?ov=' + ov + groupOmicsUrlParams();
}

/* Generate the url for the table of pathways
 */
function groupOmicsPwyTableRequest () {
  var tableThreshold = document.getElementById('tableThreshold').value;
  return '/omics-group-pathway-table?table=' + tableThreshold + groupOmicsUrlParams();
}

function groupOmicsUrlParams () {
  var group = document.getElementById('group');
  var req = '&group=' + group.options[group.selectedIndex].value;
  var col0 = document.getElementById('col0');
  req += '&col0=' + col0.options[col0.selectedIndex].value;
  var relative = document.getElementById('relative');
  var relValue = relative.options[relative.selectedIndex].value;
  req += '&rel=' + relValue;
  req += commonOmicsUrlParams(relValue == 0);
  if (relValue == 0) {
    var log = document.getElementById('log');
    req += '&log=' + log.options[log.selectedIndex].value;
  }
  return req;
}


/* Generate url for highlighting genes based on replicons*/

function celOverviewHighlightAllGenesInReplicons1(fn, queryString){
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var url = "/"+orgid+"/cel-overview-all-replicons-genes?zoomlevel=";
  if (queryString) url += "&object="+queryString;
  getRequestAsync(url, fn);
}

function celOverviewHighlightAllGenesInReplicons(){
  var continuation = function (nodes) {
    for (var i = 0; i < nodes.length; i++) {
      celHighlight(nodes[i].nas , nodes[i].nodes, nodes[i].pframeid, 'greps');
    } };
  celOverviewHighlightAllGenesInReplicons1(continuation);
}

function celOverviewhighlightReactionbyActivator(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-activator-any-name-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function ReactionActivator(){
ReactionActivatorDialog();
}

//celDialogReactionCCO
function handleReactionActivator() {
    handleCelHighlightReactionActivator()};

/* a dialog for Gene regulation*/

function ReactionActivatorDialog(){
  var orgid = initCelOverview.orgid;
  var url     = "/"+orgid+"/reactionActivator.html";
  setDialogReactionActivatorBody(url);
}

function setDialogReactionActivatorBody(url) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      celDialogReactionActivator.setBody(this.responseText);
      celDialogReactionActivator.show(); }
    };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function celOverviewhighlightReactionbyCofactor(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-cofactor-any-name-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}  

function ReactionCofactor(){
ReactionCofactorDialog();
}

function handleReactionCofactor() {
    handleCelHighlightReactionCofactor()};

function ReactionCofactorDialog(){
  var orgid = initCelOverview.orgid;
  var url     = "/"+orgid+"/reactionCofactor.html";
  setDialogReactionCofactorBody(url);
}

function setDialogReactionCofactorBody(url) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      celDialogReactionCofactor.setBody(this.responseText);
      celDialogReactionCofactor.show();
    }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function WhatsSelected(cofactor) {
var SelectedOptions = document.getElementById('cofactor');

var cnt = 0; var op ='';
for (var i=0;i<SelectedOptions.length;i++) {
if (SelectedOptions.options[i].selected) {
	cnt++;
 op +=  SelectedOptions.options[i].text;
//return op;
}
}

}


function celOverviewhighlightReactionbyInhibitor(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-inhibitor-any-name-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      handleServerAnswerNodes(this);
      fn(this.result);
    }
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

function ReactionInhibitor(){
ReactionInhibitorDialog();
}

//celDialogReactionCCO
function handleReactionInhibitor() {
    handleCelHighlightReactionInhibitor()};

/* a dialog for Gene regulation*/

function ReactionInhibitorDialog(){
  var orgid = initCelOverview.orgid;
  var url     = "/"+orgid+"/reactionInhibitor.html";
setDialogReactionInhibitorBody(url);
}

function setDialogReactionInhibitorBody(url) {
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      celDialogReactionInhibitor.setBody(this.responseText);
      celDialogReactionInhibitor.show();
    } };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

/* Highlight the rxns corresponding to the core (shared) genes in a Pan-Genome PGDB */
function handleCelHighlightCoreGenesInPanGenome(){
  var continuation = function (nodes) {
    celHighlight('Pan-Genome Core', nodes , '', 'coreg');
  };
  celOverviewHighlightCoreGenesInPanGenome(continuation);
}

function celOverviewHighlightCoreGenesInPanGenome(fn){
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel(); 
  var url = "/"+orgid+"/cel-overview-core-pan-genome-genes?zoomlevel="+zoomLevel;
  getRequestAsync(url,fn);
}

/* Highlight the rxns corresponding to the unique genes in a Pan-Genome PGDB */
function handleCelHighlightUniqueGenesInPanGenome(){
  var continuation = function (nodes) {
    celHighlight('Pan-Genome Unique', nodes, '', 'uniqg');
  };
  celOverviewHighlightUniqueGenesInPanGenome(continuation);
}

function celOverviewHighlightUniqueGenesInPanGenome(fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var url = "/"+orgid+"/cel-overview-unique-pan-genome-genes?zoomlevel="+zoomLevel;
  getRequestAsync(url,fn);
}

/* Generate url for highlighting reactions by curation  */
// RAB NEW
function celOverviewhighlightEnzymeByCuration(query,fn) {
    var s = "object="+query;
    var orgid = initCelOverview.orgid;
    var zoomLevel = WG.GetCurrentZoomLevel();
  var url = "/"+orgid+"/cel-overview-enzyme-by-curation-to-nodes?zoomlevel="+zoomLevel;
  postRequestAsync(url, fn, s);
}


/* Generate url for highlighting pathways by curation  */
function celOverviewhighlightPathwayByCuration(query,fn) {
  var s = "object="+query;
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var url = "/"+orgid+"/cel-overview-pathways-by-curation-to-nodes?zoomlevel="+zoomLevel;
  postRequestAsync(url,fn,s);
}

function celOverviewhighlightReactionbyCCO(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-reactions-by-cco-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function ReactionCCO(){
ReactionCCODialog();
}

//celDialogReactionCCO
function handleReactionCCO() {
    handleCelHighlightReactionCCO()};

/* a dialog for Gene regulation*/

function ReactionCCODialog() {
  var orgid = initCelOverview.orgid;
  var url     = "/"+orgid+"/reactionCCO.html";
setDialogReactionCCOBody(url);
}

function setDialogReactionCCOBody(url) {
  var text    = null;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      text = request.responseText;
      celDialogReactionCCO.setBody(text);
      celDialogReactionCCO.show() } };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

/* Search for nodes based on regulation. The list of regulation
    are presented as a menu.
    We use the server to answer such a question. 

    Arguments: stringName, a string.
    Returns: a vector of frame ids  */
function celOverviewhighlightGenebyRegulon(query, fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-gene-by-regulation-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function GeneRegulon(){
GeneRegulonDialog();
}


function handleGeneRegulon() {
    handleCelHighlightGeneRegulon()};

/* a dialog for Gene regulation*/

function GeneRegulonDialog(){
  var orgid = initCelOverview.orgid;
  var url     = "/"+orgid+"/geneRegulation.html";
  setDialogGeneRegulonBody(url);
}

function setDialogGeneRegulonBody(url) {
  var text    = null;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      text = request.responseText;
      celDialogGeneRegulon.setBody(text);
      celDialogGeneRegulon.show(); }};
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}
 
/*  Search for nodes based on reaction evidence. The list of evidences
    are presented as a menu.
    We use the server to answer such a question. 

    Arguments: stringName, a string.
    Returns: a vector of frame ids.
*/
function celOverviewhighlightReactionbyEvidence(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-reaction-by-evidence-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

/* function to handle evidence dialog.*/
function ReactionEvidence(){
    ReactionEvidenceDialog();
}

//var EvidenceSubmithandler;

function handleReactionEvidence() {
    handleCelHighlightReactionEvidence()};

/*evidence Dialog*/

function ReactionEvidenceDialog(){
  var orgid = initCelOverview.orgid;
  var url     = "/"+orgid+"/reactionEvidence.html";
  setDialogReactionEvidenceBody(url);
}

function setDialogReactionEvidenceBody(url) {
  var text    = null;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      text = request.responseText;
      celDialogReactionEvidence.setBody(text);
      celDialogReactionEvidence.show() } };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

///kr:Nov-17-2022 The fn pwyCategoriesOmicsDataTable() pops up a dialog with a dropdown list,
/// as part of an HTML form.  That is where the selector's ID is defined as: "PwyCategoriesSelector" .
/// The same ID has to be used here to retrieve the selected result.
/// Clicking on the dialog's "DataTable" button invokes the following handler.
///
function handleDataTablePwyCategories() {
  //kr:Nov-22-2022 For the multiple-selector:
  // According to a suggestion at:
  // https://stackoverflow.com/questions/73949872/how-to-get-an-array-of-currently-selected-items-of-a-multiple-selection-html-sel/73949951#73949951
  let selectedPwyCategoriesV = [...document.getElementById("PwyCategoriesSelector").selectedOptions].map(o => o.value);
  // For debugging:
  //alert('handleDataTablePwyCategories() returns: ' + selectedPwyCategoriesV);
  // The following will collect the rows of the DataTable and then show it:
  // (See omicsDataTable.js )
  pwyBlockDataTable(selectedPwyCategoriesV);
}

/* kr:Nov-22-2022 The (old) version for a single-selector:
function handleDataTablePwyBlocks() {
  let selectedPwyBlock = document.getElementById("PwyBlocksSelector").value ;
  // For debugging:
  //alert('handleDataTablePwyBlocks() returns: ' + selectedPwyBlock);
  // Collect the rows of the DataTable and then show it:
  pwyBlockDataTable(selectedPwyBlock);
  }
*/

function celOverviewhighlightPathwaybyEvidence(query,fn) {
  var orgid = initCelOverview.orgid;
  var zoomLevel = WG.GetCurrentZoomLevel();
  var q = query;
  var url = '/'+orgid+'/cel-overview-pathway-by-evidence-to-nodes?zoomlevel='+zoomLevel+'&object='+encodeURIComponent(q);
  getRequestAsync(url, fn);
}

function PathwayEvidence(){
PathwayEvidenceDialog();
}

var EvidenceSubmithandler;
//function handleGeneRegulon() { handleCelHighlightGeneRegulon1();}
//function handleGeneRegulon() {RegulonSubmithandler();}
//function handleGeneRegulon(){};
function handlePathwayEvidence() {handleCelHighlightPathwayEvidence()};

function PathwayEvidenceDialog() {
  var orgid   = initCelOverview.orgid;
  var url     = "/"+orgid+"/pathwayEvidence.html";
  setDialogPathwayEvidenceBody(url);
}

function setDialogPathwayEvidenceBody(url) {
  var text    = null;
  var request = new XMLHttpRequest();
  request.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      text = request.responseText; }
    celDialogPathwayEvidence.setBody(text);
    celDialogPathwayEvidence.show();
  };
  request.open("GET", url, true);
  request.setRequestHeader("Accept", "text/*");
  request.send();
}

/* kr:Nov-17-2022 Commented out, because it looks like dead code, that not is referenced from elsewhwere.
function execSetupEvidenceForm(){
var init = document.getElementById('evidence2');
//('celDialogGeneRegulon');
  if(init.value) {
    try {
      // This initializes the form with default or user preference values.
      eval(init.value);
    }
    catch(e) {}
  }
}
*/

function acSlotSelector(nameField, container, idField, searchType, includeFrameId, org) {
  if (!org) { org = orgID() };
  var t = (searchType) ? searchType.toLowerCase() : '';
  var typeName = '';
  var slotName = '';
  var orgid = initCelOverview.orgid;
  switch (t) {
  case 'compounds'      :  typeName = 'Compounds'; slotName = 'COMMON-NAME'; break;
    // RAB NEW
  case 'structures'     :  typeName = 'Compounds'; slotName = 'SMILES'; break;
  case 'reactions'      :  typeName = 'Reactions'; slotName = 'COMMON-NAME'; break;
  case 'pathways'       :  typeName = 'Pathways'; slotName =  'COMMON-NAME'; break;
  case 'reactionec'     :  typeName = 'Reactions'; slotName = 'EC-NUMBER'; break;
  case 'genes'          :  typeName = 'Genes'; slotName =     'COMMON-NAME'; break;
  case 'enzymes'        :  typeName = 'Enzymes'; slotName =  'COMMON-NAME'; break;
  default: alertUser('Error getSlotURL, unknown type '+type);
  }

  // Use an XHRDataSource 
  var oDS = new YAHOO.util.XHRDataSource(("/" + org + "/ajax-slot-search"));
  // Set the responseType 
  oDS.responseType = YAHOO.util.XHRDataSource.TYPE_JSARRAY;// TYPE_JSON; 
  // Define the schema of the JSON results 
  oDS.responseSchema = {
                        fields : [ "name" ] };
  // Instantiate the AutoComplete
  var oAC = new YAHOO.widget.AutoComplete(nameField, container, oDS);
  // The webservice needs additional parameters
  oAC.generateRequest = function(sQuery) {
      return "?max=100&type=" + typeName + "&object=" + slotName
      + "&substr=" + encodeURIComponent(sQuery) + "&inclFrameID=" + ((includeFrameId) ? "true" : "false") + "&listOnly=true";
  };
  oAC.formatResult = function (oData, sQuery, sMatch) {
      return (oData[0]);
  };
  oAC.maxResultsDisplayed = 200;
  // If idField is supplied, use these handlers (defined for the search pages).
  // If idField is not supplied (i.e. for org selectors), the calling fn needs
  // to define its own handlers.
  if (idField) {
    oAC.itemSelectEvent.subscribe(function (sType, aArgs) {
      //      var oData = aArgs[2]; // object literal of selected item's result data
      idField.value = aArgs;
      //      idField.value = oData[0];
      nameField.value = aArgs;
      //      nameField.value = oData[1];
    });
    oAC.textboxKeyEvent.subscribe(function(oSelf, nKeycode) {
      idField.value = "";
    });
  }
  return {
      oDS: oDS,
      oAC: oAC
  };
}

// Open regOv legend if the user has only been to the page once
function waitForReg() {
    if (typeof regDialogLegend !== "undefined") {
	regDialogLegend.show();
    }
    else
	setTimeout(waitForReg, 250);
}

function openRegDialog() {
    if (window.location.href.includes("regOv.shtml") === true) {
	let visited = localStorage.getItem("regOvVisited") || 0;
	if (visited != 1) {
	    visited = parseInt(visited);
	    visited++;
	    console.log(visited);
	    localStorage.setItem("regOvVisited", visited);
	    waitForReg();
	}
    }
}

jQuery('document').ready(function() {
    openRegDialog();
});
/* -*- mode: js; c-basic-offset: 2; indent-tabs-mode: nil -*- */

var connectorTable = {};
var bboxTable = {};
var graphic;
/* for some reason, the FIRST time we draw a connector,
   we have to account for the top-margin of the container */
var padCnt = 0;
function getTopPadding() {
  if (padCnt != 0) {
    var node = graphic._node;
    while (node.getAttribute('class') != 'pageContentDynamic')  node=node.parentNode;
    padCnt = 0;
    return eval(getComputedStyle(node)['paddingTop'].split("px")[0]) }
  else {
    return 0 }}
/*
var toggle = false;
function ToggleOmicsPopups () {
  YUI().use('graphics', function (Y) {
//    graphic._node.style.visibility = 'hidden';
    var popups = showPathwayTooltip.popups;
    toggle = true;
    for ( var i = 0; i < popups.length; i++ ) {
      var popup = popups[i];
      var visibleP = popup.feature.node.style.visibility;
      popup.feature.node.style.visibility = (visibleP == 'visible') ? 'hidden' : 'visible';
      if (visibleP == 'visible') 
        popup.dialog.hide();
      else popup.dialog.show(); };
    toggle = false; })}
*/

var googleChartsLoaded = false;

function showPathwayTooltipNew (imageDivId, type, oid, idx, stepArray) {
  google.charts.load('current', {'packages':['corechart', 'bar']});
  google.charts.setOnLoadCallback(function () {
//  console.log("showPathwayTooltipNew ("+ imageDivId + "," + type + "," + oid + "," + idx + ");");
  for (var i = 0; i < idx.length; i++) {
    var popup = WG.PwyOmicsTooltip ( imageDivId, type, idx[i] );
    if (popup) {
    var popupDivId = "PwyPopupChart" + oid.toString().replace(/,/g, "_") + "_" + i;
    if (animateOmics.layers && (animateOmics.layers.length > 1))
          displayMultiStepOmicsChartsPwy(stepArray, popupDivId, popup);
    else displaySingleStepOmicsChartPwy(stepArray, popupDivId, popup);
    }}} );
}

function getOmicsDataMostPosNegValuesPwy(data) {
  // data is an array of arrays; inner array is frameid, color, value, genename
  // return value is the absolute maximum value in the array
  var MaxPosValue = 0;
  var MaxNegValue = 0;
  for (i = 0; i < data.length; i++) {
    var CurDatum = data[i];
    var CurValue = CurDatum[2];
    if (CurValue > 0) 
      MaxPosValue = (CurValue > MaxPosValue) ? CurValue : MaxPosValue;
    else MaxNegValue = (CurValue < MaxNegValue) ? CurValue : MaxNegValue;
  };
  return [MaxPosValue, MaxNegValue]
}

function getOmicsDataMostPosNegValuesMultiPwy(dataTuplesByStep) {
  // data is an array of arrays (of steps) of arrays (data/gene); 
  // inner array (data/gene) is frameid, color, value, genename
  // return value is the absolute maximum value in all the data/gene arrays
  var MaxPosValue = 0;
  var MaxNegValue = 0;
  for (var i = 0; i < dataTuplesByStep.length; i++) {
    var CurStep = dataTuplesByStep[i];
    for (var j = 0; j < CurStep.length; j++) {
      var CurDatum = CurStep[j];
      var CurValue = CurDatum[2];
      if (CurValue > 0) 
      MaxPosValue = (CurValue > MaxPosValue) ? CurValue : MaxPosValue;
      else MaxNegValue = (CurValue < MaxNegValue) ? CurValue : MaxNegValue;
    } }
  return [MaxPosValue, MaxNegValue];
}

function getOmicsDataMinMaxPwy(data) {
  // data is an array of arrays; inner array is frameid, value, genename
  // return value is the absolute maximum value in the array
  var MaxValue = data[0][2];
  var MinValue = MaxValue;
  for (i = 0; i < data.length; i++) {
    var CurDatum = data[i];
    var curValue = CurDatum[2];
    if (curValue > MaxValue)
      MaxValue = curValue;
    if (curValue < MinValue)
      MinValue = curValue;
  };
  return [MinValue, MaxValue]
}

function getOmicsDataMinMaxMultiPwy(dataTuplesByStep) {
  var maxValue = dataTuplesByStep[0][0][2];
  var minValue = dataTuplesByStep[0][0][2];
  for (var i = 0; i < dataTuplesByStep.length; i++) {
    var CurStep = dataTuplesByStep[i];
    for (var j = 0; j < CurStep.length; j++) {
      var CurDatum = CurStep[j];
      var curValue = CurDatum[2];
      if (curValue > maxValue)
	maxValue = curValue;
      if (curValue < minValue)
	minValue = curValue;
    } }
  return [ minValue,maxValue ];
}

function getHeatOmicsDataMultiGenesPwy(data) {
  /* DATA is an array of 4 tuples: step, color, value, gene name
     RETURN VALUE is an array of objects
     { geneName: C }
     and V is the value for gene G in data array */
  var tmpString = "[ { ";
  for (var i = 0; i < data.length; i++) {
    var curDatum = data[i];
    tmpString += "'"+curDatum[3]+"': '"+curDatum[1];
    tmpString += (i == data.length -1) ? "'" : "', ";
  }
  tmpString += " } ]";
  return eval(tmpString);
}

function getHeatOmicsDataMultiStepsPwy(data) {
  /* DATA is an array of arrays (per step) 
          NOT ANY MORE of 4 tuples: step, color, value, gene name
          billingt:Apr-16-2018 of 3 tuples: step, value, gene name
     RETURN VALUE is an array of objects of n entries (n = number of steps + 1)
     { geneName: "G", step_0: "C0", ... , step_n-1: "Cn-1" }
     and Cn is the color for gene G at step n */
  var stepStyle = (animateOmics.popupLabelStyle && (animateOmics.popupLabelStyle)) ? animateOmics.popupLabelStyle : 'sequential';
  var tmpString = "[ ";
  var geneCount = data[0].length;
  for (var geneIdx = 0; geneIdx < geneCount; geneIdx++) {
    // print beginning of object ... gene name column data
    tmpString += "{ gene: '"+data[0][geneIdx][3]+"', ";
    for (var step = 0; step < data.length; step++) {
      var curDatum = data[step][geneIdx];
      // "{ gene: 'geneName', "... add "stepn: color n"
      tmpString += "step_"+step+": '"+curDatum[1];
      tmpString += (step == data.length - 1) ? "'" : "', "; }
    tmpString += (geneIdx == geneCount - 1) ? " } " : " }, ";
  }
  tmpString += " ]";
  return eval(tmpString);
}

function displaySingleStepOmicsChartPwy (dataTuplesByStep, popupDivId, popupDialog) {
  var cli = null;
  var omicsBaseWidth = 49 + (2 * animateOmics.popupFontSize);
  var headerStrings = popupDialog.header.childNodes[0].innerHTML.split("-");
  var maxHeaderStrLen = 0;
  for (var i = 0; i < headerStrings.length; i++) {
    var strLen = getStrLen(headerStrings[i]);
    maxHeaderStrLen = (strLen > maxHeaderStrLen) ? strLen : maxHeaderStrLen; }
  var omicsHeaderMinWidth = maxHeaderStrLen + getStrLen("-") + 20;
  var omicsPerColWidth = 25;
  var omicsHeatTableMinWidth = Math.max(85,omicsHeaderMinWidth);
  var omicsColumnCnt = dataTuplesByStep[0].length // how many genes; column here is bar in chart
  var omicsChartWidth = Math.max((omicsBaseWidth + (omicsPerColWidth * omicsColumnCnt)), omicsHeaderMinWidth);
  var heatBoxDimension = animateOmics.popupFontSize * 1.7;//+ 8;
  // ------------------ get the data for each chart (one chart per gene involved) ------------------
  var geneCommonNames = new Array();
  var maxGeneCommonNameSize = 0;
  for (var gene = 0; gene < omicsColumnCnt; gene++) {
    var geneName =   truncateString(dataTuplesByStep[0][gene][3],GeneNameMax);
    var geneNameSize = getStrLen(geneName);
    geneCommonNames[gene] = geneName;            // for an arbitrary step (0), each gene's (i), prettyname (3rd element)
    maxGeneCommonNameSize = (geneNameSize > maxGeneCommonNameSize) ? geneNameSize : maxGeneCommonNameSize; }
  var heatGeneLabelSize = maxGeneCommonNameSize;// + 6;
  var hasColumnLabel = (dataTuplesByStep[0][0][3] != "");
  var columnLabelSize = 20 + ((hasColumnLabel) ? 
			      ((omicsColumnCnt == 1) ? animateOmics.popupFontSize : maxGeneCommonNameSize) // getStrLen(dataTuplesByStep[0][0][2]))
			      : 0);
  var omicsChartHeight = (animateOmics.popupStyle == 'heat')
      ? (heatBoxDimension + 2 + maxGeneCommonNameSize + 8) //maxStepLabelLength + 8)
      : (((0.01 * animateOmics.popupVerticalScale * 85) + columnLabelSize) + 5 + animateOmics.popupFontSize);
  var omicsCompleteHeight = ((animateOmics.popupStyle == 'heat')
                             ? (10 + omicsChartHeight)
                             : omicsChartHeight);
  var omicsCLIwidth = null;
  var omicsHeatWidth = Math.max(omicsHeatTableMinWidth, (5 + ((heatBoxDimension + 5) * omicsColumnCnt)));
  // ------------------ set up the HTML "divId"s per chart type ------------------------------------
  var subDivIds = new Array();                                     // generate the div names
  var chartTypes = ['bar', 'plot', 'heat'];
  var chartTypeNames = ["Bar", "XY", "Heat"];
  var subDivId = popupDivId+"subDiv";
  // ------------------ Create the tabs for each chart type ----------------------------------------
  popupDialog.setBody('<div id="'+popupDivId+'" style="position:relative"></div>');
  popupDialog.cfg.setProperty("width", ((animateOmics.popupStyle == 'heat')
                                         ? omicsHeatWidth
                                         : omicsChartWidth)+"px");
  // ------------------ Gather the data for chart ... (all genes on one chart) ------------------------
  // for google charts, need [['Gene Name','Value',{ role : 'style' }],
  //                          [gene-name, value, color], ... ]
  // CELOV:: rxn-name ???; value, the bar height; color, bar color; gene-name, label at bottom of column.
  // PATHWAYS:: rxn-name ???; value, bar height; color, bar color; gene-name, label at bottom of column ("", for pathways)
  var omicsDataArray =  new Array(); // an array of 3-tuples/arrays per gene [rxn-name, value, gene-name]
  var omicsDataArrayGoogle =  new Array();
  var step = 0;
  for (geneIdx = 0; geneIdx < omicsColumnCnt; geneIdx++)
    omicsDataArray[geneIdx] = dataTuplesByStep[step][geneIdx];
  var omicsMultiPopupDS;
  var seriesDef;
  // find largest and smallest values for all graphs in this popup
  var maxOmicsMostPosNeg = getOmicsDataMostPosNegValuesPwy(omicsDataArray);
  var omicsMinMax = getOmicsDataMinMaxPwy(omicsDataArray);
  // ---------------- Display for Bar, Plot, and Heat map ----------------------------------------
  // DISPLAY BAR CHART
  if (animateOmics.popupStyle !== 'heat') {
    // ------------------ set up the HTML "divId"s for each chart, but not heat map----
    var subDivId = popupDivId+"sub";
    var newElement = document.createElement("div");
    newElement.id=subDivId;
    newElement.style.position="absolute";
    newElement.style.left= 0+"px";
    newElement.style.top= 0+"px";
    newElement.style.width=omicsChartWidth+"px";
    newElement.style.height=omicsChartHeight+"px";
    var subDiv = newElement;
    var popupDivElement = document.getElementById(popupDivId);
    popupDivElement.appendChild(subDiv);
    // use the maxOmicsMostPosNeg values to determine (see below)
    //    (a) should we use a log scale or not,
    //    (b) the view window of the graph(s), and
    //    (c) the tick mark values
    var vAxisLogarithmic = (11 < Math.abs(maxOmicsMostPosNeg[0] - maxOmicsMostPosNeg[1])) // (a) - log scale or not
    var vAxisMaxLog10 = (maxOmicsMostPosNeg[0] == 0)
	? null
	: ((Math.log10(Math.abs(maxOmicsMostPosNeg[0])).ceil()) * ((maxOmicsMostPosNeg[0] < 0)
								   ? -1
								   : 1 ));
    var vAxisMinLog10 = (maxOmicsMostPosNeg[1] < 0)
	? (-1 * (Math.log10(Math.abs(maxOmicsMostPosNeg[1])).floor()))
	: null;
    var vAxisMax = (vAxisLogarithmic) // (b) - view window vertical max - needs to be a little bit bigger or it clips
	? ((maxOmicsMostPosNeg[0] == 0)
	   ? 0
	   : (((10 ** vAxisMaxLog10))
	      + ((maxOmicsMostPosNeg[0] < 0)
		 ? -1
		 : 1 )))
	: ((maxOmicsMostPosNeg[0] > 0 )
	   ? (maxOmicsMostPosNeg[0] * 1.1)
	   : 0);
    var vAxisMin = (maxOmicsMostPosNeg[1] < 0) // (b) - view window vertical min - needs to be a little bit smaller or it clips
	? (((vAxisLogarithmic)
	    ? ((10 ** vAxisMinLog10) - 1)
	    : (1.1 * maxOmicsMostPosNeg[1])))
	: 0;
    if (vAxisLogarithmic) { // (c) - if logarithmic, calculate tick marks (powers of 10 and 0), if not use automatic
      var tickArray = new Array();
      var tickCount = 0;
      if (vAxisMinLog10 = null) {
	tickArray[tickCount++] = 0 }
      else {
	for (var cnt = 0; cnt >= vAxisMinLog10; cnt--)
	  tickArray[tickCount++] = (10 ** cnt);
	tickArray[tickCount++] = 0 };
      if (vAxisMaxLog10 >= 0)
	for (var cnt = 0; cnt <= vAxisMaxLog10; cnt++)
	  tickArray[tickCount++] = (10 ** cnt); };
    var absVMin = Math.abs(omicsMinMax[0]);
    var absVMax = Math.abs(omicsMinMax[1]);
    var useScientificNotation = (absVMin < 0.001 || absVMax < 0.001);
    var vAxisLabelMaxWidth = 0;
    if (vAxisLogarithmic && useScientificNotation) {
      for (var i = 0; i > tickArray.length; i++) {
	let len = getstrLen(tickArray[i].toExponential);
	vAxisLabelMaxWidth = (vAxisLabelMaxWidth < len) ? len : vAxisLabelMaxWidth }}
    else vAxisLabelMaxWidth = (useScientificNotation)
      ? getStrLen("-5E-5")
      : Math.max((getStrLen(vAxisMax.toLocaleString())),
		 (getStrLen(vAxisMin.toLocaleString())));
    var options = {
	hAxis: { textPosition: (hasColumnLabel) ? "out" : "none",
		 slantedText : (hasColumnLabel && (omicsColumnCnt > 2)) ? true : false,
		 slantedTextAngle : 70 },
	legend: { position: "none" },
	chartArea: {
	  left: vAxisLabelMaxWidth + 5,
	  top: animateOmics.popupFontSize,
	  height: omicsChartHeight - columnLabelSize - (animateOmics.popupFontSize / 2),
	  backgroundColor: { stroke: 'black', strokeWidth: 1}  },
	fontSize: animateOmics.popupFontSize,
	height: omicsChartHeight,
	pointsVisible: true,
        bar: { groupWidth: (omicsColumnCnt > 2) ? '60%' : 25 },
	vAxis: {
	  scaleType: (vAxisLogarithmic) ? 'mirrorLog' : null,
	  viewWindow: { min: vAxisMin, max: vAxisMax },
	  format : (useScientificNotation) ? 'scientific' : 'decimal',
	  ticks: (vAxisLogarithmic) ? tickArray : null }
    };
    omicsDataArrayGoogle[0] = (useScientificNotation)
      ? [ 'Gene Name','Value',{ role : 'style' },{type : 'string', role : 'tooltip'} ]
      : [ 'Gene Name','Value',{ role : 'style' } ];
  for (geneIdx = 0; geneIdx < omicsColumnCnt; geneIdx++) {
    var tempArray = dataTuplesByStep[step][geneIdx];
    omicsDataArrayGoogle[(1 + geneIdx)] = (useScientificNotation)
      ? [ tempArray[3],tempArray[2], 'color: '+ tempArray[1], Number.parseFloat(tempArray[2].toPrecision(3)).toExponential() ]
      : [ tempArray[3],tempArray[2], 'color: '+ tempArray[1] ];
  }
  var GoogleData = google.visualization.arrayToDataTable(omicsDataArrayGoogle);
  GoogleData.setTableProperty('allowHtml', true);
    var fudge = 17;

    if (animateOmics.popupStyle == 'bar') {
      // DISPLAY BAR CHART
      var chart = new google.visualization.ColumnChart(newElement);
      chart.draw(GoogleData,options);
      cli = chart.getChartLayoutInterface();
      omicsCLIwidth=cli.getBoundingBox('chartarea').width+"px";
      newElement.style.width=(Math.max((fudge + (cli.getBoundingBox('chartarea').width)), omicsHeaderMinWidth)) + "px";
      popupDialog.cfg.setProperty("width", newElement.style.width);
      chart.clearChart();
      chart = new google.visualization.ColumnChart(newElement);
      chart.draw(GoogleData,options);
    }
    else if (animateOmics.popupStyle == 'plot') {
      // DISPLAY PLOT CHART
      var chart = new google.visualization.LineChart(newElement);
      chart.draw(GoogleData,options); }}
  else {
    // DISPLAY HEAT CHART
    var heatOmicsDataArray = getHeatOmicsDataMultiGenesPwy(omicsDataArray);
    omicsMultiPopupDS = new YAHOO.util.DataSource(heatOmicsDataArray);
    var heatDataFormatting = function(elLiner, oRecord, oColumn, oData) { 
      // oData is color
      elLiner.innerHTML = '<div class="box-round" style="background-color:'+oData+
        ';width:'+heatBoxDimension+'px;height:'+heatBoxDimension+
        'px;border:1px solid;margin-left:auto;margin-right:auto" >'; }
    // Add the custom formatter to the shortcuts 
    YAHOO.widget.DataTable.Formatter.heatData = heatDataFormatting; 
    var columnDefs = new Array();
    for (var i = 0; i < omicsDataArray.length; i++)
      columnDefs[i] = {key: omicsDataArray[i][2], formatter: "heatData" };
    var dataTable = new YAHOO.widget.DataTable(popupDivId, columnDefs, omicsMultiPopupDS,
                                               {style: {font: {size: animateOmics.popupFontSize} } } ); }
  var x = document.getElementById(popupDivId)
  x.parentElement.style.height = ((animateOmics.popupStyle == 'heat') ? x.childNodes[1].getHeight() : omicsCompleteHeight)+"px";
  x.parentElement.style.paddingTop = "0px";
  x.parentElement.style.paddingLeft = "0px";
  x.parentElement.style.paddingRight = "0px";
  x.parentElement.style.paddingBottom = "0px";
}


function columnNamesFromFileP () {
  if (animateOmics.layers)
    for (var i = 0; i < animateOmics.layers.length; i++)
      if (animateOmics.layers[i].name.length > 0) return true;
  else return false;
}

function getMaxHeaderStrLen () {
  var temp = 0;
  for (var i = 0; i < animateOmics.layers.length; i++)
    if (getStrLen(animateOmics.layers[i].name) > temp)
      temp = getStrLen(animateOmics.layers[i].name);
  return temp;
}

/* billingt:Aug-12-2013 
   dataTuplesByStep -   data is an array of arrays (of steps) of arrays (data/gene); 
                        inner array (data/gene) is frameid, color, value, genename
                        return value is the absolute maximum value in all the data/gene arrays
                        an array for each step, [ [step1] ... ]
                        each step the data array for one or more genes [ [step1 [gene1 ...]] ...]
                        gene: [ 0 <frameid>, 1 <color>, 2 <value>, 3 <gene common name> ]
   popupDivId - 
   popup -
   popupDialog -

   popup must be rendered before calling this function
   COMPLETELY SIDE EFFECT - no return value */
function displayMultiStepOmicsChartsPwy (dataTuplesByStep, popupDivId, popupDialog) {
  var chartCount = dataTuplesByStep[0].length; // tells you the number of bar & plot charts, number of rows in heat map
  var omicsColumnCnt = dataTuplesByStep.length; // column here is bar in chart, point in plot, column in heat ... and a step
  var chartRowLength = Math.ceil(Math.sqrt(chartCount)); // if more than one chart, try to make display a square of charts
  var chartRowCount = ((chartCount / chartRowLength) > (chartRowLength - 1)) ? chartRowLength : (chartRowLength - 1);
  var columnLabelSize = 20 + (((animateOmics.popupLabelStyle == 'columns')
                               && columnNamesFromFileP()) ? getMaxHeaderStrLen() : animateOmics.popupFontSize); // 0;
  var headerStrings = popupDialog.header.childNodes[0].childNodes[0].innerHTML.split("-");
  var maxHeaderStrLen = 0;
  for (var i = 0; i < headerStrings.length; i++) {
    var strLen = getStrLen(headerStrings[i]);
    maxHeaderStrLen = (strLen > maxHeaderStrLen) ? strLen : maxHeaderStrLen; }
  var omicsHeaderMinWidth = maxHeaderStrLen + getStrLen("-") + 37;
  // Try to maintian actual graph heights when font sizes change
  var heatBoxPad = 3;
  var heatBoxDimension = (Math.ceil(animateOmics.popupFontSize * 1.7) + heatBoxPad);
  var geneCommonNames = new Array();
  var actualMaxGeneCommonNameSize = 0;
  //  var headerHeight = 25;
  for (var gene = 0; gene < dataTuplesByStep[0].length; gene++) {
    var geneName = dataTuplesByStep[0][gene][3];
    var geneNameSize = getStrLen(geneName);
    geneCommonNames[gene] = geneName;            // for an arbitrary step (0), each gene's (i), prettyname (3rd element)
    actualMaxGeneCommonNameSize = (geneNameSize > actualMaxGeneCommonNameSize) ? geneNameSize : actualMaxGeneCommonNameSize; 
    // maxGeneCommonNameSize = (geneNameSize > maxGeneCommonNameSize) ? geneNameSize : maxGeneCommonNameSize; 
  }
  var heatGeneLabelSize = actualMaxGeneCommonNameSize;// + 6;
  var stepLabels = new Array();
  var maxStepLabelLength = 0;
  var maxStepCharCnt = 0;
  var stepStyle = ((animateOmics.popupLabelStyle && (animateOmics.popupLabelStyle))
                   ? animateOmics.popupLabelStyle
                   : 'sequential');
  for (var step = 0; step < omicsColumnCnt; step++) {
    var label = (stepStyle == 'sequential') ? animateOmics.layers[step].colnum : animateOmics.layers[step].name;
    stepLabels[step] = label.toString();
    maxStepLabelLength = Math.max(maxStepLabelLength, getStrLen(label));
    maxStepCharCnt = Math.max(stepLabels[step].length, maxStepCharCnt);
  }
  var labelRotationAngle = (maxStepCharCnt > 2) ? -90 : 0;
  var omicsChartHeight = (animateOmics.popupStyle == 'heat')
      ? ((heatBoxDimension * chartCount) + (chartCount * 2) + maxStepLabelLength + 8)
      : (((0.01 * animateOmics.popupVerticalScale * 85) + columnLabelSize) + 5 + animateOmics.popupFontSize);
  // Try to maintian Bar/Plot actual graph widths when font sizes change
  var omicsBaseWidth = (49 + ((actualMaxGeneCommonNameSize == 0)
                              ? 0 
                              : (2 * animateOmics.popupFontSize)));
  var omicsPerColWidth = 25;
  var omicsHeatTableMinWidth = 85;
  var omicsChartWidth = omicsBaseWidth + (omicsPerColWidth * omicsColumnCnt);
  var omicsCompleteWidth = Math.max (((omicsChartWidth * chartRowLength) + (5 * chartRowLength)), //(chartRowLength - 1))),
				     omicsHeaderMinWidth);
  var omicsCompleteHeight = ((animateOmics.popupStyle == 'heat')
                             ? (10 + omicsChartHeight)
                             : ((omicsChartHeight * chartRowCount) + (5 * (chartRowCount - 1))));
  // ------------------ get the data for each chart (one chart per gene involved) ------------------ 
  var chartPad = 5; 
    var omicsHeatWidth = (Math.max(omicsHeatTableMinWidth, (((heatBoxDimension + 5) * omicsColumnCnt) + chartPad + heatGeneLabelSize)));
    popupDialog.setBody('<div id="'+popupDivId+'" style="position:relative"></div>');
//  popupDialog.cfg.setProperty("height", omicsCompleteHeight+"px");
  popupDialog.cfg.setProperty("width", ((animateOmics.popupStyle == 'heat')
                                         ? omicsHeatWidth
                                         : omicsCompleteWidth)+"px");
  // ------------------ Gather the data for each chart ... (one chart/gene) ------------------------
  // find maximum across ALL values in all charts
  if (animateOmics.popupStyle !== 'heat') {
    // ------------------ set up the HTML "divId"s for each chart, but not heat map----
    var subDivIds = new Array();                                   // generate the div names
    for (var chartNum = 0; chartNum < chartCount; chartNum++) 
      subDivIds[chartNum] = popupDivId+"sub"+chartNum;
    var subDivs = new Array();                                     // and create the divs, including their relative location
    var curDivIdx = -1;
    for (var curRow = 0; curRow < chartRowCount; curRow++) {
      var y = (omicsChartHeight * curRow) + (5 * curRow);
      for (var curCol = 0; curCol < chartRowLength; curCol++) {
        var x = (omicsChartWidth * curCol) + (5 * curCol);
        curDivIdx += 1;
        var newElement = document.createElement("div");
        newElement.id=subDivIds[curDivIdx];
        newElement.style.position="absolute";
        newElement.style.left=x+"px";
        newElement.style.top=y+"px";
        newElement.style.width=omicsChartWidth+"px";
        newElement.style.height=omicsChartHeight+"px";
        subDivs[curDivIdx] = newElement; }}
    var popupDivElement = document.getElementById(popupDivId);
    if (chartCount == 1) {
      popupDivElement.parentElement.setStyle("background-color:#ffffff") };
    for (idx = 0; idx < subDivs.length; idx++)
      popupDivElement.appendChild(subDivs[idx]);
    // find largest and smallest values for all graphs in this popup
    var maxMostPosNegValues = getOmicsDataMostPosNegValuesMultiPwy(dataTuplesByStep);
    var omicsMinMax = getOmicsDataMinMaxMultiPwy(dataTuplesByStep);
    // use these values to determine (see below)
    //    (a) should we use a log scale or not,
    //    (b) the view window of the graph(s), and
    //    (c) the tick mark values
    var vAxisLogarithmic = (11 < Math.abs(maxMostPosNegValues[0] - maxMostPosNegValues[1])) // (a) - log scale or not
    var vAxisMaxLog10 = (maxMostPosNegValues[0] == 0)
	? null
	: ((Math.log10(Math.abs(maxMostPosNegValues[0])).ceil()) * ((maxMostPosNegValues[0] < 0)
								   ? -1
								   : 1 ));
    var vAxisMinLog10 = (maxMostPosNegValues[1] < 0)
	? (-1 * (Math.log10(Math.abs(maxMostPosNegValues[1])).floor()))
	: null;
    var vAxisMax = (vAxisLogarithmic) // (b) - view window vertical max - needs to be a little bit bigger or it clips
	? ((maxMostPosNegValues[0] == 0)
	   ? 0
	   : (((10 ** vAxisMaxLog10))
	      + ((maxMostPosNegValues[0] < 0)
		 ? -1
		 : 1 )))
	: ((maxMostPosNegValues[0] > 0 )
	   ? (maxMostPosNegValues[0] * 1.1)
	   : 0);
    var vAxisMin = (maxMostPosNegValues[1] < 0) // (b) - view window vertical min - needs to be a little bit smaller or it clips
	? (((vAxisLogarithmic)
	    ? ((10 ** vAxisMinLog10) - 1)
	    : (1.1 * maxMostPosNegValues[1])))
	: 0;
    if (vAxisLogarithmic) { // (c) - if logarithmic, calculate tick marks (powers of 10 and 0), if not use automatic
      var tickArray = new Array();
      var tickCount = 0;
      if (vAxisMinLog10 = null) {
	tickArray[tickCount++] = 0 }
      else {
	for (var cnt = 0; cnt >= vAxisMinLog10; cnt--)
	  tickArray[tickCount++] = (10 ** cnt);
	tickArray[tickCount++] = 0 };
      if (vAxisMaxLog10 >= 0)
	for (var cnt = 0; cnt <= vAxisMaxLog10; cnt++)
	  tickArray[tickCount++] = (10 ** cnt); };
    var absVMin = Math.abs(omicsMinMax[0]);
    var absVMax = Math.abs(omicsMinMax[1]);
    var useScientificNotation = (absVMin < 0.001 || absVMax < 0.001);
    var vAxisLabelMaxWidth = 0;
    if (vAxisLogarithmic && useScientificNotation) {
      for (var i = 0; i > tickArray.length; i++) {
	let len = getstrLen(tickArray[i].toExponential);
	vAxisLabelMaxWidth = (vAxisLabelMaxWidth < len) ? len : vAxisLabelMaxWidth }}
    else vAxisLabelMaxWidth = (useScientificNotation)
      ? getStrLen("-5E-5")
      : Math.max((getStrLen(vAxisMax.toLocaleString())),
		 (getStrLen(vAxisMin.toLocaleString())));
    for (var geneCnt = 0; geneCnt < geneCommonNames.length; geneCnt++) {
      var geneCommonName = geneCommonNames[geneCnt];
      var omicsDataArray =  new Array(); // an array of arrays (per step) of
      // 3-tuples/arrays for current gene [rxn-name, value, gene-name]
      for (var step = 0; step < omicsColumnCnt; step++) // loop for step, get per gene omics data
        for (geneIdx = 0; geneIdx < chartCount; geneIdx++)
          if (dataTuplesByStep[step][geneIdx][3] == geneCommonName)
            omicsDataArray[step] = dataTuplesByStep[step][geneIdx];
      var omicsDataArrayGoogle =  new Array();
      omicsDataArrayGoogle[0] = (useScientificNotation)
	? [ 'Gene Name','Value',{ role : 'style' },{type : 'string', role : 'tooltip'} ]
        : [ 'Gene Name','Value',{ role : 'style' } ];
      for (var step = 0; step < omicsColumnCnt; step++)
	for (geneIdx = 0; geneIdx < omicsColumnCnt; geneIdx++) {
	  var tempArray = omicsDataArray[step];
	  omicsDataArrayGoogle[step + 1] = (useScientificNotation)
	    ? [ stepLabels[step],tempArray[2], 'color: '+ tempArray[1], Number.parseFloat(tempArray[2].toPrecision(3)).toExponential() ]
	    : [ stepLabels[step],tempArray[2], 'color: '+ tempArray[1] ];
	}
      var GoogleData = google.visualization.arrayToDataTable(omicsDataArrayGoogle);
      GoogleData.setTableProperty('allowHtml', true);
      var omicsMultiPopupDS;
      var seriesDef;
      var options = {
	legend: { position: "none" },
	chartArea: {
	  left: vAxisLabelMaxWidth + 5 + getStrHeight(geneCommonName),
	  top: animateOmics.popupFontSize,
	  height: omicsChartHeight - columnLabelSize - (animateOmics.popupFontSize / 2),
	  backgroundColor: { stroke: 'black', strokeWidth: 1} },
	height: omicsChartHeight,
	fontSize: animateOmics.popupFontSize,
	pointsVisible: true,
	bar: { groupWidth: '60%' },
	hAxis: { slantedText : ((maxStepCharCnt > 1) && (stepStyle == 'columns')),
		 slantedTextAngle : 70 },
	vAxis: {
	  title: geneCommonName,
	  scaleType: (vAxisLogarithmic) ? 'mirrorLog' : null,
	  viewWindow: { min: vAxisMin, max: vAxisMax },
	  format : (useScientificNotation) ? 'scientific' : 'decimal',
	  ticks: (vAxisLogarithmic) ? tickArray : null }
      };
      // ---------------- Display for Bar, Plot, and Heat map ----------------------------------------
      if (animateOmics.popupStyle == 'bar') {
        // DISPLAY BAR CHART per gene
	var chart = new google.visualization.ColumnChart(subDivs[geneCnt]);
	chart.draw(GoogleData,options);}
      else {
        // DISPLAY PLOT per gene
      var chart = new google.visualization.LineChart(subDivs[geneCnt]);
      chart.draw(GoogleData,options);}}}
  else {
    // DISPLAY HEAT per step (columns) per gene (rows)
    var heatOmicsDataArray = getHeatOmicsDataMultiStepsPwy(dataTuplesByStep);
    omicsMultiPopupDS = new YAHOO.util.DataSource(heatOmicsDataArray);
    var heatGeneLabelFormatting = function(elLiner, oRecord, oColumn, oData) {
      // oData is name
      elLiner.innerHTML = '<div style="font-size: '+animateOmics.popupFontSize+
        'px; width: '+heatGeneLabelSize+
        'px; text-align: center">'+oData+'</div>'; }
    var heatDataFormatting = function(elLiner, oRecord, oColumn, oData) { 
      // oData is color
      elLiner.innerHTML = '<div class="box-round" style="background-color:'+oData+
        ';width:'+heatBoxDimension+'px;height:'+heatBoxDimension+
        'px;border:1px solid;margin-left:auto;margin-right:auto" >'; }
    // Add the custom formatter to the shortcuts 
    YAHOO.widget.DataTable.Formatter.heatData = heatDataFormatting;
    var columnDefs = new Array();
    if (actualMaxGeneCommonNameSize > 0) {
      YAHOO.widget.DataTable.Formatter.heatGene = heatGeneLabelFormatting;
      columnDefs[0] = {key: "gene", label: "", formatter: "heatGene"}; }
    var incrZeroOrOne = (actualMaxGeneCommonNameSize > 0) ? 1 : 0;
    for (var step = 0; step < omicsColumnCnt; step++) {
      var stepLabel = stepLabels[step];
      var tmpStr = '( {key: "step_'+step+'", label: "'+stepLabel+'", formatter: "heatData", sortable: "true" } )';
      columnDefs[(step + incrZeroOrOne)] = eval(tmpStr); }
    var dataTable = new YAHOO.widget.DataTable(popupDivId, columnDefs, omicsMultiPopupDS);
  }
  var x = document.getElementById(popupDivId)
  x.parentElement.style.height = ((animateOmics.popupStyle == 'heat') ? x.childNodes[1].getHeight() : omicsCompleteHeight)+"px"; //omicsCompleteHeight+"px";
  if (animateOmics.popupStyle == 'heat') x.parentElement.parentElement.style.width = (2 + (x.childNodes[1].getWidth()))+"px";
  x.parentElement.style.paddingTop = "0px";
  x.parentElement.style.paddingLeft = "0px";
  x.parentElement.style.paddingRight = "0px";
  x.parentElement.style.paddingBottom = "0px";
}
